/* WandaMsg.h
   Generated by wsdl2h 2.8.4 from WandaMsg.wsdl and typemap.dat
   2015-11-16 07:15:19 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on WandaMsg.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"
ns2 = "http://tempuri.org/Imports"
ns3 = "http://schemas.microsoft.com/2003/10/Serialization/"
ns4 = "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/Imports"
//gsoap ns2   schema namespace:	http://tempuri.org/Imports
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
//gsoap ns3   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap ns3   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns4	"http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS"
//gsoap ns4   schema namespace:	http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified
class xsd__anyType { _XML __item; struct soap *soap; };

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:ID"
typedef std::string xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__ID_ to check runtime type (see soapStub.h)
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:IDREF"
typedef std::string xsd__IDREF;

/// Class wrapper for built-in type "xs:IDREF" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__IDREF_ to check runtime type (see soapStub.h)
class xsd__IDREF_ : public xsd__anyType
{ public:
    xsd__IDREF                           __item;                       
};

/// Built-in type "xs:QName".
typedef std::string xsd__QName;

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__QName_ to check runtime type (see soapStub.h)
class xsd__QName_ : public xsd__anyType
{ public:
    xsd__QName                           __item;                       
};

/// Primitive built-in type "xs:anyURI"
typedef std::string xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h)
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h)
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h)
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Built-in type "xs:byte".
typedef char xsd__byte;

/// Class wrapper for built-in type "xs:byte" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__byte_ to check runtime type (see soapStub.h)
class xsd__byte_ : public xsd__anyType
{ public:
    xsd__byte                            __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__dateTime to check runtime type (see soapStub.h)
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Primitive built-in type "xs:decimal"
typedef std::string xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__decimal_ to check runtime type (see soapStub.h)
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__double to check runtime type (see soapStub.h)
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Primitive built-in type "xs:duration"
typedef std::string xsd__duration;

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h)
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h)
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h)
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:long" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__long to check runtime type (see soapStub.h)
class xsd__long : public xsd__anyType
{ public:
    LONG64                               __item;                       
};

/// Class wrapper for built-in type "xs:short" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__short to check runtime type (see soapStub.h)
class xsd__short : public xsd__anyType
{ public:
    short                                __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h)
class xsd__string : public xsd__anyType
{ public:
    std::string                          __item;                       
};

/// Built-in type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Class wrapper for built-in type "xs:unsignedByte" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedByte_ to check runtime type (see soapStub.h)
class xsd__unsignedByte_ : public xsd__anyType
{ public:
    xsd__unsignedByte                    __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedInt to check runtime type (see soapStub.h)
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Class wrapper for built-in type "xs:unsignedLong" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedLong to check runtime type (see soapStub.h)
class xsd__unsignedLong : public xsd__anyType
{ public:
    ULONG64                              __item;                       
};

/// Class wrapper for built-in type "xs:unsignedShort" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedShort to check runtime type (see soapStub.h)
class xsd__unsignedShort : public xsd__anyType
{ public:
    unsigned short                       __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _ns1__SetRTXInfo.
class _ns1__SetRTXInfo;

//  Forward declaration of class _ns1__SetRTXInfoResponse.
class _ns1__SetRTXInfoResponse;

//  Forward declaration of class _ns1__SetSMSInfo.
class _ns1__SetSMSInfo;

//  Forward declaration of class _ns1__SetSMSInfoResponse.
class _ns1__SetSMSInfoResponse;

//  Forward declaration of class _ns1__SetEmailInfo.
class _ns1__SetEmailInfo;

//  Forward declaration of class _ns1__SetEmailInfoResponse.
class _ns1__SetEmailInfoResponse;

//  Forward declaration of class _ns1__SetMMSInfo.
class _ns1__SetMMSInfo;

//  Forward declaration of class _ns1__SetMMSInfoResponse.
class _ns1__SetMMSInfoResponse;

//  Forward declaration of class _ns1__SetRTXNotify.
class _ns1__SetRTXNotify;

//  Forward declaration of class _ns1__SetRTXNotifyResponse.
class _ns1__SetRTXNotifyResponse;

//  Forward declaration of class _ns1__SetRTXJSON.
class _ns1__SetRTXJSON;

//  Forward declaration of class _ns1__SetRTXJSONResponse.
class _ns1__SetRTXJSONResponse;

//  Forward declaration of class _ns1__SetSMSJSON.
class _ns1__SetSMSJSON;

//  Forward declaration of class _ns1__SetSMSJSONResponse.
class _ns1__SetSMSJSONResponse;

//  Forward declaration of class _ns1__SetEmailJSON.
class _ns1__SetEmailJSON;

//  Forward declaration of class _ns1__SetEmailJSONResponse.
class _ns1__SetEmailJSONResponse;

//  Forward declaration of class _ns1__SetSMSInfoC.
class _ns1__SetSMSInfoC;

//  Forward declaration of class _ns1__SetSMSInfoCResponse.
class _ns1__SetSMSInfoCResponse;

//  Forward declaration of class _ns1__SetRTXInfoC.
class _ns1__SetRTXInfoC;

//  Forward declaration of class _ns1__SetRTXInfoCResponse.
class _ns1__SetRTXInfoCResponse;

//  Forward declaration of class _ns1__SetEmailInfoC.
class _ns1__SetEmailInfoC;

//  Forward declaration of class _ns1__SetEmailInfoCResponse.
class _ns1__SetEmailInfoCResponse;

//  Forward declaration of class _ns1__SetMMSInfoC.
class _ns1__SetMMSInfoC;

//  Forward declaration of class _ns1__SetMMSInfoCResponse.
class _ns1__SetMMSInfoCResponse;

//  Forward declaration of class _ns1__SetRTXNotifyC.
class _ns1__SetRTXNotifyC;

//  Forward declaration of class _ns1__SetRTXNotifyCResponse.
class _ns1__SetRTXNotifyCResponse;

//  Forward declaration of class ns4__QueryWandaMsg.
class ns4__QueryWandaMsg;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS         *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.microsoft.com/2003/10/Serialization/":char is a simpleType restriction of xs:int.
typedef int ns3__char;

/// Class wrapper
class ns3__char__ : public xsd__anyType
{ public:
    ns3__char                            __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":duration is a simpleType restriction of xs:duration.
/// Content pattern is "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?" (note: not automatically enforced)
/// Value range is [-P10675199DT2H48M5.4775808S..P10675199DT2H48M5.4775807S]
typedef xsd__duration ns3__duration "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?";

/// Class wrapper
class ns3__duration__ : public xsd__anyType
{ public:
    ns3__duration                        __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":guid is a simpleType restriction of xs:string.
/// Content pattern is "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}" (note: not automatically enforced)
typedef std::string ns3__guid "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}";

/// Class wrapper
class ns3__guid__ : public xsd__anyType
{ public:
    ns3__guid                            __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://tempuri.org/":SetRTXInfo

/// "http://tempuri.org/":SetRTXInfo is a complexType.
class _ns1__SetRTXInfo
{ public:
/// Element query of type "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS":QueryWandaMsg.
    ns4__QueryWandaMsg*                  query                          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXInfoResponse

/// "http://tempuri.org/":SetRTXInfoResponse is a complexType.
class _ns1__SetRTXInfoResponse
{ public:
/// Element SetRTXInfoResult of type xs:string.
    std::string*                         SetRTXInfoResult               0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetSMSInfo

/// "http://tempuri.org/":SetSMSInfo is a complexType.
class _ns1__SetSMSInfo
{ public:
/// Element query of type "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS":QueryWandaMsg.
    ns4__QueryWandaMsg*                  query                          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetSMSInfoResponse

/// "http://tempuri.org/":SetSMSInfoResponse is a complexType.
class _ns1__SetSMSInfoResponse
{ public:
/// Element SetSMSInfoResult of type xs:string.
    std::string*                         SetSMSInfoResult               0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetEmailInfo

/// "http://tempuri.org/":SetEmailInfo is a complexType.
class _ns1__SetEmailInfo
{ public:
/// Element query of type "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS":QueryWandaMsg.
    ns4__QueryWandaMsg*                  query                          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetEmailInfoResponse

/// "http://tempuri.org/":SetEmailInfoResponse is a complexType.
class _ns1__SetEmailInfoResponse
{ public:
/// Element SetEmailInfoResult of type xs:string.
    std::string*                         SetEmailInfoResult             0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetMMSInfo

/// "http://tempuri.org/":SetMMSInfo is a complexType.
class _ns1__SetMMSInfo
{ public:
/// Element query of type "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS":QueryWandaMsg.
    ns4__QueryWandaMsg*                  query                          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetMMSInfoResponse

/// "http://tempuri.org/":SetMMSInfoResponse is a complexType.
class _ns1__SetMMSInfoResponse
{ public:
/// Element SetMMSInfoResult of type xs:string.
    std::string*                         SetMMSInfoResult               0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXNotify

/// "http://tempuri.org/":SetRTXNotify is a complexType.
class _ns1__SetRTXNotify
{ public:
/// Element query of type "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS":QueryWandaMsg.
    ns4__QueryWandaMsg*                  query                          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXNotifyResponse

/// "http://tempuri.org/":SetRTXNotifyResponse is a complexType.
class _ns1__SetRTXNotifyResponse
{ public:
/// Element SetRTXNotifyResult of type xs:string.
    std::string*                         SetRTXNotifyResult             0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXJSON

/// "http://tempuri.org/":SetRTXJSON is a complexType.
class _ns1__SetRTXJSON
{ public:
/// Element infoJson of type xs:string.
    std::string*                         infoJson                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXJSONResponse

/// "http://tempuri.org/":SetRTXJSONResponse is a complexType.
class _ns1__SetRTXJSONResponse
{ public:
/// Element SetRTXJSONResult of type xs:string.
    std::string*                         SetRTXJSONResult               0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetSMSJSON

/// "http://tempuri.org/":SetSMSJSON is a complexType.
class _ns1__SetSMSJSON
{ public:
/// Element infoJson of type xs:string.
    std::string*                         infoJson                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetSMSJSONResponse

/// "http://tempuri.org/":SetSMSJSONResponse is a complexType.
class _ns1__SetSMSJSONResponse
{ public:
/// Element SetSMSJSONResult of type xs:string.
    std::string*                         SetSMSJSONResult               0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetEmailJSON

/// "http://tempuri.org/":SetEmailJSON is a complexType.
class _ns1__SetEmailJSON
{ public:
/// Element infoJson of type xs:string.
    std::string*                         infoJson                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetEmailJSONResponse

/// "http://tempuri.org/":SetEmailJSONResponse is a complexType.
class _ns1__SetEmailJSONResponse
{ public:
/// Element SetEmailJSONResult of type xs:string.
    std::string*                         SetEmailJSONResult             0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetSMSInfoC

/// "http://tempuri.org/":SetSMSInfoC is a complexType.
class _ns1__SetSMSInfoC
{ public:
/// Element fromSys of type xs:string.
    std::string*                         fromSys                       ;// 0;	///< Nullable pointer.
/// Element target of type xs:string.
    std::string*                         target                        ;// 0;	///< Nullable pointer.
/// Element msTitle of type xs:string.
    std::string*                         msTitle                       ;// 0;	///< Nullable pointer.
/// Element msContent of type xs:string.
    std::string*                         msContent                     ;// 0;	///< Nullable pointer.
/// Element targetTime of type xs:string.
    std::string*                         targetTime                    ;// 0;	///< Nullable pointer.
/// Element priority of type xs:string.
    std::string*                         priority                      ;// 0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetSMSInfoCResponse

/// "http://tempuri.org/":SetSMSInfoCResponse is a complexType.
class _ns1__SetSMSInfoCResponse
{ public:
/// Element SetSMSInfoCResult of type xs:string.
    std::string*                         SetSMSInfoCResult              ;//0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXInfoC

/// "http://tempuri.org/":SetRTXInfoC is a complexType.
class _ns1__SetRTXInfoC
{ public:
/// Element fromSys of type xs:string.
    std::string*                         fromSys                      ;//  0;	///< Nullable pointer.
/// Element target of type xs:string.
    std::string*                         target                       ;//  0;	///< Nullable pointer.
/// Element msTitle of type xs:string.
    std::string*                         msTitle                       ;// 0;	///< Nullable pointer.
/// Element msContent of type xs:string.
    std::string*                         msContent                     ;// 0;	///< Nullable pointer.
/// Element targetTime of type xs:string.
    std::string*                         targetTime                    ;// 0;	///< Nullable pointer.
/// Element priority of type xs:string.
    std::string*                         priority                      ;// 0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXInfoCResponse

/// "http://tempuri.org/":SetRTXInfoCResponse is a complexType.
class _ns1__SetRTXInfoCResponse
{ public:
/// Element SetRTXInfoCResult of type xs:string.
    std::string*                         SetRTXInfoCResult            ;//  0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetEmailInfoC

/// "http://tempuri.org/":SetEmailInfoC is a complexType.
class _ns1__SetEmailInfoC
{ public:
/// Element fromSys of type xs:string.
    std::string*                         fromSys                        0;	///< Nullable pointer.
/// Element target of type xs:string.
    std::string*                         target                         0;	///< Nullable pointer.
/// Element msTitle of type xs:string.
    std::string*                         msTitle                        0;	///< Nullable pointer.
/// Element msContent of type xs:string.
    std::string*                         msContent                      0;	///< Nullable pointer.
/// Element targetTime of type xs:string.
    std::string*                         targetTime                     0;	///< Nullable pointer.
/// Element priority of type xs:string.
    std::string*                         priority                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetEmailInfoCResponse

/// "http://tempuri.org/":SetEmailInfoCResponse is a complexType.
class _ns1__SetEmailInfoCResponse
{ public:
/// Element SetEmailInfoCResult of type xs:string.
    std::string*                         SetEmailInfoCResult            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetMMSInfoC

/// "http://tempuri.org/":SetMMSInfoC is a complexType.
class _ns1__SetMMSInfoC
{ public:
/// Element fromSys of type xs:string.
    std::string*                         fromSys                        0;	///< Nullable pointer.
/// Element target of type xs:string.
    std::string*                         target                         0;	///< Nullable pointer.
/// Element msTitle of type xs:string.
    std::string*                         msTitle                        0;	///< Nullable pointer.
/// Element msContent of type xs:string.
    std::string*                         msContent                      0;	///< Nullable pointer.
/// Element targetTime of type xs:string.
    std::string*                         targetTime                     0;	///< Nullable pointer.
/// Element priority of type xs:string.
    std::string*                         priority                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetMMSInfoCResponse

/// "http://tempuri.org/":SetMMSInfoCResponse is a complexType.
class _ns1__SetMMSInfoCResponse
{ public:
/// Element SetMMSInfoCResult of type xs:string.
    std::string*                         SetMMSInfoCResult              0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXNotifyC

/// "http://tempuri.org/":SetRTXNotifyC is a complexType.
class _ns1__SetRTXNotifyC
{ public:
/// Element fromSys of type xs:string.
    std::string*                         fromSys                        0;	///< Nullable pointer.
/// Element target of type xs:string.
    std::string*                         target                         0;	///< Nullable pointer.
/// Element msTitle of type xs:string.
    std::string*                         msTitle                        0;	///< Nullable pointer.
/// Element msContent of type xs:string.
    std::string*                         msContent                      0;	///< Nullable pointer.
/// Element targetTime of type xs:string.
    std::string*                         targetTime                     0;	///< Nullable pointer.
/// Element priority of type xs:string.
    std::string*                         priority                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetRTXNotifyCResponse

/// "http://tempuri.org/":SetRTXNotifyCResponse is a complexType.
class _ns1__SetRTXNotifyCResponse
{ public:
/// Element SetRTXNotifyCResult of type xs:string.
    std::string*                         SetRTXNotifyCResult            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS         *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS":QueryWandaMsg is a complexType.
class ns4__QueryWandaMsg : public xsd__anyType
{ public:
/// Element fromSys of type xs:string.
    std::string*                         fromSys                        0;	///< Nullable pointer.
/// Element msContent of type xs:string.
    std::string*                         msContent                      0;	///< Nullable pointer.
/// Element msTitle of type xs:string.
    std::string*                         msTitle                        0;	///< Nullable pointer.
/// Element priority of type xs:string.
    std::string*                         priority                       0;	///< Nullable pointer.
/// Element target of type xs:string.
    std::string*                         target                         0;	///< Nullable pointer.
/// Element targetTime of type xs:string.
    std::string*                         targetTime                     0;	///< Nullable pointer.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of type xs:anyType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of type xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of type xs:base64Binary.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of type xs:boolean.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of type xs:byte.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of type xs:dateTime.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of type xs:decimal.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of type xs:double.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of type xs:float.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of type xs:int.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of type xs:long.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of type xs:QName.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of type xs:short.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of type xs:unsignedByte.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of type xs:unsignedInt.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of type xs:unsignedLong.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of type xs:unsignedShort.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of type "http://schemas.microsoft.com/2003/10/Serialization/":char.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS         *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS":QueryWandaMsg of type "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS":QueryWandaMsg.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	BasicHttpBinding_USCOREIWandaMsg 
//gsoap ns1  service type:	IWandaMsg 
//gsoap ns1  service port:	http://10.199.82.184:20001/WandaMsgService.svc 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WandaMsg Definitions

@section WandaMsg_bindings Service Bindings

  - @ref BasicHttpBinding_USCOREIWandaMsg

@section WandaMsg_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BasicHttpBinding_USCOREIWandaMsg Binding "BasicHttpBinding_USCOREIWandaMsg"

@section BasicHttpBinding_USCOREIWandaMsg_operations Operations of Binding  "BasicHttpBinding_USCOREIWandaMsg"

  - @ref __ns1__SetRTXInfo

  - @ref __ns1__SetSMSInfo

  - @ref __ns1__SetEmailInfo

  - @ref __ns1__SetMMSInfo

  - @ref __ns1__SetRTXNotify

  - @ref __ns1__SetRTXJSON

  - @ref __ns1__SetSMSJSON

  - @ref __ns1__SetEmailJSON

  - @ref __ns1__SetSMSInfoC

  - @ref __ns1__SetRTXInfoC

  - @ref __ns1__SetEmailInfoC

  - @ref __ns1__SetMMSInfoC

  - @ref __ns1__SetRTXNotifyC

@section BasicHttpBinding_USCOREIWandaMsg_ports Endpoints of Binding  "BasicHttpBinding_USCOREIWandaMsg"

  - http://10.199.82.184:20001/WandaMsgService.svc

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BasicHttpBinding_USCOREIWandaMsg                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetRTXInfo                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetRTXInfo" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetRTXInfo"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetRTXInfo"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetRTXInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetRTXInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetRTXInfo*                   ns1__SetRTXInfo,
    // response parameters:
    _ns1__SetRTXInfoResponse*           ns1__SetRTXInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetRTXInfo(
    struct soap *soap,
    // request parameters:
    _ns1__SetRTXInfo*                   ns1__SetRTXInfo,
    // response parameters:
    _ns1__SetRTXInfoResponse*           ns1__SetRTXInfoResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetRTXInfo document
//gsoap ns1  service method-encoding:	SetRTXInfo literal
//gsoap ns1  service method-action:	SetRTXInfo http://tempuri.org/IWandaMsg/SetRTXInfo
//gsoap ns1  service method-output-action:	SetRTXInfo http://tempuri.org//IWandaMsg/SetRTXInfoResponse
int __ns1__SetRTXInfo(
    _ns1__SetRTXInfo*                   ns1__SetRTXInfo,	///< Request parameter
    _ns1__SetRTXInfoResponse*           ns1__SetRTXInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetSMSInfo                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetSMSInfo" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetSMSInfo"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetSMSInfo"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetSMSInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetSMSInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetSMSInfo*                   ns1__SetSMSInfo,
    // response parameters:
    _ns1__SetSMSInfoResponse*           ns1__SetSMSInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetSMSInfo(
    struct soap *soap,
    // request parameters:
    _ns1__SetSMSInfo*                   ns1__SetSMSInfo,
    // response parameters:
    _ns1__SetSMSInfoResponse*           ns1__SetSMSInfoResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetSMSInfo document
//gsoap ns1  service method-encoding:	SetSMSInfo literal
//gsoap ns1  service method-action:	SetSMSInfo http://tempuri.org/IWandaMsg/SetSMSInfo
//gsoap ns1  service method-output-action:	SetSMSInfo http://tempuri.org//IWandaMsg/SetSMSInfoResponse
int __ns1__SetSMSInfo(
    _ns1__SetSMSInfo*                   ns1__SetSMSInfo,	///< Request parameter
    _ns1__SetSMSInfoResponse*           ns1__SetSMSInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetEmailInfo                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetEmailInfo" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetEmailInfo"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetEmailInfo"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetEmailInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetEmailInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetEmailInfo*                 ns1__SetEmailInfo,
    // response parameters:
    _ns1__SetEmailInfoResponse*         ns1__SetEmailInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetEmailInfo(
    struct soap *soap,
    // request parameters:
    _ns1__SetEmailInfo*                 ns1__SetEmailInfo,
    // response parameters:
    _ns1__SetEmailInfoResponse*         ns1__SetEmailInfoResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetEmailInfo document
//gsoap ns1  service method-encoding:	SetEmailInfo literal
//gsoap ns1  service method-action:	SetEmailInfo http://tempuri.org/IWandaMsg/SetEmailInfo
//gsoap ns1  service method-output-action:	SetEmailInfo http://tempuri.org//IWandaMsg/SetEmailInfoResponse
int __ns1__SetEmailInfo(
    _ns1__SetEmailInfo*                 ns1__SetEmailInfo,	///< Request parameter
    _ns1__SetEmailInfoResponse*         ns1__SetEmailInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetMMSInfo                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetMMSInfo" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetMMSInfo"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetMMSInfo"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetMMSInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetMMSInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetMMSInfo*                   ns1__SetMMSInfo,
    // response parameters:
    _ns1__SetMMSInfoResponse*           ns1__SetMMSInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetMMSInfo(
    struct soap *soap,
    // request parameters:
    _ns1__SetMMSInfo*                   ns1__SetMMSInfo,
    // response parameters:
    _ns1__SetMMSInfoResponse*           ns1__SetMMSInfoResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetMMSInfo document
//gsoap ns1  service method-encoding:	SetMMSInfo literal
//gsoap ns1  service method-action:	SetMMSInfo http://tempuri.org/IWandaMsg/SetMMSInfo
//gsoap ns1  service method-output-action:	SetMMSInfo http://tempuri.org//IWandaMsg/SetMMSInfoResponse
int __ns1__SetMMSInfo(
    _ns1__SetMMSInfo*                   ns1__SetMMSInfo,	///< Request parameter
    _ns1__SetMMSInfoResponse*           ns1__SetMMSInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetRTXNotify                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetRTXNotify" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetRTXNotify"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetRTXNotify"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetRTXNotifyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetRTXNotify(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetRTXNotify*                 ns1__SetRTXNotify,
    // response parameters:
    _ns1__SetRTXNotifyResponse*         ns1__SetRTXNotifyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetRTXNotify(
    struct soap *soap,
    // request parameters:
    _ns1__SetRTXNotify*                 ns1__SetRTXNotify,
    // response parameters:
    _ns1__SetRTXNotifyResponse*         ns1__SetRTXNotifyResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetRTXNotify document
//gsoap ns1  service method-encoding:	SetRTXNotify literal
//gsoap ns1  service method-action:	SetRTXNotify http://tempuri.org/IWandaMsg/SetRTXNotify
//gsoap ns1  service method-output-action:	SetRTXNotify http://tempuri.org//IWandaMsg/SetRTXNotifyResponse
int __ns1__SetRTXNotify(
    _ns1__SetRTXNotify*                 ns1__SetRTXNotify,	///< Request parameter
    _ns1__SetRTXNotifyResponse*         ns1__SetRTXNotifyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetRTXJSON                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetRTXJSON" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetRTXJSON"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetRTXJSON"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetRTXJSONResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetRTXJSON(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetRTXJSON*                   ns1__SetRTXJSON,
    // response parameters:
    _ns1__SetRTXJSONResponse*           ns1__SetRTXJSONResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetRTXJSON(
    struct soap *soap,
    // request parameters:
    _ns1__SetRTXJSON*                   ns1__SetRTXJSON,
    // response parameters:
    _ns1__SetRTXJSONResponse*           ns1__SetRTXJSONResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetRTXJSON document
//gsoap ns1  service method-encoding:	SetRTXJSON literal
//gsoap ns1  service method-action:	SetRTXJSON http://tempuri.org/IWandaMsg/SetRTXJSON
//gsoap ns1  service method-output-action:	SetRTXJSON http://tempuri.org//IWandaMsg/SetRTXJSONResponse
int __ns1__SetRTXJSON(
    _ns1__SetRTXJSON*                   ns1__SetRTXJSON,	///< Request parameter
    _ns1__SetRTXJSONResponse*           ns1__SetRTXJSONResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetSMSJSON                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetSMSJSON" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetSMSJSON"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetSMSJSON"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetSMSJSONResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetSMSJSON(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetSMSJSON*                   ns1__SetSMSJSON,
    // response parameters:
    _ns1__SetSMSJSONResponse*           ns1__SetSMSJSONResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetSMSJSON(
    struct soap *soap,
    // request parameters:
    _ns1__SetSMSJSON*                   ns1__SetSMSJSON,
    // response parameters:
    _ns1__SetSMSJSONResponse*           ns1__SetSMSJSONResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetSMSJSON document
//gsoap ns1  service method-encoding:	SetSMSJSON literal
//gsoap ns1  service method-action:	SetSMSJSON http://tempuri.org/IWandaMsg/SetSMSJSON
//gsoap ns1  service method-output-action:	SetSMSJSON http://tempuri.org//IWandaMsg/SetSMSJSONResponse
int __ns1__SetSMSJSON(
    _ns1__SetSMSJSON*                   ns1__SetSMSJSON,	///< Request parameter
    _ns1__SetSMSJSONResponse*           ns1__SetSMSJSONResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetEmailJSON                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetEmailJSON" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetEmailJSON"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetEmailJSON"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetEmailJSONResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetEmailJSON(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetEmailJSON*                 ns1__SetEmailJSON,
    // response parameters:
    _ns1__SetEmailJSONResponse*         ns1__SetEmailJSONResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetEmailJSON(
    struct soap *soap,
    // request parameters:
    _ns1__SetEmailJSON*                 ns1__SetEmailJSON,
    // response parameters:
    _ns1__SetEmailJSONResponse*         ns1__SetEmailJSONResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetEmailJSON document
//gsoap ns1  service method-encoding:	SetEmailJSON literal
//gsoap ns1  service method-action:	SetEmailJSON http://tempuri.org/IWandaMsg/SetEmailJSON
//gsoap ns1  service method-output-action:	SetEmailJSON http://tempuri.org//IWandaMsg/SetEmailJSONResponse
int __ns1__SetEmailJSON(
    _ns1__SetEmailJSON*                 ns1__SetEmailJSON,	///< Request parameter
    _ns1__SetEmailJSONResponse*         ns1__SetEmailJSONResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetSMSInfoC                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetSMSInfoC" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetSMSInfoC"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetSMSInfoC"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetSMSInfoCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetSMSInfoC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetSMSInfoC*                  ns1__SetSMSInfoC,
    // response parameters:
    _ns1__SetSMSInfoCResponse*          ns1__SetSMSInfoCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetSMSInfoC(
    struct soap *soap,
    // request parameters:
    _ns1__SetSMSInfoC*                  ns1__SetSMSInfoC,
    // response parameters:
    _ns1__SetSMSInfoCResponse*          ns1__SetSMSInfoCResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetSMSInfoC document
//gsoap ns1  service method-encoding:	SetSMSInfoC literal
//gsoap ns1  service method-action:	SetSMSInfoC http://tempuri.org/IWandaMsg/SetSMSInfoC
//gsoap ns1  service method-output-action:	SetSMSInfoC http://tempuri.org//IWandaMsg/SetSMSInfoCResponse
int __ns1__SetSMSInfoC(
    _ns1__SetSMSInfoC*                  ns1__SetSMSInfoC,	///< Request parameter
    _ns1__SetSMSInfoCResponse*          ns1__SetSMSInfoCResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetRTXInfoC                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetRTXInfoC" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetRTXInfoC"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetRTXInfoC"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetRTXInfoCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetRTXInfoC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetRTXInfoC*                  ns1__SetRTXInfoC,
    // response parameters:
    _ns1__SetRTXInfoCResponse*          ns1__SetRTXInfoCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetRTXInfoC(
    struct soap *soap,
    // request parameters:
    _ns1__SetRTXInfoC*                  ns1__SetRTXInfoC,
    // response parameters:
    _ns1__SetRTXInfoCResponse*          ns1__SetRTXInfoCResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetRTXInfoC document
//gsoap ns1  service method-encoding:	SetRTXInfoC literal
//gsoap ns1  service method-action:	SetRTXInfoC http://tempuri.org/IWandaMsg/SetRTXInfoC
//gsoap ns1  service method-output-action:	SetRTXInfoC http://tempuri.org//IWandaMsg/SetRTXInfoCResponse
int __ns1__SetRTXInfoC(
    _ns1__SetRTXInfoC*                  ns1__SetRTXInfoC,	///< Request parameter
    _ns1__SetRTXInfoCResponse*          ns1__SetRTXInfoCResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetEmailInfoC                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetEmailInfoC" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetEmailInfoC"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetEmailInfoC"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetEmailInfoCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetEmailInfoC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetEmailInfoC*                ns1__SetEmailInfoC,
    // response parameters:
    _ns1__SetEmailInfoCResponse*        ns1__SetEmailInfoCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetEmailInfoC(
    struct soap *soap,
    // request parameters:
    _ns1__SetEmailInfoC*                ns1__SetEmailInfoC,
    // response parameters:
    _ns1__SetEmailInfoCResponse*        ns1__SetEmailInfoCResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetEmailInfoC document
//gsoap ns1  service method-encoding:	SetEmailInfoC literal
//gsoap ns1  service method-action:	SetEmailInfoC http://tempuri.org/IWandaMsg/SetEmailInfoC
//gsoap ns1  service method-output-action:	SetEmailInfoC http://tempuri.org//IWandaMsg/SetEmailInfoCResponse
int __ns1__SetEmailInfoC(
    _ns1__SetEmailInfoC*                ns1__SetEmailInfoC,	///< Request parameter
    _ns1__SetEmailInfoCResponse*        ns1__SetEmailInfoCResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetMMSInfoC                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetMMSInfoC" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetMMSInfoC"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetMMSInfoC"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetMMSInfoCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetMMSInfoC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetMMSInfoC*                  ns1__SetMMSInfoC,
    // response parameters:
    _ns1__SetMMSInfoCResponse*          ns1__SetMMSInfoCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetMMSInfoC(
    struct soap *soap,
    // request parameters:
    _ns1__SetMMSInfoC*                  ns1__SetMMSInfoC,
    // response parameters:
    _ns1__SetMMSInfoCResponse*          ns1__SetMMSInfoCResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetMMSInfoC document
//gsoap ns1  service method-encoding:	SetMMSInfoC literal
//gsoap ns1  service method-action:	SetMMSInfoC http://tempuri.org/IWandaMsg/SetMMSInfoC
//gsoap ns1  service method-output-action:	SetMMSInfoC http://tempuri.org//IWandaMsg/SetMMSInfoCResponse
int __ns1__SetMMSInfoC(
    _ns1__SetMMSInfoC*                  ns1__SetMMSInfoC,	///< Request parameter
    _ns1__SetMMSInfoCResponse*          ns1__SetMMSInfoCResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetRTXNotifyC                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetRTXNotifyC" of service binding "BasicHttpBinding_USCOREIWandaMsg"

/**

Operation details:


  - SOAP document/literal style messaging

  - SOAP action: "http://tempuri.org/IWandaMsg/SetRTXNotifyC"

  - Addressing action: "http://tempuri.org//IWandaMsg/SetRTXNotifyC"

  - Addressing response action: "http://tempuri.org//IWandaMsg/SetRTXNotifyCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetRTXNotifyC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetRTXNotifyC*                ns1__SetRTXNotifyC,
    // response parameters:
    _ns1__SetRTXNotifyCResponse*        ns1__SetRTXNotifyCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetRTXNotifyC(
    struct soap *soap,
    // request parameters:
    _ns1__SetRTXNotifyC*                ns1__SetRTXNotifyC,
    // response parameters:
    _ns1__SetRTXNotifyCResponse*        ns1__SetRTXNotifyCResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIWandaMsgProxy.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIWandaMsgService.h):
@code
  class BasicHttpBinding_USCOREIWandaMsgService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetRTXNotifyC document
//gsoap ns1  service method-encoding:	SetRTXNotifyC literal
//gsoap ns1  service method-action:	SetRTXNotifyC http://tempuri.org/IWandaMsg/SetRTXNotifyC
//gsoap ns1  service method-output-action:	SetRTXNotifyC http://tempuri.org//IWandaMsg/SetRTXNotifyCResponse
int __ns1__SetRTXNotifyC(
    _ns1__SetRTXNotifyC*                ns1__SetRTXNotifyC,	///< Request parameter
    _ns1__SetRTXNotifyCResponse*        ns1__SetRTXNotifyCResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema "http://tempuri.org/Imports"

@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:SetRTXInfo> @ref _ns1__SetRTXInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXInfo(struct soap*, _ns1__SetRTXInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXInfo(struct soap*, _ns1__SetRTXInfo*);
    @endcode

  - <ns1:SetRTXInfoResponse> @ref _ns1__SetRTXInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXInfoResponse(struct soap*, _ns1__SetRTXInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXInfoResponse(struct soap*, _ns1__SetRTXInfoResponse*);
    @endcode

  - <ns1:SetSMSInfo> @ref _ns1__SetSMSInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetSMSInfo(struct soap*, _ns1__SetSMSInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetSMSInfo(struct soap*, _ns1__SetSMSInfo*);
    @endcode

  - <ns1:SetSMSInfoResponse> @ref _ns1__SetSMSInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetSMSInfoResponse(struct soap*, _ns1__SetSMSInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetSMSInfoResponse(struct soap*, _ns1__SetSMSInfoResponse*);
    @endcode

  - <ns1:SetEmailInfo> @ref _ns1__SetEmailInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetEmailInfo(struct soap*, _ns1__SetEmailInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetEmailInfo(struct soap*, _ns1__SetEmailInfo*);
    @endcode

  - <ns1:SetEmailInfoResponse> @ref _ns1__SetEmailInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetEmailInfoResponse(struct soap*, _ns1__SetEmailInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetEmailInfoResponse(struct soap*, _ns1__SetEmailInfoResponse*);
    @endcode

  - <ns1:SetMMSInfo> @ref _ns1__SetMMSInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetMMSInfo(struct soap*, _ns1__SetMMSInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetMMSInfo(struct soap*, _ns1__SetMMSInfo*);
    @endcode

  - <ns1:SetMMSInfoResponse> @ref _ns1__SetMMSInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetMMSInfoResponse(struct soap*, _ns1__SetMMSInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetMMSInfoResponse(struct soap*, _ns1__SetMMSInfoResponse*);
    @endcode

  - <ns1:SetRTXNotify> @ref _ns1__SetRTXNotify
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXNotify(struct soap*, _ns1__SetRTXNotify*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXNotify(struct soap*, _ns1__SetRTXNotify*);
    @endcode

  - <ns1:SetRTXNotifyResponse> @ref _ns1__SetRTXNotifyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXNotifyResponse(struct soap*, _ns1__SetRTXNotifyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXNotifyResponse(struct soap*, _ns1__SetRTXNotifyResponse*);
    @endcode

  - <ns1:SetRTXJSON> @ref _ns1__SetRTXJSON
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXJSON(struct soap*, _ns1__SetRTXJSON*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXJSON(struct soap*, _ns1__SetRTXJSON*);
    @endcode

  - <ns1:SetRTXJSONResponse> @ref _ns1__SetRTXJSONResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXJSONResponse(struct soap*, _ns1__SetRTXJSONResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXJSONResponse(struct soap*, _ns1__SetRTXJSONResponse*);
    @endcode

  - <ns1:SetSMSJSON> @ref _ns1__SetSMSJSON
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetSMSJSON(struct soap*, _ns1__SetSMSJSON*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetSMSJSON(struct soap*, _ns1__SetSMSJSON*);
    @endcode

  - <ns1:SetSMSJSONResponse> @ref _ns1__SetSMSJSONResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetSMSJSONResponse(struct soap*, _ns1__SetSMSJSONResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetSMSJSONResponse(struct soap*, _ns1__SetSMSJSONResponse*);
    @endcode

  - <ns1:SetEmailJSON> @ref _ns1__SetEmailJSON
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetEmailJSON(struct soap*, _ns1__SetEmailJSON*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetEmailJSON(struct soap*, _ns1__SetEmailJSON*);
    @endcode

  - <ns1:SetEmailJSONResponse> @ref _ns1__SetEmailJSONResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetEmailJSONResponse(struct soap*, _ns1__SetEmailJSONResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetEmailJSONResponse(struct soap*, _ns1__SetEmailJSONResponse*);
    @endcode

  - <ns1:SetSMSInfoC> @ref _ns1__SetSMSInfoC
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetSMSInfoC(struct soap*, _ns1__SetSMSInfoC*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetSMSInfoC(struct soap*, _ns1__SetSMSInfoC*);
    @endcode

  - <ns1:SetSMSInfoCResponse> @ref _ns1__SetSMSInfoCResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetSMSInfoCResponse(struct soap*, _ns1__SetSMSInfoCResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetSMSInfoCResponse(struct soap*, _ns1__SetSMSInfoCResponse*);
    @endcode

  - <ns1:SetRTXInfoC> @ref _ns1__SetRTXInfoC
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXInfoC(struct soap*, _ns1__SetRTXInfoC*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXInfoC(struct soap*, _ns1__SetRTXInfoC*);
    @endcode

  - <ns1:SetRTXInfoCResponse> @ref _ns1__SetRTXInfoCResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXInfoCResponse(struct soap*, _ns1__SetRTXInfoCResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXInfoCResponse(struct soap*, _ns1__SetRTXInfoCResponse*);
    @endcode

  - <ns1:SetEmailInfoC> @ref _ns1__SetEmailInfoC
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetEmailInfoC(struct soap*, _ns1__SetEmailInfoC*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetEmailInfoC(struct soap*, _ns1__SetEmailInfoC*);
    @endcode

  - <ns1:SetEmailInfoCResponse> @ref _ns1__SetEmailInfoCResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetEmailInfoCResponse(struct soap*, _ns1__SetEmailInfoCResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetEmailInfoCResponse(struct soap*, _ns1__SetEmailInfoCResponse*);
    @endcode

  - <ns1:SetMMSInfoC> @ref _ns1__SetMMSInfoC
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetMMSInfoC(struct soap*, _ns1__SetMMSInfoC*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetMMSInfoC(struct soap*, _ns1__SetMMSInfoC*);
    @endcode

  - <ns1:SetMMSInfoCResponse> @ref _ns1__SetMMSInfoCResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetMMSInfoCResponse(struct soap*, _ns1__SetMMSInfoCResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetMMSInfoCResponse(struct soap*, _ns1__SetMMSInfoCResponse*);
    @endcode

  - <ns1:SetRTXNotifyC> @ref _ns1__SetRTXNotifyC
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXNotifyC(struct soap*, _ns1__SetRTXNotifyC*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXNotifyC(struct soap*, _ns1__SetRTXNotifyC*);
    @endcode

  - <ns1:SetRTXNotifyCResponse> @ref _ns1__SetRTXNotifyCResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetRTXNotifyCResponse(struct soap*, _ns1__SetRTXNotifyCResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetRTXNotifyCResponse(struct soap*, _ns1__SetRTXNotifyCResponse*);
    @endcode

@section ns3 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <ns3:anyType> (use wsdl2h option -g to auto-generate)

  - <ns3:anyURI> (use wsdl2h option -g to auto-generate)

  - <ns3:base64Binary> (use wsdl2h option -g to auto-generate)

  - <ns3:boolean> (use wsdl2h option -g to auto-generate)

  - <ns3:byte> (use wsdl2h option -g to auto-generate)

  - <ns3:dateTime> (use wsdl2h option -g to auto-generate)

  - <ns3:decimal> (use wsdl2h option -g to auto-generate)

  - <ns3:double> (use wsdl2h option -g to auto-generate)

  - <ns3:float> (use wsdl2h option -g to auto-generate)

  - <ns3:int> (use wsdl2h option -g to auto-generate)

  - <ns3:long> (use wsdl2h option -g to auto-generate)

  - <ns3:QName> (use wsdl2h option -g to auto-generate)

  - <ns3:short> (use wsdl2h option -g to auto-generate)

  - <ns3:string> (use wsdl2h option -g to auto-generate)

  - <ns3:unsignedByte> (use wsdl2h option -g to auto-generate)

  - <ns3:unsignedInt> (use wsdl2h option -g to auto-generate)

  - <ns3:unsignedLong> (use wsdl2h option -g to auto-generate)

  - <ns3:unsignedShort> (use wsdl2h option -g to auto-generate)

  - <ns3:char> (use wsdl2h option -g to auto-generate)

  - <ns3:duration> (use wsdl2h option -g to auto-generate)

  - <ns3:guid> (use wsdl2h option -g to auto-generate)

@section ns4 Top-level root elements of schema "http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS"

  - <ns4:QueryWandaMsg> (use wsdl2h option -g to auto-generate)

*/

/* End of WandaMsg.h */
