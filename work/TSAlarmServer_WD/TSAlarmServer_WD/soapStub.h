/* soapStub.h
   Generated by gSOAP 2.8.4 from WandaMsg.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/Imports"
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
#define SOAP_NAMESPACE_OF_ns4	"http://schemas.datacontract.org/2004/07/NTS.WEB.DataContact.EMCS"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (15)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__ID_
#define SOAP_TYPE_xsd__ID_ (12)
/* Primitive xsd:ID schema type: */
class SOAP_CMAC xsd__ID_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_xsd__ID_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ID_() { xsd__ID_::soap_default(NULL); }
	virtual ~xsd__ID_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__IDREF_
#define SOAP_TYPE_xsd__IDREF_ (14)
/* Primitive xsd:IDREF schema type: */
class SOAP_CMAC xsd__IDREF_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_xsd__IDREF_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__IDREF_() { xsd__IDREF_::soap_default(NULL); }
	virtual ~xsd__IDREF_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__QName_
#define SOAP_TYPE_xsd__QName_ (16)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_xsd__QName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName_() { xsd__QName_::soap_default(NULL); }
	virtual ~xsd__QName_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (18)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_() { xsd__anyURI_::soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (19)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (23)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (24)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__byte_
#define SOAP_TYPE_xsd__byte_ (27)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte_ : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_xsd__byte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte_() { xsd__byte_::soap_default(NULL); }
	virtual ~xsd__byte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (28)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__decimal_
#define SOAP_TYPE_xsd__decimal_ (31)
/* Primitive xsd:decimal schema type: */
class SOAP_CMAC xsd__decimal_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_xsd__decimal_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__decimal_() { xsd__decimal_::soap_default(NULL); }
	virtual ~xsd__decimal_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (32)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() { xsd__double::soap_default(NULL); }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (35)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_() { xsd__duration_::soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (36)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (38)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (39)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() { xsd__long::soap_default(NULL); }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_xsd__short
#define SOAP_TYPE_xsd__short (41)
/* Primitive xsd:short schema type: */
class SOAP_CMAC xsd__short : public xsd__anyType
{
public:
	short __item;
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_xsd__short */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__short() { xsd__short::soap_default(NULL); }
	virtual ~xsd__short() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (43)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_
#define SOAP_TYPE_xsd__unsignedByte_ (45)
/* Primitive xsd:unsignedByte schema type: */
class SOAP_CMAC xsd__unsignedByte_ : public xsd__anyType
{
public:
	unsigned char __item;
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_xsd__unsignedByte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedByte_() { xsd__unsignedByte_::soap_default(NULL); }
	virtual ~xsd__unsignedByte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (46)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() { xsd__unsignedInt::soap_default(NULL); }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (47)
/* Primitive xsd:unsignedLong schema type: */
class SOAP_CMAC xsd__unsignedLong : public xsd__anyType
{
public:
	ULONG64 __item;
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_xsd__unsignedLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedLong() { xsd__unsignedLong::soap_default(NULL); }
	virtual ~xsd__unsignedLong() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort
#define SOAP_TYPE_xsd__unsignedShort (49)
/* Primitive xsd:unsignedShort schema type: */
class SOAP_CMAC xsd__unsignedShort : public xsd__anyType
{
public:
	unsigned short __item;
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_xsd__unsignedShort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedShort() { xsd__unsignedShort::soap_default(NULL); }
	virtual ~xsd__unsignedShort() { }
};
#endif

#ifndef SOAP_TYPE_ns3__char__
#define SOAP_TYPE_ns3__char__ (79)
/* Primitive ns3:char schema type: */
class SOAP_CMAC ns3__char__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns3__char__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__char__() { ns3__char__::soap_default(NULL); }
	virtual ~ns3__char__() { }
};
#endif

#ifndef SOAP_TYPE_ns3__duration__
#define SOAP_TYPE_ns3__duration__ (81)
/* Primitive ns3:duration schema type: */
class SOAP_CMAC ns3__duration__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ns3__duration__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__duration__() { ns3__duration__::soap_default(NULL); }
	virtual ~ns3__duration__() { }
};
#endif

#ifndef SOAP_TYPE_ns3__guid__
#define SOAP_TYPE_ns3__guid__ (83)
/* Primitive ns3:guid schema type: */
class SOAP_CMAC ns3__guid__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ns3__guid__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__guid__() { ns3__guid__::soap_default(NULL); }
	virtual ~ns3__guid__() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXInfo
#define SOAP_TYPE__ns1__SetRTXInfo (51)
/* ns1:SetRTXInfo */
class SOAP_CMAC _ns1__SetRTXInfo
{
public:
	class ns4__QueryWandaMsg *query;	/* optional element of type ns4:QueryWandaMsg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE__ns1__SetRTXInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXInfo() { _ns1__SetRTXInfo::soap_default(NULL); }
	virtual ~_ns1__SetRTXInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXInfoResponse
#define SOAP_TYPE__ns1__SetRTXInfoResponse (52)
/* ns1:SetRTXInfoResponse */
class SOAP_CMAC _ns1__SetRTXInfoResponse
{
public:
	std::string *SetRTXInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__ns1__SetRTXInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXInfoResponse() { _ns1__SetRTXInfoResponse::soap_default(NULL); }
	virtual ~_ns1__SetRTXInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetSMSInfo
#define SOAP_TYPE__ns1__SetSMSInfo (53)
/* ns1:SetSMSInfo */
class SOAP_CMAC _ns1__SetSMSInfo
{
public:
	ns4__QueryWandaMsg *query;	/* optional element of type ns4:QueryWandaMsg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__ns1__SetSMSInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetSMSInfo() { _ns1__SetSMSInfo::soap_default(NULL); }
	virtual ~_ns1__SetSMSInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetSMSInfoResponse
#define SOAP_TYPE__ns1__SetSMSInfoResponse (54)
/* ns1:SetSMSInfoResponse */
class SOAP_CMAC _ns1__SetSMSInfoResponse
{
public:
	std::string *SetSMSInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__ns1__SetSMSInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetSMSInfoResponse() { _ns1__SetSMSInfoResponse::soap_default(NULL); }
	virtual ~_ns1__SetSMSInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetEmailInfo
#define SOAP_TYPE__ns1__SetEmailInfo (55)
/* ns1:SetEmailInfo */
class SOAP_CMAC _ns1__SetEmailInfo
{
public:
	ns4__QueryWandaMsg *query;	/* optional element of type ns4:QueryWandaMsg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE__ns1__SetEmailInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetEmailInfo() { _ns1__SetEmailInfo::soap_default(NULL); }
	virtual ~_ns1__SetEmailInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetEmailInfoResponse
#define SOAP_TYPE__ns1__SetEmailInfoResponse (56)
/* ns1:SetEmailInfoResponse */
class SOAP_CMAC _ns1__SetEmailInfoResponse
{
public:
	std::string *SetEmailInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE__ns1__SetEmailInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetEmailInfoResponse() { _ns1__SetEmailInfoResponse::soap_default(NULL); }
	virtual ~_ns1__SetEmailInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetMMSInfo
#define SOAP_TYPE__ns1__SetMMSInfo (57)
/* ns1:SetMMSInfo */
class SOAP_CMAC _ns1__SetMMSInfo
{
public:
	ns4__QueryWandaMsg *query;	/* optional element of type ns4:QueryWandaMsg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE__ns1__SetMMSInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetMMSInfo() { _ns1__SetMMSInfo::soap_default(NULL); }
	virtual ~_ns1__SetMMSInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetMMSInfoResponse
#define SOAP_TYPE__ns1__SetMMSInfoResponse (58)
/* ns1:SetMMSInfoResponse */
class SOAP_CMAC _ns1__SetMMSInfoResponse
{
public:
	std::string *SetMMSInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE__ns1__SetMMSInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetMMSInfoResponse() { _ns1__SetMMSInfoResponse::soap_default(NULL); }
	virtual ~_ns1__SetMMSInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXNotify
#define SOAP_TYPE__ns1__SetRTXNotify (59)
/* ns1:SetRTXNotify */
class SOAP_CMAC _ns1__SetRTXNotify
{
public:
	ns4__QueryWandaMsg *query;	/* optional element of type ns4:QueryWandaMsg */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE__ns1__SetRTXNotify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXNotify() { _ns1__SetRTXNotify::soap_default(NULL); }
	virtual ~_ns1__SetRTXNotify() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXNotifyResponse
#define SOAP_TYPE__ns1__SetRTXNotifyResponse (60)
/* ns1:SetRTXNotifyResponse */
class SOAP_CMAC _ns1__SetRTXNotifyResponse
{
public:
	std::string *SetRTXNotifyResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE__ns1__SetRTXNotifyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXNotifyResponse() { _ns1__SetRTXNotifyResponse::soap_default(NULL); }
	virtual ~_ns1__SetRTXNotifyResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXJSON
#define SOAP_TYPE__ns1__SetRTXJSON (61)
/* ns1:SetRTXJSON */
class SOAP_CMAC _ns1__SetRTXJSON
{
public:
	std::string *infoJson;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE__ns1__SetRTXJSON */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXJSON() { _ns1__SetRTXJSON::soap_default(NULL); }
	virtual ~_ns1__SetRTXJSON() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXJSONResponse
#define SOAP_TYPE__ns1__SetRTXJSONResponse (62)
/* ns1:SetRTXJSONResponse */
class SOAP_CMAC _ns1__SetRTXJSONResponse
{
public:
	std::string *SetRTXJSONResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE__ns1__SetRTXJSONResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXJSONResponse() { _ns1__SetRTXJSONResponse::soap_default(NULL); }
	virtual ~_ns1__SetRTXJSONResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetSMSJSON
#define SOAP_TYPE__ns1__SetSMSJSON (63)
/* ns1:SetSMSJSON */
class SOAP_CMAC _ns1__SetSMSJSON
{
public:
	std::string *infoJson;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE__ns1__SetSMSJSON */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetSMSJSON() { _ns1__SetSMSJSON::soap_default(NULL); }
	virtual ~_ns1__SetSMSJSON() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetSMSJSONResponse
#define SOAP_TYPE__ns1__SetSMSJSONResponse (64)
/* ns1:SetSMSJSONResponse */
class SOAP_CMAC _ns1__SetSMSJSONResponse
{
public:
	std::string *SetSMSJSONResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE__ns1__SetSMSJSONResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetSMSJSONResponse() { _ns1__SetSMSJSONResponse::soap_default(NULL); }
	virtual ~_ns1__SetSMSJSONResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetEmailJSON
#define SOAP_TYPE__ns1__SetEmailJSON (65)
/* ns1:SetEmailJSON */
class SOAP_CMAC _ns1__SetEmailJSON
{
public:
	std::string *infoJson;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE__ns1__SetEmailJSON */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetEmailJSON() { _ns1__SetEmailJSON::soap_default(NULL); }
	virtual ~_ns1__SetEmailJSON() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetEmailJSONResponse
#define SOAP_TYPE__ns1__SetEmailJSONResponse (66)
/* ns1:SetEmailJSONResponse */
class SOAP_CMAC _ns1__SetEmailJSONResponse
{
public:
	std::string *SetEmailJSONResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE__ns1__SetEmailJSONResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetEmailJSONResponse() { _ns1__SetEmailJSONResponse::soap_default(NULL); }
	virtual ~_ns1__SetEmailJSONResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetSMSInfoC
#define SOAP_TYPE__ns1__SetSMSInfoC (67)
/* ns1:SetSMSInfoC */
class SOAP_CMAC _ns1__SetSMSInfoC
{
public:
	std::string *fromSys;	/* optional element of type xsd:string */
	std::string *target;	/* optional element of type xsd:string */
	std::string *msTitle;	/* optional element of type xsd:string */
	std::string *msContent;	/* optional element of type xsd:string */
	std::string *targetTime;	/* optional element of type xsd:string */
	std::string *priority;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE__ns1__SetSMSInfoC */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetSMSInfoC() { _ns1__SetSMSInfoC::soap_default(NULL); }
	virtual ~_ns1__SetSMSInfoC() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetSMSInfoCResponse
#define SOAP_TYPE__ns1__SetSMSInfoCResponse (68)
/* ns1:SetSMSInfoCResponse */
class SOAP_CMAC _ns1__SetSMSInfoCResponse
{
public:
	std::string *SetSMSInfoCResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE__ns1__SetSMSInfoCResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetSMSInfoCResponse() { _ns1__SetSMSInfoCResponse::soap_default(NULL); }
	virtual ~_ns1__SetSMSInfoCResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXInfoC
#define SOAP_TYPE__ns1__SetRTXInfoC (69)
/* ns1:SetRTXInfoC */
class SOAP_CMAC _ns1__SetRTXInfoC
{
public:
	std::string *fromSys;	/* optional element of type xsd:string */
	std::string *target;	/* optional element of type xsd:string */
	std::string *msTitle;	/* optional element of type xsd:string */
	std::string *msContent;	/* optional element of type xsd:string */
	std::string *targetTime;	/* optional element of type xsd:string */
	std::string *priority;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE__ns1__SetRTXInfoC */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXInfoC() { _ns1__SetRTXInfoC::soap_default(NULL); }
	virtual ~_ns1__SetRTXInfoC() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXInfoCResponse
#define SOAP_TYPE__ns1__SetRTXInfoCResponse (70)
/* ns1:SetRTXInfoCResponse */
class SOAP_CMAC _ns1__SetRTXInfoCResponse
{
public:
	std::string *SetRTXInfoCResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE__ns1__SetRTXInfoCResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXInfoCResponse() { _ns1__SetRTXInfoCResponse::soap_default(NULL); }
	virtual ~_ns1__SetRTXInfoCResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetEmailInfoC
#define SOAP_TYPE__ns1__SetEmailInfoC (71)
/* ns1:SetEmailInfoC */
class SOAP_CMAC _ns1__SetEmailInfoC
{
public:
	std::string *fromSys;	/* optional element of type xsd:string */
	std::string *target;	/* optional element of type xsd:string */
	std::string *msTitle;	/* optional element of type xsd:string */
	std::string *msContent;	/* optional element of type xsd:string */
	std::string *targetTime;	/* optional element of type xsd:string */
	std::string *priority;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE__ns1__SetEmailInfoC */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetEmailInfoC() { _ns1__SetEmailInfoC::soap_default(NULL); }
	virtual ~_ns1__SetEmailInfoC() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetEmailInfoCResponse
#define SOAP_TYPE__ns1__SetEmailInfoCResponse (72)
/* ns1:SetEmailInfoCResponse */
class SOAP_CMAC _ns1__SetEmailInfoCResponse
{
public:
	std::string *SetEmailInfoCResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE__ns1__SetEmailInfoCResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetEmailInfoCResponse() { _ns1__SetEmailInfoCResponse::soap_default(NULL); }
	virtual ~_ns1__SetEmailInfoCResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetMMSInfoC
#define SOAP_TYPE__ns1__SetMMSInfoC (73)
/* ns1:SetMMSInfoC */
class SOAP_CMAC _ns1__SetMMSInfoC
{
public:
	std::string *fromSys;	/* optional element of type xsd:string */
	std::string *target;	/* optional element of type xsd:string */
	std::string *msTitle;	/* optional element of type xsd:string */
	std::string *msContent;	/* optional element of type xsd:string */
	std::string *targetTime;	/* optional element of type xsd:string */
	std::string *priority;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE__ns1__SetMMSInfoC */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetMMSInfoC() { _ns1__SetMMSInfoC::soap_default(NULL); }
	virtual ~_ns1__SetMMSInfoC() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetMMSInfoCResponse
#define SOAP_TYPE__ns1__SetMMSInfoCResponse (74)
/* ns1:SetMMSInfoCResponse */
class SOAP_CMAC _ns1__SetMMSInfoCResponse
{
public:
	std::string *SetMMSInfoCResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE__ns1__SetMMSInfoCResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetMMSInfoCResponse() { _ns1__SetMMSInfoCResponse::soap_default(NULL); }
	virtual ~_ns1__SetMMSInfoCResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXNotifyC
#define SOAP_TYPE__ns1__SetRTXNotifyC (75)
/* ns1:SetRTXNotifyC */
class SOAP_CMAC _ns1__SetRTXNotifyC
{
public:
	std::string *fromSys;	/* optional element of type xsd:string */
	std::string *target;	/* optional element of type xsd:string */
	std::string *msTitle;	/* optional element of type xsd:string */
	std::string *msContent;	/* optional element of type xsd:string */
	std::string *targetTime;	/* optional element of type xsd:string */
	std::string *priority;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE__ns1__SetRTXNotifyC */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXNotifyC() { _ns1__SetRTXNotifyC::soap_default(NULL); }
	virtual ~_ns1__SetRTXNotifyC() { }
};
#endif

#ifndef SOAP_TYPE__ns1__SetRTXNotifyCResponse
#define SOAP_TYPE__ns1__SetRTXNotifyCResponse (76)
/* ns1:SetRTXNotifyCResponse */
class SOAP_CMAC _ns1__SetRTXNotifyCResponse
{
public:
	std::string *SetRTXNotifyCResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE__ns1__SetRTXNotifyCResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetRTXNotifyCResponse() { _ns1__SetRTXNotifyCResponse::soap_default(NULL); }
	virtual ~_ns1__SetRTXNotifyCResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns4__QueryWandaMsg
#define SOAP_TYPE_ns4__QueryWandaMsg (77)
/* ns4:QueryWandaMsg */
class SOAP_CMAC ns4__QueryWandaMsg : public xsd__anyType
{
public:
	std::string *fromSys;	/* optional element of type xsd:string */
	std::string *msContent;	/* optional element of type xsd:string */
	std::string *msTitle;	/* optional element of type xsd:string */
	std::string *priority;	/* optional element of type xsd:string */
	std::string *target;	/* optional element of type xsd:string */
	std::string *targetTime;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns4__QueryWandaMsg */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__QueryWandaMsg() { ns4__QueryWandaMsg::soap_default(NULL); }
	virtual ~ns4__QueryWandaMsg() { }
};
#endif

#ifndef SOAP_TYPE___ns1__SetRTXInfo
#define SOAP_TYPE___ns1__SetRTXInfo (89)
/* Operation wrapper: */
struct __ns1__SetRTXInfo
{
public:
	_ns1__SetRTXInfo *ns1__SetRTXInfo;	/* optional element of type ns1:SetRTXInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__SetSMSInfo
#define SOAP_TYPE___ns1__SetSMSInfo (93)
/* Operation wrapper: */
struct __ns1__SetSMSInfo
{
public:
	_ns1__SetSMSInfo *ns1__SetSMSInfo;	/* optional element of type ns1:SetSMSInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__SetEmailInfo
#define SOAP_TYPE___ns1__SetEmailInfo (97)
/* Operation wrapper: */
struct __ns1__SetEmailInfo
{
public:
	_ns1__SetEmailInfo *ns1__SetEmailInfo;	/* optional element of type ns1:SetEmailInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__SetMMSInfo
#define SOAP_TYPE___ns1__SetMMSInfo (101)
/* Operation wrapper: */
struct __ns1__SetMMSInfo
{
public:
	_ns1__SetMMSInfo *ns1__SetMMSInfo;	/* optional element of type ns1:SetMMSInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__SetRTXNotify
#define SOAP_TYPE___ns1__SetRTXNotify (105)
/* Operation wrapper: */
struct __ns1__SetRTXNotify
{
public:
	_ns1__SetRTXNotify *ns1__SetRTXNotify;	/* optional element of type ns1:SetRTXNotify */
};
#endif

#ifndef SOAP_TYPE___ns1__SetRTXJSON
#define SOAP_TYPE___ns1__SetRTXJSON (109)
/* Operation wrapper: */
struct __ns1__SetRTXJSON
{
public:
	_ns1__SetRTXJSON *ns1__SetRTXJSON;	/* optional element of type ns1:SetRTXJSON */
};
#endif

#ifndef SOAP_TYPE___ns1__SetSMSJSON
#define SOAP_TYPE___ns1__SetSMSJSON (113)
/* Operation wrapper: */
struct __ns1__SetSMSJSON
{
public:
	_ns1__SetSMSJSON *ns1__SetSMSJSON;	/* optional element of type ns1:SetSMSJSON */
};
#endif

#ifndef SOAP_TYPE___ns1__SetEmailJSON
#define SOAP_TYPE___ns1__SetEmailJSON (117)
/* Operation wrapper: */
struct __ns1__SetEmailJSON
{
public:
	_ns1__SetEmailJSON *ns1__SetEmailJSON;	/* optional element of type ns1:SetEmailJSON */
};
#endif

#ifndef SOAP_TYPE___ns1__SetSMSInfoC
#define SOAP_TYPE___ns1__SetSMSInfoC (121)
/* Operation wrapper: */
struct __ns1__SetSMSInfoC
{
public:
	_ns1__SetSMSInfoC *ns1__SetSMSInfoC;	/* optional element of type ns1:SetSMSInfoC */
};
#endif

#ifndef SOAP_TYPE___ns1__SetRTXInfoC
#define SOAP_TYPE___ns1__SetRTXInfoC (125)
/* Operation wrapper: */
struct __ns1__SetRTXInfoC
{
public:
	_ns1__SetRTXInfoC *ns1__SetRTXInfoC;	/* optional element of type ns1:SetRTXInfoC */
};
#endif

#ifndef SOAP_TYPE___ns1__SetEmailInfoC
#define SOAP_TYPE___ns1__SetEmailInfoC (129)
/* Operation wrapper: */
struct __ns1__SetEmailInfoC
{
public:
	_ns1__SetEmailInfoC *ns1__SetEmailInfoC;	/* optional element of type ns1:SetEmailInfoC */
};
#endif

#ifndef SOAP_TYPE___ns1__SetMMSInfoC
#define SOAP_TYPE___ns1__SetMMSInfoC (133)
/* Operation wrapper: */
struct __ns1__SetMMSInfoC
{
public:
	_ns1__SetMMSInfoC *ns1__SetMMSInfoC;	/* optional element of type ns1:SetMMSInfoC */
};
#endif

#ifndef SOAP_TYPE___ns1__SetRTXNotifyC
#define SOAP_TYPE___ns1__SetRTXNotifyC (137)
/* Operation wrapper: */
struct __ns1__SetRTXNotifyC
{
public:
	_ns1__SetRTXNotifyC *ns1__SetRTXNotifyC;	/* optional element of type ns1:SetRTXNotifyC */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (138)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (139)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (141)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (144)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (145)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (11)
typedef std::string xsd__ID;
#endif

#ifndef SOAP_TYPE_xsd__IDREF
#define SOAP_TYPE_xsd__IDREF (13)
typedef std::string xsd__IDREF;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (17)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (26)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (30)
typedef std::string xsd__decimal;
#endif

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (34)
typedef std::string xsd__duration;
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (44)
typedef unsigned char xsd__unsignedByte;
#endif

#ifndef SOAP_TYPE_ns3__char
#define SOAP_TYPE_ns3__char (78)
typedef int ns3__char;
#endif

#ifndef SOAP_TYPE_ns3__duration
#define SOAP_TYPE_ns3__duration (80)
typedef std::string ns3__duration;
#endif

#ifndef SOAP_TYPE_ns3__guid
#define SOAP_TYPE_ns3__guid (82)
typedef std::string ns3__guid;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetRTXInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetRTXInfo *ns1__SetRTXInfo, _ns1__SetRTXInfoResponse *ns1__SetRTXInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetSMSInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetSMSInfo *ns1__SetSMSInfo, _ns1__SetSMSInfoResponse *ns1__SetSMSInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetEmailInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetEmailInfo *ns1__SetEmailInfo, _ns1__SetEmailInfoResponse *ns1__SetEmailInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetMMSInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetMMSInfo *ns1__SetMMSInfo, _ns1__SetMMSInfoResponse *ns1__SetMMSInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetRTXNotify(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetRTXNotify *ns1__SetRTXNotify, _ns1__SetRTXNotifyResponse *ns1__SetRTXNotifyResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetRTXJSON(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetRTXJSON *ns1__SetRTXJSON, _ns1__SetRTXJSONResponse *ns1__SetRTXJSONResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetSMSJSON(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetSMSJSON *ns1__SetSMSJSON, _ns1__SetSMSJSONResponse *ns1__SetSMSJSONResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetEmailJSON(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetEmailJSON *ns1__SetEmailJSON, _ns1__SetEmailJSONResponse *ns1__SetEmailJSONResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetSMSInfoC(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetSMSInfoC *ns1__SetSMSInfoC, _ns1__SetSMSInfoCResponse *ns1__SetSMSInfoCResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetRTXInfoC(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetRTXInfoC *ns1__SetRTXInfoC, _ns1__SetRTXInfoCResponse *ns1__SetRTXInfoCResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetEmailInfoC(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetEmailInfoC *ns1__SetEmailInfoC, _ns1__SetEmailInfoCResponse *ns1__SetEmailInfoCResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetMMSInfoC(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetMMSInfoC *ns1__SetMMSInfoC, _ns1__SetMMSInfoCResponse *ns1__SetMMSInfoCResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetRTXNotifyC(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__SetRTXNotifyC *ns1__SetRTXNotifyC, _ns1__SetRTXNotifyCResponse *ns1__SetRTXNotifyCResponse);

#endif

/* End of soapStub.h */
