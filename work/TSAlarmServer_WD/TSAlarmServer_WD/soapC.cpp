/* soapC.cpp
   Generated by gSOAP 2.8.4 from WandaMsg.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"
#include "stdafx.h"
SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.4 2015-11-16 07:17:10 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_ns3__char:
		return soap_in_ns3__char(soap, NULL, NULL, "ns3:char");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns3__guid__:
		return soap_in_ns3__guid__(soap, NULL, NULL, "ns3:guid");
	case SOAP_TYPE_ns3__guid:
		return soap_in_ns3__guid(soap, NULL, NULL, "ns3:guid");
	case SOAP_TYPE_ns3__duration__:
		return soap_in_ns3__duration__(soap, NULL, NULL, "ns3:duration");
	case SOAP_TYPE_ns3__duration:
		return soap_in_ns3__duration(soap, NULL, NULL, "ns3:duration");
	case SOAP_TYPE_ns3__char__:
		return soap_in_ns3__char__(soap, NULL, NULL, "ns3:char");
	case SOAP_TYPE_ns4__QueryWandaMsg:
		return soap_in_ns4__QueryWandaMsg(soap, NULL, NULL, "ns4:QueryWandaMsg");
	case SOAP_TYPE_xsd__unsignedShort:
		return soap_in_xsd__unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return soap_in_xsd__unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return soap_in_xsd__unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return soap_in_xsd__unsignedByte_(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return soap_in_xsd__short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return soap_in_xsd__duration_(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_in_xsd__duration(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return soap_in_xsd__decimal_(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return soap_in_xsd__byte_(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return soap_in_xsd__base64Binary_(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return soap_in_xsd__anyURI_(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName_:
		return soap_in_xsd__QName_(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return soap_in_xsd__IDREF_(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_in_xsd__IDREF(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return soap_in_xsd__ID_(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_in_xsd__ID(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyCResponse:
		return soap_in_PointerTo_ns1__SetRTXNotifyCResponse(soap, NULL, NULL, "ns1:SetRTXNotifyCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyC:
		return soap_in_PointerTo_ns1__SetRTXNotifyC(soap, NULL, NULL, "ns1:SetRTXNotifyC");
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoCResponse:
		return soap_in_PointerTo_ns1__SetMMSInfoCResponse(soap, NULL, NULL, "ns1:SetMMSInfoCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoC:
		return soap_in_PointerTo_ns1__SetMMSInfoC(soap, NULL, NULL, "ns1:SetMMSInfoC");
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoCResponse:
		return soap_in_PointerTo_ns1__SetEmailInfoCResponse(soap, NULL, NULL, "ns1:SetEmailInfoCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoC:
		return soap_in_PointerTo_ns1__SetEmailInfoC(soap, NULL, NULL, "ns1:SetEmailInfoC");
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoCResponse:
		return soap_in_PointerTo_ns1__SetRTXInfoCResponse(soap, NULL, NULL, "ns1:SetRTXInfoCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoC:
		return soap_in_PointerTo_ns1__SetRTXInfoC(soap, NULL, NULL, "ns1:SetRTXInfoC");
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoCResponse:
		return soap_in_PointerTo_ns1__SetSMSInfoCResponse(soap, NULL, NULL, "ns1:SetSMSInfoCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoC:
		return soap_in_PointerTo_ns1__SetSMSInfoC(soap, NULL, NULL, "ns1:SetSMSInfoC");
	case SOAP_TYPE_PointerTo_ns1__SetEmailJSONResponse:
		return soap_in_PointerTo_ns1__SetEmailJSONResponse(soap, NULL, NULL, "ns1:SetEmailJSONResponse");
	case SOAP_TYPE_PointerTo_ns1__SetEmailJSON:
		return soap_in_PointerTo_ns1__SetEmailJSON(soap, NULL, NULL, "ns1:SetEmailJSON");
	case SOAP_TYPE_PointerTo_ns1__SetSMSJSONResponse:
		return soap_in_PointerTo_ns1__SetSMSJSONResponse(soap, NULL, NULL, "ns1:SetSMSJSONResponse");
	case SOAP_TYPE_PointerTo_ns1__SetSMSJSON:
		return soap_in_PointerTo_ns1__SetSMSJSON(soap, NULL, NULL, "ns1:SetSMSJSON");
	case SOAP_TYPE_PointerTo_ns1__SetRTXJSONResponse:
		return soap_in_PointerTo_ns1__SetRTXJSONResponse(soap, NULL, NULL, "ns1:SetRTXJSONResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXJSON:
		return soap_in_PointerTo_ns1__SetRTXJSON(soap, NULL, NULL, "ns1:SetRTXJSON");
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyResponse:
		return soap_in_PointerTo_ns1__SetRTXNotifyResponse(soap, NULL, NULL, "ns1:SetRTXNotifyResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotify:
		return soap_in_PointerTo_ns1__SetRTXNotify(soap, NULL, NULL, "ns1:SetRTXNotify");
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoResponse:
		return soap_in_PointerTo_ns1__SetMMSInfoResponse(soap, NULL, NULL, "ns1:SetMMSInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfo:
		return soap_in_PointerTo_ns1__SetMMSInfo(soap, NULL, NULL, "ns1:SetMMSInfo");
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoResponse:
		return soap_in_PointerTo_ns1__SetEmailInfoResponse(soap, NULL, NULL, "ns1:SetEmailInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfo:
		return soap_in_PointerTo_ns1__SetEmailInfo(soap, NULL, NULL, "ns1:SetEmailInfo");
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoResponse:
		return soap_in_PointerTo_ns1__SetSMSInfoResponse(soap, NULL, NULL, "ns1:SetSMSInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfo:
		return soap_in_PointerTo_ns1__SetSMSInfo(soap, NULL, NULL, "ns1:SetSMSInfo");
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoResponse:
		return soap_in_PointerTo_ns1__SetRTXInfoResponse(soap, NULL, NULL, "ns1:SetRTXInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfo:
		return soap_in_PointerTo_ns1__SetRTXInfo(soap, NULL, NULL, "ns1:SetRTXInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons4__QueryWandaMsg:
		return soap_in_PointerTons4__QueryWandaMsg(soap, NULL, NULL, "ns4:QueryWandaMsg");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:guid"))
		{	*type = SOAP_TYPE_ns3__guid__;
			return soap_in_ns3__guid__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:guid"))
		{	*type = SOAP_TYPE_ns3__guid;
			return soap_in_ns3__guid(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:duration"))
		{	*type = SOAP_TYPE_ns3__duration__;
			return soap_in_ns3__duration__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:duration"))
		{	*type = SOAP_TYPE_ns3__duration;
			return soap_in_ns3__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:char"))
		{	*type = SOAP_TYPE_ns3__char__;
			return soap_in_ns3__char__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:QueryWandaMsg"))
		{	*type = SOAP_TYPE_ns4__QueryWandaMsg;
			return soap_in_ns4__QueryWandaMsg(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_xsd__unsignedShort;
			return soap_in_xsd__unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_xsd__unsignedLong;
			return soap_in_xsd__unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_xsd__unsignedInt;
			return soap_in_xsd__unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte_;
			return soap_in_xsd__unsignedByte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_xsd__short;
			return soap_in_xsd__short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration_;
			return soap_in_xsd__duration_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration;
			return soap_in_xsd__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal_;
			return soap_in_xsd__decimal_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte_;
			return soap_in_xsd__byte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary_;
			return soap_in_xsd__base64Binary_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI_;
			return soap_in_xsd__anyURI_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName_;
			return soap_in_xsd__QName_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF_;
			return soap_in_xsd__IDREF_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF;
			return soap_in_xsd__IDREF(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID_;
			return soap_in_xsd__ID_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID;
			return soap_in_xsd__ID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:char"))
		{	*type = SOAP_TYPE_ns3__char;
			return soap_in_ns3__char(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:SetRTXNotifyCResponse"))
		{	*type = SOAP_TYPE__ns1__SetRTXNotifyCResponse;
			return soap_in__ns1__SetRTXNotifyCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXNotifyC"))
		{	*type = SOAP_TYPE__ns1__SetRTXNotifyC;
			return soap_in__ns1__SetRTXNotifyC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetMMSInfoCResponse"))
		{	*type = SOAP_TYPE__ns1__SetMMSInfoCResponse;
			return soap_in__ns1__SetMMSInfoCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetMMSInfoC"))
		{	*type = SOAP_TYPE__ns1__SetMMSInfoC;
			return soap_in__ns1__SetMMSInfoC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetEmailInfoCResponse"))
		{	*type = SOAP_TYPE__ns1__SetEmailInfoCResponse;
			return soap_in__ns1__SetEmailInfoCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetEmailInfoC"))
		{	*type = SOAP_TYPE__ns1__SetEmailInfoC;
			return soap_in__ns1__SetEmailInfoC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXInfoCResponse"))
		{	*type = SOAP_TYPE__ns1__SetRTXInfoCResponse;
			return soap_in__ns1__SetRTXInfoCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXInfoC"))
		{	*type = SOAP_TYPE__ns1__SetRTXInfoC;
			return soap_in__ns1__SetRTXInfoC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSMSInfoCResponse"))
		{	*type = SOAP_TYPE__ns1__SetSMSInfoCResponse;
			return soap_in__ns1__SetSMSInfoCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSMSInfoC"))
		{	*type = SOAP_TYPE__ns1__SetSMSInfoC;
			return soap_in__ns1__SetSMSInfoC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetEmailJSONResponse"))
		{	*type = SOAP_TYPE__ns1__SetEmailJSONResponse;
			return soap_in__ns1__SetEmailJSONResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetEmailJSON"))
		{	*type = SOAP_TYPE__ns1__SetEmailJSON;
			return soap_in__ns1__SetEmailJSON(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSMSJSONResponse"))
		{	*type = SOAP_TYPE__ns1__SetSMSJSONResponse;
			return soap_in__ns1__SetSMSJSONResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSMSJSON"))
		{	*type = SOAP_TYPE__ns1__SetSMSJSON;
			return soap_in__ns1__SetSMSJSON(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXJSONResponse"))
		{	*type = SOAP_TYPE__ns1__SetRTXJSONResponse;
			return soap_in__ns1__SetRTXJSONResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXJSON"))
		{	*type = SOAP_TYPE__ns1__SetRTXJSON;
			return soap_in__ns1__SetRTXJSON(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXNotifyResponse"))
		{	*type = SOAP_TYPE__ns1__SetRTXNotifyResponse;
			return soap_in__ns1__SetRTXNotifyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXNotify"))
		{	*type = SOAP_TYPE__ns1__SetRTXNotify;
			return soap_in__ns1__SetRTXNotify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetMMSInfoResponse"))
		{	*type = SOAP_TYPE__ns1__SetMMSInfoResponse;
			return soap_in__ns1__SetMMSInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetMMSInfo"))
		{	*type = SOAP_TYPE__ns1__SetMMSInfo;
			return soap_in__ns1__SetMMSInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetEmailInfoResponse"))
		{	*type = SOAP_TYPE__ns1__SetEmailInfoResponse;
			return soap_in__ns1__SetEmailInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetEmailInfo"))
		{	*type = SOAP_TYPE__ns1__SetEmailInfo;
			return soap_in__ns1__SetEmailInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSMSInfoResponse"))
		{	*type = SOAP_TYPE__ns1__SetSMSInfoResponse;
			return soap_in__ns1__SetSMSInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetSMSInfo"))
		{	*type = SOAP_TYPE__ns1__SetSMSInfo;
			return soap_in__ns1__SetSMSInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXInfoResponse"))
		{	*type = SOAP_TYPE__ns1__SetRTXInfoResponse;
			return soap_in__ns1__SetRTXInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SetRTXInfo"))
		{	*type = SOAP_TYPE__ns1__SetRTXInfo;
			return soap_in__ns1__SetRTXInfo(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_ns3__char:
		return soap_out_ns3__char(soap, tag, id, (const int *)ptr, "ns3:char");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns3__guid__:
		return ((ns3__guid__ *)ptr)->soap_out(soap, tag, id, "ns3:guid");
	case SOAP_TYPE_ns3__guid:
		return soap_out_ns3__guid(soap, tag, id, (const std::string *)ptr, "ns3:guid");
	case SOAP_TYPE_ns3__duration__:
		return ((ns3__duration__ *)ptr)->soap_out(soap, tag, id, "ns3:duration");
	case SOAP_TYPE_ns3__duration:
		return soap_out_ns3__duration(soap, tag, id, (const std::string *)ptr, "ns3:duration");
	case SOAP_TYPE_ns3__char__:
		return ((ns3__char__ *)ptr)->soap_out(soap, tag, id, "ns3:char");
	case SOAP_TYPE_ns4__QueryWandaMsg:
		return ((ns4__QueryWandaMsg *)ptr)->soap_out(soap, tag, id, "ns4:QueryWandaMsg");
	case SOAP_TYPE__ns1__SetRTXNotifyCResponse:
		return ((_ns1__SetRTXNotifyCResponse *)ptr)->soap_out(soap, "ns1:SetRTXNotifyCResponse", id, NULL);
	case SOAP_TYPE__ns1__SetRTXNotifyC:
		return ((_ns1__SetRTXNotifyC *)ptr)->soap_out(soap, "ns1:SetRTXNotifyC", id, NULL);
	case SOAP_TYPE__ns1__SetMMSInfoCResponse:
		return ((_ns1__SetMMSInfoCResponse *)ptr)->soap_out(soap, "ns1:SetMMSInfoCResponse", id, NULL);
	case SOAP_TYPE__ns1__SetMMSInfoC:
		return ((_ns1__SetMMSInfoC *)ptr)->soap_out(soap, "ns1:SetMMSInfoC", id, NULL);
	case SOAP_TYPE__ns1__SetEmailInfoCResponse:
		return ((_ns1__SetEmailInfoCResponse *)ptr)->soap_out(soap, "ns1:SetEmailInfoCResponse", id, NULL);
	case SOAP_TYPE__ns1__SetEmailInfoC:
		return ((_ns1__SetEmailInfoC *)ptr)->soap_out(soap, "ns1:SetEmailInfoC", id, NULL);
	case SOAP_TYPE__ns1__SetRTXInfoCResponse:
		return ((_ns1__SetRTXInfoCResponse *)ptr)->soap_out(soap, "ns1:SetRTXInfoCResponse", id, NULL);
	case SOAP_TYPE__ns1__SetRTXInfoC:
		return ((_ns1__SetRTXInfoC *)ptr)->soap_out(soap, "ns1:SetRTXInfoC", id, NULL);
	case SOAP_TYPE__ns1__SetSMSInfoCResponse:
		return ((_ns1__SetSMSInfoCResponse *)ptr)->soap_out(soap, "ns1:SetSMSInfoCResponse", id, NULL);
	case SOAP_TYPE__ns1__SetSMSInfoC:
		return ((_ns1__SetSMSInfoC *)ptr)->soap_out(soap, "ns1:SetSMSInfoC", id, NULL);
	case SOAP_TYPE__ns1__SetEmailJSONResponse:
		return ((_ns1__SetEmailJSONResponse *)ptr)->soap_out(soap, "ns1:SetEmailJSONResponse", id, NULL);
	case SOAP_TYPE__ns1__SetEmailJSON:
		return ((_ns1__SetEmailJSON *)ptr)->soap_out(soap, "ns1:SetEmailJSON", id, NULL);
	case SOAP_TYPE__ns1__SetSMSJSONResponse:
		return ((_ns1__SetSMSJSONResponse *)ptr)->soap_out(soap, "ns1:SetSMSJSONResponse", id, NULL);
	case SOAP_TYPE__ns1__SetSMSJSON:
		return ((_ns1__SetSMSJSON *)ptr)->soap_out(soap, "ns1:SetSMSJSON", id, NULL);
	case SOAP_TYPE__ns1__SetRTXJSONResponse:
		return ((_ns1__SetRTXJSONResponse *)ptr)->soap_out(soap, "ns1:SetRTXJSONResponse", id, NULL);
	case SOAP_TYPE__ns1__SetRTXJSON:
		return ((_ns1__SetRTXJSON *)ptr)->soap_out(soap, "ns1:SetRTXJSON", id, NULL);
	case SOAP_TYPE__ns1__SetRTXNotifyResponse:
		return ((_ns1__SetRTXNotifyResponse *)ptr)->soap_out(soap, "ns1:SetRTXNotifyResponse", id, NULL);
	case SOAP_TYPE__ns1__SetRTXNotify:
		return ((_ns1__SetRTXNotify *)ptr)->soap_out(soap, "ns1:SetRTXNotify", id, NULL);
	case SOAP_TYPE__ns1__SetMMSInfoResponse:
		return ((_ns1__SetMMSInfoResponse *)ptr)->soap_out(soap, "ns1:SetMMSInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__SetMMSInfo:
		return ((_ns1__SetMMSInfo *)ptr)->soap_out(soap, "ns1:SetMMSInfo", id, NULL);
	case SOAP_TYPE__ns1__SetEmailInfoResponse:
		return ((_ns1__SetEmailInfoResponse *)ptr)->soap_out(soap, "ns1:SetEmailInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__SetEmailInfo:
		return ((_ns1__SetEmailInfo *)ptr)->soap_out(soap, "ns1:SetEmailInfo", id, NULL);
	case SOAP_TYPE__ns1__SetSMSInfoResponse:
		return ((_ns1__SetSMSInfoResponse *)ptr)->soap_out(soap, "ns1:SetSMSInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__SetSMSInfo:
		return ((_ns1__SetSMSInfo *)ptr)->soap_out(soap, "ns1:SetSMSInfo", id, NULL);
	case SOAP_TYPE__ns1__SetRTXInfoResponse:
		return ((_ns1__SetRTXInfoResponse *)ptr)->soap_out(soap, "ns1:SetRTXInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__SetRTXInfo:
		return ((_ns1__SetRTXInfo *)ptr)->soap_out(soap, "ns1:SetRTXInfo", id, NULL);
	case SOAP_TYPE_xsd__unsignedShort:
		return ((xsd__unsignedShort *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return ((xsd__unsignedLong *)ptr)->soap_out(soap, tag, id, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return ((xsd__unsignedInt *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return ((xsd__unsignedByte_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return ((xsd__short *)ptr)->soap_out(soap, tag, id, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return ((xsd__float *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return ((xsd__duration_ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const std::string *)ptr, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return ((xsd__double *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return ((xsd__decimal_ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return ((xsd__dateTime *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return ((xsd__byte_ *)ptr)->soap_out(soap, tag, id, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return ((xsd__base64Binary_ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return ((xsd__anyURI_ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName_:
		return ((xsd__QName_ *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__QName:
		return soap_out_xsd__QName(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return ((xsd__IDREF_ *)ptr)->soap_out(soap, tag, id, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_out_xsd__IDREF(soap, tag, id, (const std::string *)ptr, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return ((xsd__ID_ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_out_xsd__ID(soap, tag, id, (const std::string *)ptr, "xsd:ID");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyCResponse:
		return soap_out_PointerTo_ns1__SetRTXNotifyCResponse(soap, tag, id, (_ns1__SetRTXNotifyCResponse *const*)ptr, "ns1:SetRTXNotifyCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyC:
		return soap_out_PointerTo_ns1__SetRTXNotifyC(soap, tag, id, (_ns1__SetRTXNotifyC *const*)ptr, "ns1:SetRTXNotifyC");
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoCResponse:
		return soap_out_PointerTo_ns1__SetMMSInfoCResponse(soap, tag, id, (_ns1__SetMMSInfoCResponse *const*)ptr, "ns1:SetMMSInfoCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoC:
		return soap_out_PointerTo_ns1__SetMMSInfoC(soap, tag, id, (_ns1__SetMMSInfoC *const*)ptr, "ns1:SetMMSInfoC");
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoCResponse:
		return soap_out_PointerTo_ns1__SetEmailInfoCResponse(soap, tag, id, (_ns1__SetEmailInfoCResponse *const*)ptr, "ns1:SetEmailInfoCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoC:
		return soap_out_PointerTo_ns1__SetEmailInfoC(soap, tag, id, (_ns1__SetEmailInfoC *const*)ptr, "ns1:SetEmailInfoC");
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoCResponse:
		return soap_out_PointerTo_ns1__SetRTXInfoCResponse(soap, tag, id, (_ns1__SetRTXInfoCResponse *const*)ptr, "ns1:SetRTXInfoCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoC:
		return soap_out_PointerTo_ns1__SetRTXInfoC(soap, tag, id, (_ns1__SetRTXInfoC *const*)ptr, "ns1:SetRTXInfoC");
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoCResponse:
		return soap_out_PointerTo_ns1__SetSMSInfoCResponse(soap, tag, id, (_ns1__SetSMSInfoCResponse *const*)ptr, "ns1:SetSMSInfoCResponse");
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoC:
		return soap_out_PointerTo_ns1__SetSMSInfoC(soap, tag, id, (_ns1__SetSMSInfoC *const*)ptr, "ns1:SetSMSInfoC");
	case SOAP_TYPE_PointerTo_ns1__SetEmailJSONResponse:
		return soap_out_PointerTo_ns1__SetEmailJSONResponse(soap, tag, id, (_ns1__SetEmailJSONResponse *const*)ptr, "ns1:SetEmailJSONResponse");
	case SOAP_TYPE_PointerTo_ns1__SetEmailJSON:
		return soap_out_PointerTo_ns1__SetEmailJSON(soap, tag, id, (_ns1__SetEmailJSON *const*)ptr, "ns1:SetEmailJSON");
	case SOAP_TYPE_PointerTo_ns1__SetSMSJSONResponse:
		return soap_out_PointerTo_ns1__SetSMSJSONResponse(soap, tag, id, (_ns1__SetSMSJSONResponse *const*)ptr, "ns1:SetSMSJSONResponse");
	case SOAP_TYPE_PointerTo_ns1__SetSMSJSON:
		return soap_out_PointerTo_ns1__SetSMSJSON(soap, tag, id, (_ns1__SetSMSJSON *const*)ptr, "ns1:SetSMSJSON");
	case SOAP_TYPE_PointerTo_ns1__SetRTXJSONResponse:
		return soap_out_PointerTo_ns1__SetRTXJSONResponse(soap, tag, id, (_ns1__SetRTXJSONResponse *const*)ptr, "ns1:SetRTXJSONResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXJSON:
		return soap_out_PointerTo_ns1__SetRTXJSON(soap, tag, id, (_ns1__SetRTXJSON *const*)ptr, "ns1:SetRTXJSON");
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyResponse:
		return soap_out_PointerTo_ns1__SetRTXNotifyResponse(soap, tag, id, (_ns1__SetRTXNotifyResponse *const*)ptr, "ns1:SetRTXNotifyResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotify:
		return soap_out_PointerTo_ns1__SetRTXNotify(soap, tag, id, (_ns1__SetRTXNotify *const*)ptr, "ns1:SetRTXNotify");
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoResponse:
		return soap_out_PointerTo_ns1__SetMMSInfoResponse(soap, tag, id, (_ns1__SetMMSInfoResponse *const*)ptr, "ns1:SetMMSInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfo:
		return soap_out_PointerTo_ns1__SetMMSInfo(soap, tag, id, (_ns1__SetMMSInfo *const*)ptr, "ns1:SetMMSInfo");
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoResponse:
		return soap_out_PointerTo_ns1__SetEmailInfoResponse(soap, tag, id, (_ns1__SetEmailInfoResponse *const*)ptr, "ns1:SetEmailInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfo:
		return soap_out_PointerTo_ns1__SetEmailInfo(soap, tag, id, (_ns1__SetEmailInfo *const*)ptr, "ns1:SetEmailInfo");
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoResponse:
		return soap_out_PointerTo_ns1__SetSMSInfoResponse(soap, tag, id, (_ns1__SetSMSInfoResponse *const*)ptr, "ns1:SetSMSInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfo:
		return soap_out_PointerTo_ns1__SetSMSInfo(soap, tag, id, (_ns1__SetSMSInfo *const*)ptr, "ns1:SetSMSInfo");
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoResponse:
		return soap_out_PointerTo_ns1__SetRTXInfoResponse(soap, tag, id, (_ns1__SetRTXInfoResponse *const*)ptr, "ns1:SetRTXInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfo:
		return soap_out_PointerTo_ns1__SetRTXInfo(soap, tag, id, (_ns1__SetRTXInfo *const*)ptr, "ns1:SetRTXInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons4__QueryWandaMsg:
		return soap_out_PointerTons4__QueryWandaMsg(soap, tag, id, (ns4__QueryWandaMsg *const*)ptr, "ns4:QueryWandaMsg");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns3__guid__:
		((ns3__guid__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__guid:
		soap_serialize_ns3__guid(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns3__duration__:
		((ns3__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__duration:
		soap_serialize_ns3__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns3__char__:
		((ns3__char__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__QueryWandaMsg:
		((ns4__QueryWandaMsg *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXNotifyCResponse:
		((_ns1__SetRTXNotifyCResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXNotifyC:
		((_ns1__SetRTXNotifyC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetMMSInfoCResponse:
		((_ns1__SetMMSInfoCResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetMMSInfoC:
		((_ns1__SetMMSInfoC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetEmailInfoCResponse:
		((_ns1__SetEmailInfoCResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetEmailInfoC:
		((_ns1__SetEmailInfoC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXInfoCResponse:
		((_ns1__SetRTXInfoCResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXInfoC:
		((_ns1__SetRTXInfoC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSMSInfoCResponse:
		((_ns1__SetSMSInfoCResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSMSInfoC:
		((_ns1__SetSMSInfoC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetEmailJSONResponse:
		((_ns1__SetEmailJSONResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetEmailJSON:
		((_ns1__SetEmailJSON *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSMSJSONResponse:
		((_ns1__SetSMSJSONResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSMSJSON:
		((_ns1__SetSMSJSON *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXJSONResponse:
		((_ns1__SetRTXJSONResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXJSON:
		((_ns1__SetRTXJSON *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXNotifyResponse:
		((_ns1__SetRTXNotifyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXNotify:
		((_ns1__SetRTXNotify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetMMSInfoResponse:
		((_ns1__SetMMSInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetMMSInfo:
		((_ns1__SetMMSInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetEmailInfoResponse:
		((_ns1__SetEmailInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetEmailInfo:
		((_ns1__SetEmailInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSMSInfoResponse:
		((_ns1__SetSMSInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetSMSInfo:
		((_ns1__SetSMSInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXInfoResponse:
		((_ns1__SetRTXInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SetRTXInfo:
		((_ns1__SetRTXInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		((xsd__unsignedShort *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		((xsd__unsignedLong *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		((xsd__unsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		((xsd__unsignedByte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__short:
		((xsd__short *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__long:
		((xsd__long *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__float:
		((xsd__float *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration_:
		((xsd__duration_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration:
		soap_serialize_xsd__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__double:
		((xsd__double *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal_:
		((xsd__decimal_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		((xsd__dateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__byte_:
		((xsd__byte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		((xsd__base64Binary_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		((xsd__anyURI_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__QName_:
		((xsd__QName_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__QName:
		soap_serialize_xsd__QName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__IDREF_:
		((xsd__IDREF_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF:
		soap_serialize_xsd__IDREF(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__ID_:
		((xsd__ID_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__ID:
		soap_serialize_xsd__ID(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__SetRTXNotifyC:
		soap_serialize___ns1__SetRTXNotifyC(soap, (const struct __ns1__SetRTXNotifyC *)ptr);
		break;
	case SOAP_TYPE___ns1__SetMMSInfoC:
		soap_serialize___ns1__SetMMSInfoC(soap, (const struct __ns1__SetMMSInfoC *)ptr);
		break;
	case SOAP_TYPE___ns1__SetEmailInfoC:
		soap_serialize___ns1__SetEmailInfoC(soap, (const struct __ns1__SetEmailInfoC *)ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXInfoC:
		soap_serialize___ns1__SetRTXInfoC(soap, (const struct __ns1__SetRTXInfoC *)ptr);
		break;
	case SOAP_TYPE___ns1__SetSMSInfoC:
		soap_serialize___ns1__SetSMSInfoC(soap, (const struct __ns1__SetSMSInfoC *)ptr);
		break;
	case SOAP_TYPE___ns1__SetEmailJSON:
		soap_serialize___ns1__SetEmailJSON(soap, (const struct __ns1__SetEmailJSON *)ptr);
		break;
	case SOAP_TYPE___ns1__SetSMSJSON:
		soap_serialize___ns1__SetSMSJSON(soap, (const struct __ns1__SetSMSJSON *)ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXJSON:
		soap_serialize___ns1__SetRTXJSON(soap, (const struct __ns1__SetRTXJSON *)ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXNotify:
		soap_serialize___ns1__SetRTXNotify(soap, (const struct __ns1__SetRTXNotify *)ptr);
		break;
	case SOAP_TYPE___ns1__SetMMSInfo:
		soap_serialize___ns1__SetMMSInfo(soap, (const struct __ns1__SetMMSInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__SetEmailInfo:
		soap_serialize___ns1__SetEmailInfo(soap, (const struct __ns1__SetEmailInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__SetSMSInfo:
		soap_serialize___ns1__SetSMSInfo(soap, (const struct __ns1__SetSMSInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXInfo:
		soap_serialize___ns1__SetRTXInfo(soap, (const struct __ns1__SetRTXInfo *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyCResponse:
		soap_serialize_PointerTo_ns1__SetRTXNotifyCResponse(soap, (_ns1__SetRTXNotifyCResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyC:
		soap_serialize_PointerTo_ns1__SetRTXNotifyC(soap, (_ns1__SetRTXNotifyC *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoCResponse:
		soap_serialize_PointerTo_ns1__SetMMSInfoCResponse(soap, (_ns1__SetMMSInfoCResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoC:
		soap_serialize_PointerTo_ns1__SetMMSInfoC(soap, (_ns1__SetMMSInfoC *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoCResponse:
		soap_serialize_PointerTo_ns1__SetEmailInfoCResponse(soap, (_ns1__SetEmailInfoCResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoC:
		soap_serialize_PointerTo_ns1__SetEmailInfoC(soap, (_ns1__SetEmailInfoC *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoCResponse:
		soap_serialize_PointerTo_ns1__SetRTXInfoCResponse(soap, (_ns1__SetRTXInfoCResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoC:
		soap_serialize_PointerTo_ns1__SetRTXInfoC(soap, (_ns1__SetRTXInfoC *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoCResponse:
		soap_serialize_PointerTo_ns1__SetSMSInfoCResponse(soap, (_ns1__SetSMSInfoCResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoC:
		soap_serialize_PointerTo_ns1__SetSMSInfoC(soap, (_ns1__SetSMSInfoC *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetEmailJSONResponse:
		soap_serialize_PointerTo_ns1__SetEmailJSONResponse(soap, (_ns1__SetEmailJSONResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetEmailJSON:
		soap_serialize_PointerTo_ns1__SetEmailJSON(soap, (_ns1__SetEmailJSON *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetSMSJSONResponse:
		soap_serialize_PointerTo_ns1__SetSMSJSONResponse(soap, (_ns1__SetSMSJSONResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetSMSJSON:
		soap_serialize_PointerTo_ns1__SetSMSJSON(soap, (_ns1__SetSMSJSON *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXJSONResponse:
		soap_serialize_PointerTo_ns1__SetRTXJSONResponse(soap, (_ns1__SetRTXJSONResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXJSON:
		soap_serialize_PointerTo_ns1__SetRTXJSON(soap, (_ns1__SetRTXJSON *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotifyResponse:
		soap_serialize_PointerTo_ns1__SetRTXNotifyResponse(soap, (_ns1__SetRTXNotifyResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXNotify:
		soap_serialize_PointerTo_ns1__SetRTXNotify(soap, (_ns1__SetRTXNotify *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfoResponse:
		soap_serialize_PointerTo_ns1__SetMMSInfoResponse(soap, (_ns1__SetMMSInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetMMSInfo:
		soap_serialize_PointerTo_ns1__SetMMSInfo(soap, (_ns1__SetMMSInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfoResponse:
		soap_serialize_PointerTo_ns1__SetEmailInfoResponse(soap, (_ns1__SetEmailInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetEmailInfo:
		soap_serialize_PointerTo_ns1__SetEmailInfo(soap, (_ns1__SetEmailInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfoResponse:
		soap_serialize_PointerTo_ns1__SetSMSInfoResponse(soap, (_ns1__SetSMSInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetSMSInfo:
		soap_serialize_PointerTo_ns1__SetSMSInfo(soap, (_ns1__SetSMSInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfoResponse:
		soap_serialize_PointerTo_ns1__SetRTXInfoResponse(soap, (_ns1__SetRTXInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SetRTXInfo:
		soap_serialize_PointerTo_ns1__SetRTXInfo(soap, (_ns1__SetRTXInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__QueryWandaMsg:
		soap_serialize_PointerTons4__QueryWandaMsg(soap, (ns4__QueryWandaMsg *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID_:
		return (void*)soap_instantiate_xsd__ID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF_:
		return (void*)soap_instantiate_xsd__IDREF_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName_:
		return (void*)soap_instantiate_xsd__QName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI_:
		return (void*)soap_instantiate_xsd__anyURI_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary_:
		return (void*)soap_instantiate_xsd__base64Binary_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__byte_:
		return (void*)soap_instantiate_xsd__byte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal_:
		return (void*)soap_instantiate_xsd__decimal_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__double:
		return (void*)soap_instantiate_xsd__double(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration_:
		return (void*)soap_instantiate_xsd__duration_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__float:
		return (void*)soap_instantiate_xsd__float(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long:
		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__short:
		return (void*)soap_instantiate_xsd__short(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedByte_:
		return (void*)soap_instantiate_xsd__unsignedByte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedInt:
		return (void*)soap_instantiate_xsd__unsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedLong:
		return (void*)soap_instantiate_xsd__unsignedLong(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedShort:
		return (void*)soap_instantiate_xsd__unsignedShort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__char__:
		return (void*)soap_instantiate_ns3__char__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__duration__:
		return (void*)soap_instantiate_ns3__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__guid__:
		return (void*)soap_instantiate_ns3__guid__(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXInfo:
		return (void*)soap_instantiate__ns1__SetRTXInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXInfoResponse:
		return (void*)soap_instantiate__ns1__SetRTXInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSMSInfo:
		return (void*)soap_instantiate__ns1__SetSMSInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSMSInfoResponse:
		return (void*)soap_instantiate__ns1__SetSMSInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetEmailInfo:
		return (void*)soap_instantiate__ns1__SetEmailInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetEmailInfoResponse:
		return (void*)soap_instantiate__ns1__SetEmailInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetMMSInfo:
		return (void*)soap_instantiate__ns1__SetMMSInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetMMSInfoResponse:
		return (void*)soap_instantiate__ns1__SetMMSInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXNotify:
		return (void*)soap_instantiate__ns1__SetRTXNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXNotifyResponse:
		return (void*)soap_instantiate__ns1__SetRTXNotifyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXJSON:
		return (void*)soap_instantiate__ns1__SetRTXJSON(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXJSONResponse:
		return (void*)soap_instantiate__ns1__SetRTXJSONResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSMSJSON:
		return (void*)soap_instantiate__ns1__SetSMSJSON(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSMSJSONResponse:
		return (void*)soap_instantiate__ns1__SetSMSJSONResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetEmailJSON:
		return (void*)soap_instantiate__ns1__SetEmailJSON(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetEmailJSONResponse:
		return (void*)soap_instantiate__ns1__SetEmailJSONResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSMSInfoC:
		return (void*)soap_instantiate__ns1__SetSMSInfoC(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetSMSInfoCResponse:
		return (void*)soap_instantiate__ns1__SetSMSInfoCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXInfoC:
		return (void*)soap_instantiate__ns1__SetRTXInfoC(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXInfoCResponse:
		return (void*)soap_instantiate__ns1__SetRTXInfoCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetEmailInfoC:
		return (void*)soap_instantiate__ns1__SetEmailInfoC(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetEmailInfoCResponse:
		return (void*)soap_instantiate__ns1__SetEmailInfoCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetMMSInfoC:
		return (void*)soap_instantiate__ns1__SetMMSInfoC(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetMMSInfoCResponse:
		return (void*)soap_instantiate__ns1__SetMMSInfoCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXNotifyC:
		return (void*)soap_instantiate__ns1__SetRTXNotifyC(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SetRTXNotifyCResponse:
		return (void*)soap_instantiate__ns1__SetRTXNotifyCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__QueryWandaMsg:
		return (void*)soap_instantiate_ns4__QueryWandaMsg(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetRTXInfo:
		return (void*)soap_instantiate___ns1__SetRTXInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetSMSInfo:
		return (void*)soap_instantiate___ns1__SetSMSInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetEmailInfo:
		return (void*)soap_instantiate___ns1__SetEmailInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetMMSInfo:
		return (void*)soap_instantiate___ns1__SetMMSInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetRTXNotify:
		return (void*)soap_instantiate___ns1__SetRTXNotify(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetRTXJSON:
		return (void*)soap_instantiate___ns1__SetRTXJSON(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetSMSJSON:
		return (void*)soap_instantiate___ns1__SetSMSJSON(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetEmailJSON:
		return (void*)soap_instantiate___ns1__SetEmailJSON(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetSMSInfoC:
		return (void*)soap_instantiate___ns1__SetSMSInfoC(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetRTXInfoC:
		return (void*)soap_instantiate___ns1__SetRTXInfoC(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetEmailInfoC:
		return (void*)soap_instantiate___ns1__SetEmailInfoC(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetMMSInfoC:
		return (void*)soap_instantiate___ns1__SetMMSInfoC(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__SetRTXNotifyC:
		return (void*)soap_instantiate___ns1__SetRTXNotifyC(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__ID:
		return (void*)soap_instantiate_xsd__ID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF:
		return (void*)soap_instantiate_xsd__IDREF(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration:
		return (void*)soap_instantiate_xsd__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__duration:
		return (void*)soap_instantiate_ns3__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__guid:
		return (void*)soap_instantiate_ns3__guid(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyType*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__ID_:
		if (p->size < 0)
			SOAP_DELETE((xsd__ID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__ID_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__IDREF_:
		if (p->size < 0)
			SOAP_DELETE((xsd__IDREF_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__IDREF_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__QName_:
		if (p->size < 0)
			SOAP_DELETE((xsd__QName_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__QName_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyURI_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyURI_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__boolean:
		if (p->size < 0)
			SOAP_DELETE((xsd__boolean*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__boolean*)p->ptr);
		break;
	case SOAP_TYPE_xsd__byte_:
		if (p->size < 0)
			SOAP_DELETE((xsd__byte_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__byte_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE((xsd__dateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__dateTime*)p->ptr);
		break;
	case SOAP_TYPE_xsd__decimal_:
		if (p->size < 0)
			SOAP_DELETE((xsd__decimal_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__decimal_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__double:
		if (p->size < 0)
			SOAP_DELETE((xsd__double*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__double*)p->ptr);
		break;
	case SOAP_TYPE_xsd__duration_:
		if (p->size < 0)
			SOAP_DELETE((xsd__duration_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__duration_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__float:
		if (p->size < 0)
			SOAP_DELETE((xsd__float*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__float*)p->ptr);
		break;
	case SOAP_TYPE_xsd__int:
		if (p->size < 0)
			SOAP_DELETE((xsd__int*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__int*)p->ptr);
		break;
	case SOAP_TYPE_xsd__long:
		if (p->size < 0)
			SOAP_DELETE((xsd__long*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__long*)p->ptr);
		break;
	case SOAP_TYPE_xsd__short:
		if (p->size < 0)
			SOAP_DELETE((xsd__short*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__short*)p->ptr);
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE((xsd__string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedByte_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedByte_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedInt*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedLong*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedLong*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedShort*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedShort*)p->ptr);
		break;
	case SOAP_TYPE_ns3__char__:
		if (p->size < 0)
			SOAP_DELETE((ns3__char__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__char__*)p->ptr);
		break;
	case SOAP_TYPE_ns3__duration__:
		if (p->size < 0)
			SOAP_DELETE((ns3__duration__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__duration__*)p->ptr);
		break;
	case SOAP_TYPE_ns3__guid__:
		if (p->size < 0)
			SOAP_DELETE((ns3__guid__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__guid__*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetSMSInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetSMSInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetSMSInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetSMSInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetSMSInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetSMSInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetEmailInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetEmailInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetEmailInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetEmailInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetEmailInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetEmailInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetMMSInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetMMSInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetMMSInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetMMSInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetMMSInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetMMSInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXNotify:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXNotify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXNotify*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXNotifyResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXNotifyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXNotifyResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXJSON:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXJSON*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXJSON*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXJSONResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXJSONResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXJSONResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetSMSJSON:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetSMSJSON*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetSMSJSON*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetSMSJSONResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetSMSJSONResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetSMSJSONResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetEmailJSON:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetEmailJSON*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetEmailJSON*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetEmailJSONResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetEmailJSONResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetEmailJSONResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetSMSInfoC:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetSMSInfoC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetSMSInfoC*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetSMSInfoCResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetSMSInfoCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetSMSInfoCResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXInfoC:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXInfoC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXInfoC*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXInfoCResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXInfoCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXInfoCResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetEmailInfoC:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetEmailInfoC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetEmailInfoC*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetEmailInfoCResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetEmailInfoCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetEmailInfoCResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetMMSInfoC:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetMMSInfoC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetMMSInfoC*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetMMSInfoCResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetMMSInfoCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetMMSInfoCResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXNotifyC:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXNotifyC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXNotifyC*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SetRTXNotifyCResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SetRTXNotifyCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SetRTXNotifyCResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns4__QueryWandaMsg:
		if (p->size < 0)
			SOAP_DELETE((ns4__QueryWandaMsg*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__QueryWandaMsg*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetRTXInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetRTXInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetSMSInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetSMSInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetSMSInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetEmailInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetEmailInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetEmailInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetMMSInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetMMSInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetMMSInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXNotify:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetRTXNotify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetRTXNotify*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXJSON:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetRTXJSON*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetRTXJSON*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetSMSJSON:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetSMSJSON*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetSMSJSON*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetEmailJSON:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetEmailJSON*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetEmailJSON*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetSMSInfoC:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetSMSInfoC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetSMSInfoC*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXInfoC:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetRTXInfoC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetRTXInfoC*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetEmailInfoC:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetEmailInfoC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetEmailInfoC*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetMMSInfoC:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetMMSInfoC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetMMSInfoC*)p->ptr);
		break;
	case SOAP_TYPE___ns1__SetRTXNotifyC:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__SetRTXNotifyC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__SetRTXNotifyC*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_xsd__ID:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__IDREF:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__duration:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns3__duration:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns3__guid:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__byte
	*a = SOAP_DEFAULT_xsd__byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__byte);
	if (soap_out_xsd__byte(soap, tag?tag:"xsd:byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__char(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__char
	*a = SOAP_DEFAULT_ns3__char;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ns3__char);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns3__char(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_ns3__char);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__char(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__char);
	if (soap_out_ns3__char(soap, tag?tag:"ns3:char", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns3__char(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__char(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedByte
	*a = SOAP_DEFAULT_xsd__unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__guid__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__guid(soap, &this->ns3__guid__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__guid__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_ns3__guid(soap, &this->ns3__guid__::__item);
	/* transient soap skipped */
}

int ns3__guid__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__guid__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid__(struct soap *soap, const char *tag, int id, const ns3__guid__ *a, const char *type)
{
	return soap_out_ns3__guid(soap, tag, id, &(a->ns3__guid__::__item), "ns3:guid");
}

void *ns3__guid__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__guid__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_in_ns3__guid__(struct soap *soap, const char *tag, ns3__guid__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__guid__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__guid__, sizeof(ns3__guid__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__guid__)
			return (ns3__guid__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__guid(soap, tag, &(a->ns3__guid__::__item), "ns3:guid"))
		return NULL;
	return a;
}

int ns3__guid__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__guid__);
	if (this->soap_out(soap, tag?tag:"ns3:guid", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__guid__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__guid__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_get_ns3__guid__(struct soap *soap, ns3__guid__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__guid__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__guid__ * SOAP_FMAC2 soap_instantiate_ns3__guid__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__guid__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__guid__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__guid__);
		if (size)
			*size = sizeof(ns3__guid__);
		((ns3__guid__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns3__guid__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__guid__);
		for (int i = 0; i < n; i++)
			((ns3__guid__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__guid__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__guid__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__guid__ %p -> %p\n", q, p));
	*(ns3__guid__*)p = *(ns3__guid__*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__guid(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__guid(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns3__guid), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__guid(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__guid, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__guid, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns3__guid, 0, sizeof(std::string), 0, soap_copy_ns3__guid);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__guid(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__guid);
	if (soap_out_ns3__guid(soap, tag?tag:"ns3:guid", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__guid(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__guid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__duration(soap, &this->ns3__duration__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_ns3__duration(soap, &this->ns3__duration__::__item);
	/* transient soap skipped */
}

int ns3__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration__(struct soap *soap, const char *tag, int id, const ns3__duration__ *a, const char *type)
{
	return soap_out_ns3__duration(soap, tag, id, &(a->ns3__duration__::__item), "ns3:duration");
}

void *ns3__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__duration__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_in_ns3__duration__(struct soap *soap, const char *tag, ns3__duration__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__duration__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__duration__, sizeof(ns3__duration__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__duration__)
			return (ns3__duration__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__duration(soap, tag, &(a->ns3__duration__::__item), "ns3:duration"))
		return NULL;
	return a;
}

int ns3__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__duration__);
	if (this->soap_out(soap, tag?tag:"ns3:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__duration__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_get_ns3__duration__(struct soap *soap, ns3__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__duration__ * SOAP_FMAC2 soap_instantiate_ns3__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__duration__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__duration__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__duration__);
		if (size)
			*size = sizeof(ns3__duration__);
		((ns3__duration__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns3__duration__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__duration__);
		for (int i = 0; i < n; i++)
			((ns3__duration__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__duration__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__duration__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__duration__ %p -> %p\n", q, p));
	*(ns3__duration__*)p = *(ns3__duration__*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__duration(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns3__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_ns3__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__duration, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns3__duration, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_ns3__duration, 0, sizeof(std::string), 0, soap_copy_ns3__duration);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__duration);
	if (soap_out_ns3__duration(soap, tag?tag:"ns3:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_ns3__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__char__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__char(soap, &this->ns3__char__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__char__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns3__char__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__char__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char__(struct soap *soap, const char *tag, int id, const ns3__char__ *a, const char *type)
{
	return soap_out_ns3__char(soap, tag, id, &(a->ns3__char__::__item), "ns3:char");
}

void *ns3__char__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__char__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_in_ns3__char__(struct soap *soap, const char *tag, ns3__char__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__char__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__char__, sizeof(ns3__char__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__char__)
			return (ns3__char__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__char(soap, tag, &(a->ns3__char__::__item), "ns3:char"))
		return NULL;
	return a;
}

int ns3__char__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__char__);
	if (this->soap_out(soap, tag?tag:"ns3:char", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__char__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__char__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_get_ns3__char__(struct soap *soap, ns3__char__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__char__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__char__ * SOAP_FMAC2 soap_instantiate_ns3__char__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__char__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__char__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__char__);
		if (size)
			*size = sizeof(ns3__char__);
		((ns3__char__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns3__char__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__char__);
		for (int i = 0; i < n; i++)
			((ns3__char__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__char__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__char__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__char__ %p -> %p\n", q, p));
	*(ns3__char__*)p = *(ns3__char__*)q;
}

void ns4__QueryWandaMsg::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns4__QueryWandaMsg::fromSys = NULL;
	this->ns4__QueryWandaMsg::msContent = NULL;
	this->ns4__QueryWandaMsg::msTitle = NULL;
	this->ns4__QueryWandaMsg::priority = NULL;
	this->ns4__QueryWandaMsg::target = NULL;
	this->ns4__QueryWandaMsg::targetTime = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns4__QueryWandaMsg::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns4__QueryWandaMsg::fromSys);
	soap_serialize_PointerTostd__string(soap, &this->ns4__QueryWandaMsg::msContent);
	soap_serialize_PointerTostd__string(soap, &this->ns4__QueryWandaMsg::msTitle);
	soap_serialize_PointerTostd__string(soap, &this->ns4__QueryWandaMsg::priority);
	soap_serialize_PointerTostd__string(soap, &this->ns4__QueryWandaMsg::target);
	soap_serialize_PointerTostd__string(soap, &this->ns4__QueryWandaMsg::targetTime);
	/* transient soap skipped */
}

int ns4__QueryWandaMsg::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__QueryWandaMsg(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__QueryWandaMsg(struct soap *soap, const char *tag, int id, const ns4__QueryWandaMsg *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__QueryWandaMsg), "ns4:QueryWandaMsg"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__string(soap, "ns4:fromSys", -1, &(a->ns4__QueryWandaMsg::fromSys), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:msContent", -1, &(a->ns4__QueryWandaMsg::msContent), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:msTitle", -1, &(a->ns4__QueryWandaMsg::msTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:priority", -1, &(a->ns4__QueryWandaMsg::priority), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:target", -1, &(a->ns4__QueryWandaMsg::target), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns4:targetTime", -1, &(a->ns4__QueryWandaMsg::targetTime), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__QueryWandaMsg::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__QueryWandaMsg(soap, tag, this, type);
}

SOAP_FMAC3 ns4__QueryWandaMsg * SOAP_FMAC4 soap_in_ns4__QueryWandaMsg(struct soap *soap, const char *tag, ns4__QueryWandaMsg *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__QueryWandaMsg *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__QueryWandaMsg, sizeof(ns4__QueryWandaMsg), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__QueryWandaMsg)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__QueryWandaMsg *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_fromSys1 = 1;
	size_t soap_flag_msContent1 = 1;
	size_t soap_flag_msTitle1 = 1;
	size_t soap_flag_priority1 = 1;
	size_t soap_flag_target1 = 1;
	size_t soap_flag_targetTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_fromSys1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:fromSys", &(a->ns4__QueryWandaMsg::fromSys), "xsd:string"))
				{	soap_flag_fromSys1--;
					continue;
				}
			if (soap_flag_msContent1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:msContent", &(a->ns4__QueryWandaMsg::msContent), "xsd:string"))
				{	soap_flag_msContent1--;
					continue;
				}
			if (soap_flag_msTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:msTitle", &(a->ns4__QueryWandaMsg::msTitle), "xsd:string"))
				{	soap_flag_msTitle1--;
					continue;
				}
			if (soap_flag_priority1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:priority", &(a->ns4__QueryWandaMsg::priority), "xsd:string"))
				{	soap_flag_priority1--;
					continue;
				}
			if (soap_flag_target1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:target", &(a->ns4__QueryWandaMsg::target), "xsd:string"))
				{	soap_flag_target1--;
					continue;
				}
			if (soap_flag_targetTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns4:targetTime", &(a->ns4__QueryWandaMsg::targetTime), "xsd:string"))
				{	soap_flag_targetTime1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__QueryWandaMsg *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__QueryWandaMsg, 0, sizeof(ns4__QueryWandaMsg), 0, soap_copy_ns4__QueryWandaMsg);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__QueryWandaMsg::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__QueryWandaMsg);
	if (this->soap_out(soap, tag?tag:"ns4:QueryWandaMsg", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__QueryWandaMsg::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__QueryWandaMsg(soap, this, tag, type);
}

SOAP_FMAC3 ns4__QueryWandaMsg * SOAP_FMAC4 soap_get_ns4__QueryWandaMsg(struct soap *soap, ns4__QueryWandaMsg *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__QueryWandaMsg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__QueryWandaMsg * SOAP_FMAC2 soap_instantiate_ns4__QueryWandaMsg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__QueryWandaMsg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__QueryWandaMsg, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__QueryWandaMsg);
		if (size)
			*size = sizeof(ns4__QueryWandaMsg);
		((ns4__QueryWandaMsg*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns4__QueryWandaMsg[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns4__QueryWandaMsg);
		for (int i = 0; i < n; i++)
			((ns4__QueryWandaMsg*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__QueryWandaMsg*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__QueryWandaMsg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__QueryWandaMsg %p -> %p\n", q, p));
	*(ns4__QueryWandaMsg*)p = *(ns4__QueryWandaMsg*)q;
}

void _ns1__SetRTXNotifyCResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXNotifyCResponse::SetRTXNotifyCResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXNotifyCResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXNotifyCResponse::SetRTXNotifyCResult);
	/* transient soap skipped */
}

int _ns1__SetRTXNotifyCResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXNotifyCResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXNotifyCResponse(struct soap *soap, const char *tag, int id, const _ns1__SetRTXNotifyCResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXNotifyCResponse), type))
		return soap->error;
	if (a->SetRTXNotifyCResult)
		soap_element_result(soap, "ns1:SetRTXNotifyCResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetRTXNotifyCResult", -1, &(a->_ns1__SetRTXNotifyCResponse::SetRTXNotifyCResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXNotifyCResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXNotifyCResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyCResponse * SOAP_FMAC4 soap_in__ns1__SetRTXNotifyCResponse(struct soap *soap, const char *tag, _ns1__SetRTXNotifyCResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXNotifyCResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXNotifyCResponse, sizeof(_ns1__SetRTXNotifyCResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXNotifyCResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXNotifyCResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetRTXNotifyCResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetRTXNotifyCResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetRTXNotifyCResult", &(a->_ns1__SetRTXNotifyCResponse::SetRTXNotifyCResult), "xsd:string"))
				{	soap_flag_SetRTXNotifyCResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetRTXNotifyCResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXNotifyCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXNotifyCResponse, 0, sizeof(_ns1__SetRTXNotifyCResponse), 0, soap_copy__ns1__SetRTXNotifyCResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXNotifyCResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXNotifyCResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXNotifyCResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXNotifyCResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXNotifyCResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyCResponse * SOAP_FMAC4 soap_get__ns1__SetRTXNotifyCResponse(struct soap *soap, _ns1__SetRTXNotifyCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXNotifyCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXNotifyCResponse * SOAP_FMAC2 soap_instantiate__ns1__SetRTXNotifyCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXNotifyCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXNotifyCResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXNotifyCResponse);
		if (size)
			*size = sizeof(_ns1__SetRTXNotifyCResponse);
		((_ns1__SetRTXNotifyCResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXNotifyCResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXNotifyCResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXNotifyCResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXNotifyCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXNotifyCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXNotifyCResponse %p -> %p\n", q, p));
	*(_ns1__SetRTXNotifyCResponse*)p = *(_ns1__SetRTXNotifyCResponse*)q;
}

void _ns1__SetRTXNotifyC::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXNotifyC::fromSys = NULL;
	this->_ns1__SetRTXNotifyC::target = NULL;
	this->_ns1__SetRTXNotifyC::msTitle = NULL;
	this->_ns1__SetRTXNotifyC::msContent = NULL;
	this->_ns1__SetRTXNotifyC::targetTime = NULL;
	this->_ns1__SetRTXNotifyC::priority = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXNotifyC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXNotifyC::fromSys);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXNotifyC::target);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXNotifyC::msTitle);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXNotifyC::msContent);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXNotifyC::targetTime);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXNotifyC::priority);
	/* transient soap skipped */
}

int _ns1__SetRTXNotifyC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXNotifyC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXNotifyC(struct soap *soap, const char *tag, int id, const _ns1__SetRTXNotifyC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXNotifyC), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:fromSys", -1, &(a->_ns1__SetRTXNotifyC::fromSys), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:target", -1, &(a->_ns1__SetRTXNotifyC::target), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msTitle", -1, &(a->_ns1__SetRTXNotifyC::msTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msContent", -1, &(a->_ns1__SetRTXNotifyC::msContent), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:targetTime", -1, &(a->_ns1__SetRTXNotifyC::targetTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:priority", -1, &(a->_ns1__SetRTXNotifyC::priority), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXNotifyC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXNotifyC(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyC * SOAP_FMAC4 soap_in__ns1__SetRTXNotifyC(struct soap *soap, const char *tag, _ns1__SetRTXNotifyC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXNotifyC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXNotifyC, sizeof(_ns1__SetRTXNotifyC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXNotifyC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXNotifyC *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_fromSys1 = 1;
	size_t soap_flag_target1 = 1;
	size_t soap_flag_msTitle1 = 1;
	size_t soap_flag_msContent1 = 1;
	size_t soap_flag_targetTime1 = 1;
	size_t soap_flag_priority1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fromSys1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:fromSys", &(a->_ns1__SetRTXNotifyC::fromSys), "xsd:string"))
				{	soap_flag_fromSys1--;
					continue;
				}
			if (soap_flag_target1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:target", &(a->_ns1__SetRTXNotifyC::target), "xsd:string"))
				{	soap_flag_target1--;
					continue;
				}
			if (soap_flag_msTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msTitle", &(a->_ns1__SetRTXNotifyC::msTitle), "xsd:string"))
				{	soap_flag_msTitle1--;
					continue;
				}
			if (soap_flag_msContent1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msContent", &(a->_ns1__SetRTXNotifyC::msContent), "xsd:string"))
				{	soap_flag_msContent1--;
					continue;
				}
			if (soap_flag_targetTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:targetTime", &(a->_ns1__SetRTXNotifyC::targetTime), "xsd:string"))
				{	soap_flag_targetTime1--;
					continue;
				}
			if (soap_flag_priority1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:priority", &(a->_ns1__SetRTXNotifyC::priority), "xsd:string"))
				{	soap_flag_priority1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXNotifyC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXNotifyC, 0, sizeof(_ns1__SetRTXNotifyC), 0, soap_copy__ns1__SetRTXNotifyC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXNotifyC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXNotifyC);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXNotifyC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXNotifyC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXNotifyC(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyC * SOAP_FMAC4 soap_get__ns1__SetRTXNotifyC(struct soap *soap, _ns1__SetRTXNotifyC *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXNotifyC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXNotifyC * SOAP_FMAC2 soap_instantiate__ns1__SetRTXNotifyC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXNotifyC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXNotifyC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXNotifyC);
		if (size)
			*size = sizeof(_ns1__SetRTXNotifyC);
		((_ns1__SetRTXNotifyC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXNotifyC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXNotifyC);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXNotifyC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXNotifyC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXNotifyC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXNotifyC %p -> %p\n", q, p));
	*(_ns1__SetRTXNotifyC*)p = *(_ns1__SetRTXNotifyC*)q;
}

void _ns1__SetMMSInfoCResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetMMSInfoCResponse::SetMMSInfoCResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetMMSInfoCResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetMMSInfoCResponse::SetMMSInfoCResult);
	/* transient soap skipped */
}

int _ns1__SetMMSInfoCResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetMMSInfoCResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMMSInfoCResponse(struct soap *soap, const char *tag, int id, const _ns1__SetMMSInfoCResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetMMSInfoCResponse), type))
		return soap->error;
	if (a->SetMMSInfoCResult)
		soap_element_result(soap, "ns1:SetMMSInfoCResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetMMSInfoCResult", -1, &(a->_ns1__SetMMSInfoCResponse::SetMMSInfoCResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetMMSInfoCResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetMMSInfoCResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoCResponse * SOAP_FMAC4 soap_in__ns1__SetMMSInfoCResponse(struct soap *soap, const char *tag, _ns1__SetMMSInfoCResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetMMSInfoCResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetMMSInfoCResponse, sizeof(_ns1__SetMMSInfoCResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetMMSInfoCResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetMMSInfoCResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetMMSInfoCResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetMMSInfoCResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetMMSInfoCResult", &(a->_ns1__SetMMSInfoCResponse::SetMMSInfoCResult), "xsd:string"))
				{	soap_flag_SetMMSInfoCResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetMMSInfoCResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetMMSInfoCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetMMSInfoCResponse, 0, sizeof(_ns1__SetMMSInfoCResponse), 0, soap_copy__ns1__SetMMSInfoCResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetMMSInfoCResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetMMSInfoCResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetMMSInfoCResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetMMSInfoCResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetMMSInfoCResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoCResponse * SOAP_FMAC4 soap_get__ns1__SetMMSInfoCResponse(struct soap *soap, _ns1__SetMMSInfoCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetMMSInfoCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetMMSInfoCResponse * SOAP_FMAC2 soap_instantiate__ns1__SetMMSInfoCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetMMSInfoCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetMMSInfoCResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetMMSInfoCResponse);
		if (size)
			*size = sizeof(_ns1__SetMMSInfoCResponse);
		((_ns1__SetMMSInfoCResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetMMSInfoCResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetMMSInfoCResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetMMSInfoCResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetMMSInfoCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetMMSInfoCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetMMSInfoCResponse %p -> %p\n", q, p));
	*(_ns1__SetMMSInfoCResponse*)p = *(_ns1__SetMMSInfoCResponse*)q;
}

void _ns1__SetMMSInfoC::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetMMSInfoC::fromSys = NULL;
	this->_ns1__SetMMSInfoC::target = NULL;
	this->_ns1__SetMMSInfoC::msTitle = NULL;
	this->_ns1__SetMMSInfoC::msContent = NULL;
	this->_ns1__SetMMSInfoC::targetTime = NULL;
	this->_ns1__SetMMSInfoC::priority = NULL;
	/* transient soap skipped */
}

void _ns1__SetMMSInfoC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetMMSInfoC::fromSys);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetMMSInfoC::target);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetMMSInfoC::msTitle);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetMMSInfoC::msContent);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetMMSInfoC::targetTime);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetMMSInfoC::priority);
	/* transient soap skipped */
}

int _ns1__SetMMSInfoC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetMMSInfoC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMMSInfoC(struct soap *soap, const char *tag, int id, const _ns1__SetMMSInfoC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetMMSInfoC), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:fromSys", -1, &(a->_ns1__SetMMSInfoC::fromSys), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:target", -1, &(a->_ns1__SetMMSInfoC::target), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msTitle", -1, &(a->_ns1__SetMMSInfoC::msTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msContent", -1, &(a->_ns1__SetMMSInfoC::msContent), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:targetTime", -1, &(a->_ns1__SetMMSInfoC::targetTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:priority", -1, &(a->_ns1__SetMMSInfoC::priority), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetMMSInfoC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetMMSInfoC(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoC * SOAP_FMAC4 soap_in__ns1__SetMMSInfoC(struct soap *soap, const char *tag, _ns1__SetMMSInfoC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetMMSInfoC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetMMSInfoC, sizeof(_ns1__SetMMSInfoC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetMMSInfoC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetMMSInfoC *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_fromSys1 = 1;
	size_t soap_flag_target1 = 1;
	size_t soap_flag_msTitle1 = 1;
	size_t soap_flag_msContent1 = 1;
	size_t soap_flag_targetTime1 = 1;
	size_t soap_flag_priority1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fromSys1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:fromSys", &(a->_ns1__SetMMSInfoC::fromSys), "xsd:string"))
				{	soap_flag_fromSys1--;
					continue;
				}
			if (soap_flag_target1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:target", &(a->_ns1__SetMMSInfoC::target), "xsd:string"))
				{	soap_flag_target1--;
					continue;
				}
			if (soap_flag_msTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msTitle", &(a->_ns1__SetMMSInfoC::msTitle), "xsd:string"))
				{	soap_flag_msTitle1--;
					continue;
				}
			if (soap_flag_msContent1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msContent", &(a->_ns1__SetMMSInfoC::msContent), "xsd:string"))
				{	soap_flag_msContent1--;
					continue;
				}
			if (soap_flag_targetTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:targetTime", &(a->_ns1__SetMMSInfoC::targetTime), "xsd:string"))
				{	soap_flag_targetTime1--;
					continue;
				}
			if (soap_flag_priority1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:priority", &(a->_ns1__SetMMSInfoC::priority), "xsd:string"))
				{	soap_flag_priority1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetMMSInfoC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetMMSInfoC, 0, sizeof(_ns1__SetMMSInfoC), 0, soap_copy__ns1__SetMMSInfoC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetMMSInfoC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetMMSInfoC);
	if (this->soap_out(soap, tag?tag:"ns1:SetMMSInfoC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetMMSInfoC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetMMSInfoC(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoC * SOAP_FMAC4 soap_get__ns1__SetMMSInfoC(struct soap *soap, _ns1__SetMMSInfoC *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetMMSInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetMMSInfoC * SOAP_FMAC2 soap_instantiate__ns1__SetMMSInfoC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetMMSInfoC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetMMSInfoC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetMMSInfoC);
		if (size)
			*size = sizeof(_ns1__SetMMSInfoC);
		((_ns1__SetMMSInfoC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetMMSInfoC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetMMSInfoC);
		for (int i = 0; i < n; i++)
			((_ns1__SetMMSInfoC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetMMSInfoC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetMMSInfoC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetMMSInfoC %p -> %p\n", q, p));
	*(_ns1__SetMMSInfoC*)p = *(_ns1__SetMMSInfoC*)q;
}

void _ns1__SetEmailInfoCResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetEmailInfoCResponse::SetEmailInfoCResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetEmailInfoCResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailInfoCResponse::SetEmailInfoCResult);
	/* transient soap skipped */
}

int _ns1__SetEmailInfoCResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetEmailInfoCResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEmailInfoCResponse(struct soap *soap, const char *tag, int id, const _ns1__SetEmailInfoCResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetEmailInfoCResponse), type))
		return soap->error;
	if (a->SetEmailInfoCResult)
		soap_element_result(soap, "ns1:SetEmailInfoCResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetEmailInfoCResult", -1, &(a->_ns1__SetEmailInfoCResponse::SetEmailInfoCResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetEmailInfoCResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetEmailInfoCResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoCResponse * SOAP_FMAC4 soap_in__ns1__SetEmailInfoCResponse(struct soap *soap, const char *tag, _ns1__SetEmailInfoCResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetEmailInfoCResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetEmailInfoCResponse, sizeof(_ns1__SetEmailInfoCResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetEmailInfoCResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetEmailInfoCResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetEmailInfoCResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetEmailInfoCResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetEmailInfoCResult", &(a->_ns1__SetEmailInfoCResponse::SetEmailInfoCResult), "xsd:string"))
				{	soap_flag_SetEmailInfoCResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetEmailInfoCResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetEmailInfoCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetEmailInfoCResponse, 0, sizeof(_ns1__SetEmailInfoCResponse), 0, soap_copy__ns1__SetEmailInfoCResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetEmailInfoCResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetEmailInfoCResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetEmailInfoCResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetEmailInfoCResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetEmailInfoCResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoCResponse * SOAP_FMAC4 soap_get__ns1__SetEmailInfoCResponse(struct soap *soap, _ns1__SetEmailInfoCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetEmailInfoCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetEmailInfoCResponse * SOAP_FMAC2 soap_instantiate__ns1__SetEmailInfoCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetEmailInfoCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetEmailInfoCResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailInfoCResponse);
		if (size)
			*size = sizeof(_ns1__SetEmailInfoCResponse);
		((_ns1__SetEmailInfoCResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailInfoCResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetEmailInfoCResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetEmailInfoCResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetEmailInfoCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetEmailInfoCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetEmailInfoCResponse %p -> %p\n", q, p));
	*(_ns1__SetEmailInfoCResponse*)p = *(_ns1__SetEmailInfoCResponse*)q;
}

void _ns1__SetEmailInfoC::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetEmailInfoC::fromSys = NULL;
	this->_ns1__SetEmailInfoC::target = NULL;
	this->_ns1__SetEmailInfoC::msTitle = NULL;
	this->_ns1__SetEmailInfoC::msContent = NULL;
	this->_ns1__SetEmailInfoC::targetTime = NULL;
	this->_ns1__SetEmailInfoC::priority = NULL;
	/* transient soap skipped */
}

void _ns1__SetEmailInfoC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailInfoC::fromSys);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailInfoC::target);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailInfoC::msTitle);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailInfoC::msContent);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailInfoC::targetTime);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailInfoC::priority);
	/* transient soap skipped */
}

int _ns1__SetEmailInfoC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetEmailInfoC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEmailInfoC(struct soap *soap, const char *tag, int id, const _ns1__SetEmailInfoC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetEmailInfoC), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:fromSys", -1, &(a->_ns1__SetEmailInfoC::fromSys), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:target", -1, &(a->_ns1__SetEmailInfoC::target), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msTitle", -1, &(a->_ns1__SetEmailInfoC::msTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msContent", -1, &(a->_ns1__SetEmailInfoC::msContent), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:targetTime", -1, &(a->_ns1__SetEmailInfoC::targetTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:priority", -1, &(a->_ns1__SetEmailInfoC::priority), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetEmailInfoC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetEmailInfoC(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoC * SOAP_FMAC4 soap_in__ns1__SetEmailInfoC(struct soap *soap, const char *tag, _ns1__SetEmailInfoC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetEmailInfoC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetEmailInfoC, sizeof(_ns1__SetEmailInfoC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetEmailInfoC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetEmailInfoC *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_fromSys1 = 1;
	size_t soap_flag_target1 = 1;
	size_t soap_flag_msTitle1 = 1;
	size_t soap_flag_msContent1 = 1;
	size_t soap_flag_targetTime1 = 1;
	size_t soap_flag_priority1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fromSys1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:fromSys", &(a->_ns1__SetEmailInfoC::fromSys), "xsd:string"))
				{	soap_flag_fromSys1--;
					continue;
				}
			if (soap_flag_target1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:target", &(a->_ns1__SetEmailInfoC::target), "xsd:string"))
				{	soap_flag_target1--;
					continue;
				}
			if (soap_flag_msTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msTitle", &(a->_ns1__SetEmailInfoC::msTitle), "xsd:string"))
				{	soap_flag_msTitle1--;
					continue;
				}
			if (soap_flag_msContent1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msContent", &(a->_ns1__SetEmailInfoC::msContent), "xsd:string"))
				{	soap_flag_msContent1--;
					continue;
				}
			if (soap_flag_targetTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:targetTime", &(a->_ns1__SetEmailInfoC::targetTime), "xsd:string"))
				{	soap_flag_targetTime1--;
					continue;
				}
			if (soap_flag_priority1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:priority", &(a->_ns1__SetEmailInfoC::priority), "xsd:string"))
				{	soap_flag_priority1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetEmailInfoC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetEmailInfoC, 0, sizeof(_ns1__SetEmailInfoC), 0, soap_copy__ns1__SetEmailInfoC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetEmailInfoC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetEmailInfoC);
	if (this->soap_out(soap, tag?tag:"ns1:SetEmailInfoC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetEmailInfoC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetEmailInfoC(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoC * SOAP_FMAC4 soap_get__ns1__SetEmailInfoC(struct soap *soap, _ns1__SetEmailInfoC *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetEmailInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetEmailInfoC * SOAP_FMAC2 soap_instantiate__ns1__SetEmailInfoC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetEmailInfoC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetEmailInfoC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailInfoC);
		if (size)
			*size = sizeof(_ns1__SetEmailInfoC);
		((_ns1__SetEmailInfoC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailInfoC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetEmailInfoC);
		for (int i = 0; i < n; i++)
			((_ns1__SetEmailInfoC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetEmailInfoC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetEmailInfoC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetEmailInfoC %p -> %p\n", q, p));
	*(_ns1__SetEmailInfoC*)p = *(_ns1__SetEmailInfoC*)q;
}

void _ns1__SetRTXInfoCResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXInfoCResponse::SetRTXInfoCResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXInfoCResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXInfoCResponse::SetRTXInfoCResult);
	/* transient soap skipped */
}

int _ns1__SetRTXInfoCResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXInfoCResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXInfoCResponse(struct soap *soap, const char *tag, int id, const _ns1__SetRTXInfoCResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXInfoCResponse), type))
		return soap->error;
	if (a->SetRTXInfoCResult)
		soap_element_result(soap, "ns1:SetRTXInfoCResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetRTXInfoCResult", -1, &(a->_ns1__SetRTXInfoCResponse::SetRTXInfoCResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXInfoCResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXInfoCResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoCResponse * SOAP_FMAC4 soap_in__ns1__SetRTXInfoCResponse(struct soap *soap, const char *tag, _ns1__SetRTXInfoCResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXInfoCResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXInfoCResponse, sizeof(_ns1__SetRTXInfoCResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXInfoCResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXInfoCResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetRTXInfoCResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetRTXInfoCResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetRTXInfoCResult", &(a->_ns1__SetRTXInfoCResponse::SetRTXInfoCResult), "xsd:string"))
				{	soap_flag_SetRTXInfoCResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetRTXInfoCResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXInfoCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXInfoCResponse, 0, sizeof(_ns1__SetRTXInfoCResponse), 0, soap_copy__ns1__SetRTXInfoCResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXInfoCResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXInfoCResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXInfoCResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXInfoCResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXInfoCResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoCResponse * SOAP_FMAC4 soap_get__ns1__SetRTXInfoCResponse(struct soap *soap, _ns1__SetRTXInfoCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXInfoCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXInfoCResponse * SOAP_FMAC2 soap_instantiate__ns1__SetRTXInfoCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXInfoCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXInfoCResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXInfoCResponse);
		if (size)
			*size = sizeof(_ns1__SetRTXInfoCResponse);
		((_ns1__SetRTXInfoCResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXInfoCResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXInfoCResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXInfoCResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXInfoCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXInfoCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXInfoCResponse %p -> %p\n", q, p));
	*(_ns1__SetRTXInfoCResponse*)p = *(_ns1__SetRTXInfoCResponse*)q;
}

void _ns1__SetRTXInfoC::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXInfoC::fromSys = NULL;
	this->_ns1__SetRTXInfoC::target = NULL;
	this->_ns1__SetRTXInfoC::msTitle = NULL;
	this->_ns1__SetRTXInfoC::msContent = NULL;
	this->_ns1__SetRTXInfoC::targetTime = NULL;
	this->_ns1__SetRTXInfoC::priority = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXInfoC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXInfoC::fromSys);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXInfoC::target);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXInfoC::msTitle);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXInfoC::msContent);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXInfoC::targetTime);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXInfoC::priority);
	/* transient soap skipped */
}

int _ns1__SetRTXInfoC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXInfoC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXInfoC(struct soap *soap, const char *tag, int id, const _ns1__SetRTXInfoC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXInfoC), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:fromSys", -1, &(a->_ns1__SetRTXInfoC::fromSys), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:target", -1, &(a->_ns1__SetRTXInfoC::target), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msTitle", -1, &(a->_ns1__SetRTXInfoC::msTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msContent", -1, &(a->_ns1__SetRTXInfoC::msContent), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:targetTime", -1, &(a->_ns1__SetRTXInfoC::targetTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:priority", -1, &(a->_ns1__SetRTXInfoC::priority), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXInfoC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXInfoC(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoC * SOAP_FMAC4 soap_in__ns1__SetRTXInfoC(struct soap *soap, const char *tag, _ns1__SetRTXInfoC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXInfoC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXInfoC, sizeof(_ns1__SetRTXInfoC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXInfoC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXInfoC *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_fromSys1 = 1;
	size_t soap_flag_target1 = 1;
	size_t soap_flag_msTitle1 = 1;
	size_t soap_flag_msContent1 = 1;
	size_t soap_flag_targetTime1 = 1;
	size_t soap_flag_priority1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fromSys1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:fromSys", &(a->_ns1__SetRTXInfoC::fromSys), "xsd:string"))
				{	soap_flag_fromSys1--;
					continue;
				}
			if (soap_flag_target1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:target", &(a->_ns1__SetRTXInfoC::target), "xsd:string"))
				{	soap_flag_target1--;
					continue;
				}
			if (soap_flag_msTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msTitle", &(a->_ns1__SetRTXInfoC::msTitle), "xsd:string"))
				{	soap_flag_msTitle1--;
					continue;
				}
			if (soap_flag_msContent1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msContent", &(a->_ns1__SetRTXInfoC::msContent), "xsd:string"))
				{	soap_flag_msContent1--;
					continue;
				}
			if (soap_flag_targetTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:targetTime", &(a->_ns1__SetRTXInfoC::targetTime), "xsd:string"))
				{	soap_flag_targetTime1--;
					continue;
				}
			if (soap_flag_priority1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:priority", &(a->_ns1__SetRTXInfoC::priority), "xsd:string"))
				{	soap_flag_priority1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXInfoC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXInfoC, 0, sizeof(_ns1__SetRTXInfoC), 0, soap_copy__ns1__SetRTXInfoC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXInfoC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXInfoC);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXInfoC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXInfoC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXInfoC(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoC * SOAP_FMAC4 soap_get__ns1__SetRTXInfoC(struct soap *soap, _ns1__SetRTXInfoC *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXInfoC * SOAP_FMAC2 soap_instantiate__ns1__SetRTXInfoC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXInfoC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXInfoC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXInfoC);
		if (size)
			*size = sizeof(_ns1__SetRTXInfoC);
		((_ns1__SetRTXInfoC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXInfoC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXInfoC);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXInfoC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXInfoC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXInfoC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXInfoC %p -> %p\n", q, p));
	*(_ns1__SetRTXInfoC*)p = *(_ns1__SetRTXInfoC*)q;
}

void _ns1__SetSMSInfoCResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetSMSInfoCResponse::SetSMSInfoCResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetSMSInfoCResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSInfoCResponse::SetSMSInfoCResult);
	/* transient soap skipped */
}

int _ns1__SetSMSInfoCResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSMSInfoCResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSMSInfoCResponse(struct soap *soap, const char *tag, int id, const _ns1__SetSMSInfoCResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSMSInfoCResponse), type))
		return soap->error;
	if (a->SetSMSInfoCResult)
		soap_element_result(soap, "ns1:SetSMSInfoCResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetSMSInfoCResult", -1, &(a->_ns1__SetSMSInfoCResponse::SetSMSInfoCResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSMSInfoCResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSMSInfoCResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoCResponse * SOAP_FMAC4 soap_in__ns1__SetSMSInfoCResponse(struct soap *soap, const char *tag, _ns1__SetSMSInfoCResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSMSInfoCResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSMSInfoCResponse, sizeof(_ns1__SetSMSInfoCResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSMSInfoCResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSMSInfoCResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetSMSInfoCResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetSMSInfoCResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetSMSInfoCResult", &(a->_ns1__SetSMSInfoCResponse::SetSMSInfoCResult), "xsd:string"))
				{	soap_flag_SetSMSInfoCResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetSMSInfoCResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSMSInfoCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSMSInfoCResponse, 0, sizeof(_ns1__SetSMSInfoCResponse), 0, soap_copy__ns1__SetSMSInfoCResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSMSInfoCResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetSMSInfoCResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetSMSInfoCResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSMSInfoCResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSMSInfoCResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoCResponse * SOAP_FMAC4 soap_get__ns1__SetSMSInfoCResponse(struct soap *soap, _ns1__SetSMSInfoCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSMSInfoCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSMSInfoCResponse * SOAP_FMAC2 soap_instantiate__ns1__SetSMSInfoCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSMSInfoCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSMSInfoCResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSInfoCResponse);
		if (size)
			*size = sizeof(_ns1__SetSMSInfoCResponse);
		((_ns1__SetSMSInfoCResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSInfoCResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetSMSInfoCResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetSMSInfoCResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetSMSInfoCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSMSInfoCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSMSInfoCResponse %p -> %p\n", q, p));
	*(_ns1__SetSMSInfoCResponse*)p = *(_ns1__SetSMSInfoCResponse*)q;
}

void _ns1__SetSMSInfoC::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetSMSInfoC::fromSys = NULL;
	this->_ns1__SetSMSInfoC::target = NULL;
	this->_ns1__SetSMSInfoC::msTitle = NULL;
	this->_ns1__SetSMSInfoC::msContent = NULL;
	this->_ns1__SetSMSInfoC::targetTime = NULL;
	this->_ns1__SetSMSInfoC::priority = NULL;
	/* transient soap skipped */
}

void _ns1__SetSMSInfoC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSInfoC::fromSys);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSInfoC::target);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSInfoC::msTitle);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSInfoC::msContent);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSInfoC::targetTime);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSInfoC::priority);
	/* transient soap skipped */
}

int _ns1__SetSMSInfoC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSMSInfoC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSMSInfoC(struct soap *soap, const char *tag, int id, const _ns1__SetSMSInfoC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSMSInfoC), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:fromSys", -1, &(a->_ns1__SetSMSInfoC::fromSys), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:target", -1, &(a->_ns1__SetSMSInfoC::target), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msTitle", -1, &(a->_ns1__SetSMSInfoC::msTitle), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:msContent", -1, &(a->_ns1__SetSMSInfoC::msContent), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:targetTime", -1, &(a->_ns1__SetSMSInfoC::targetTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:priority", -1, &(a->_ns1__SetSMSInfoC::priority), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSMSInfoC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSMSInfoC(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoC * SOAP_FMAC4 soap_in__ns1__SetSMSInfoC(struct soap *soap, const char *tag, _ns1__SetSMSInfoC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSMSInfoC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSMSInfoC, sizeof(_ns1__SetSMSInfoC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSMSInfoC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSMSInfoC *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_fromSys1 = 1;
	size_t soap_flag_target1 = 1;
	size_t soap_flag_msTitle1 = 1;
	size_t soap_flag_msContent1 = 1;
	size_t soap_flag_targetTime1 = 1;
	size_t soap_flag_priority1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fromSys1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:fromSys", &(a->_ns1__SetSMSInfoC::fromSys), "xsd:string"))
				{	soap_flag_fromSys1--;
					continue;
				}
			if (soap_flag_target1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:target", &(a->_ns1__SetSMSInfoC::target), "xsd:string"))
				{	soap_flag_target1--;
					continue;
				}
			if (soap_flag_msTitle1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msTitle", &(a->_ns1__SetSMSInfoC::msTitle), "xsd:string"))
				{	soap_flag_msTitle1--;
					continue;
				}
			if (soap_flag_msContent1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:msContent", &(a->_ns1__SetSMSInfoC::msContent), "xsd:string"))
				{	soap_flag_msContent1--;
					continue;
				}
			if (soap_flag_targetTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:targetTime", &(a->_ns1__SetSMSInfoC::targetTime), "xsd:string"))
				{	soap_flag_targetTime1--;
					continue;
				}
			if (soap_flag_priority1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:priority", &(a->_ns1__SetSMSInfoC::priority), "xsd:string"))
				{	soap_flag_priority1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSMSInfoC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSMSInfoC, 0, sizeof(_ns1__SetSMSInfoC), 0, soap_copy__ns1__SetSMSInfoC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSMSInfoC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetSMSInfoC);
	if (this->soap_out(soap, tag?tag:"ns1:SetSMSInfoC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSMSInfoC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSMSInfoC(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoC * SOAP_FMAC4 soap_get__ns1__SetSMSInfoC(struct soap *soap, _ns1__SetSMSInfoC *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSMSInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSMSInfoC * SOAP_FMAC2 soap_instantiate__ns1__SetSMSInfoC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSMSInfoC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSMSInfoC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSInfoC);
		if (size)
			*size = sizeof(_ns1__SetSMSInfoC);
		((_ns1__SetSMSInfoC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSInfoC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetSMSInfoC);
		for (int i = 0; i < n; i++)
			((_ns1__SetSMSInfoC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetSMSInfoC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSMSInfoC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSMSInfoC %p -> %p\n", q, p));
	*(_ns1__SetSMSInfoC*)p = *(_ns1__SetSMSInfoC*)q;
}

void _ns1__SetEmailJSONResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetEmailJSONResponse::SetEmailJSONResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetEmailJSONResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailJSONResponse::SetEmailJSONResult);
	/* transient soap skipped */
}

int _ns1__SetEmailJSONResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetEmailJSONResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEmailJSONResponse(struct soap *soap, const char *tag, int id, const _ns1__SetEmailJSONResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetEmailJSONResponse), type))
		return soap->error;
	if (a->SetEmailJSONResult)
		soap_element_result(soap, "ns1:SetEmailJSONResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetEmailJSONResult", -1, &(a->_ns1__SetEmailJSONResponse::SetEmailJSONResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetEmailJSONResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetEmailJSONResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetEmailJSONResponse * SOAP_FMAC4 soap_in__ns1__SetEmailJSONResponse(struct soap *soap, const char *tag, _ns1__SetEmailJSONResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetEmailJSONResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetEmailJSONResponse, sizeof(_ns1__SetEmailJSONResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetEmailJSONResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetEmailJSONResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetEmailJSONResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetEmailJSONResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetEmailJSONResult", &(a->_ns1__SetEmailJSONResponse::SetEmailJSONResult), "xsd:string"))
				{	soap_flag_SetEmailJSONResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetEmailJSONResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetEmailJSONResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetEmailJSONResponse, 0, sizeof(_ns1__SetEmailJSONResponse), 0, soap_copy__ns1__SetEmailJSONResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetEmailJSONResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetEmailJSONResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetEmailJSONResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetEmailJSONResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetEmailJSONResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetEmailJSONResponse * SOAP_FMAC4 soap_get__ns1__SetEmailJSONResponse(struct soap *soap, _ns1__SetEmailJSONResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetEmailJSONResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetEmailJSONResponse * SOAP_FMAC2 soap_instantiate__ns1__SetEmailJSONResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetEmailJSONResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetEmailJSONResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailJSONResponse);
		if (size)
			*size = sizeof(_ns1__SetEmailJSONResponse);
		((_ns1__SetEmailJSONResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailJSONResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetEmailJSONResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetEmailJSONResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetEmailJSONResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetEmailJSONResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetEmailJSONResponse %p -> %p\n", q, p));
	*(_ns1__SetEmailJSONResponse*)p = *(_ns1__SetEmailJSONResponse*)q;
}

void _ns1__SetEmailJSON::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetEmailJSON::infoJson = NULL;
	/* transient soap skipped */
}

void _ns1__SetEmailJSON::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailJSON::infoJson);
	/* transient soap skipped */
}

int _ns1__SetEmailJSON::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetEmailJSON(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEmailJSON(struct soap *soap, const char *tag, int id, const _ns1__SetEmailJSON *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetEmailJSON), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:infoJson", -1, &(a->_ns1__SetEmailJSON::infoJson), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetEmailJSON::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetEmailJSON(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetEmailJSON * SOAP_FMAC4 soap_in__ns1__SetEmailJSON(struct soap *soap, const char *tag, _ns1__SetEmailJSON *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetEmailJSON *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetEmailJSON, sizeof(_ns1__SetEmailJSON), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetEmailJSON)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetEmailJSON *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoJson1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoJson1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:infoJson", &(a->_ns1__SetEmailJSON::infoJson), "xsd:string"))
				{	soap_flag_infoJson1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetEmailJSON *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetEmailJSON, 0, sizeof(_ns1__SetEmailJSON), 0, soap_copy__ns1__SetEmailJSON);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetEmailJSON::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetEmailJSON);
	if (this->soap_out(soap, tag?tag:"ns1:SetEmailJSON", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetEmailJSON::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetEmailJSON(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetEmailJSON * SOAP_FMAC4 soap_get__ns1__SetEmailJSON(struct soap *soap, _ns1__SetEmailJSON *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetEmailJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetEmailJSON * SOAP_FMAC2 soap_instantiate__ns1__SetEmailJSON(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetEmailJSON(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetEmailJSON, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailJSON);
		if (size)
			*size = sizeof(_ns1__SetEmailJSON);
		((_ns1__SetEmailJSON*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailJSON[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetEmailJSON);
		for (int i = 0; i < n; i++)
			((_ns1__SetEmailJSON*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetEmailJSON*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetEmailJSON(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetEmailJSON %p -> %p\n", q, p));
	*(_ns1__SetEmailJSON*)p = *(_ns1__SetEmailJSON*)q;
}

void _ns1__SetSMSJSONResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetSMSJSONResponse::SetSMSJSONResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetSMSJSONResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSJSONResponse::SetSMSJSONResult);
	/* transient soap skipped */
}

int _ns1__SetSMSJSONResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSMSJSONResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSMSJSONResponse(struct soap *soap, const char *tag, int id, const _ns1__SetSMSJSONResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSMSJSONResponse), type))
		return soap->error;
	if (a->SetSMSJSONResult)
		soap_element_result(soap, "ns1:SetSMSJSONResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetSMSJSONResult", -1, &(a->_ns1__SetSMSJSONResponse::SetSMSJSONResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSMSJSONResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSMSJSONResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSMSJSONResponse * SOAP_FMAC4 soap_in__ns1__SetSMSJSONResponse(struct soap *soap, const char *tag, _ns1__SetSMSJSONResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSMSJSONResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSMSJSONResponse, sizeof(_ns1__SetSMSJSONResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSMSJSONResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSMSJSONResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetSMSJSONResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetSMSJSONResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetSMSJSONResult", &(a->_ns1__SetSMSJSONResponse::SetSMSJSONResult), "xsd:string"))
				{	soap_flag_SetSMSJSONResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetSMSJSONResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSMSJSONResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSMSJSONResponse, 0, sizeof(_ns1__SetSMSJSONResponse), 0, soap_copy__ns1__SetSMSJSONResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSMSJSONResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetSMSJSONResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetSMSJSONResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSMSJSONResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSMSJSONResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSMSJSONResponse * SOAP_FMAC4 soap_get__ns1__SetSMSJSONResponse(struct soap *soap, _ns1__SetSMSJSONResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSMSJSONResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSMSJSONResponse * SOAP_FMAC2 soap_instantiate__ns1__SetSMSJSONResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSMSJSONResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSMSJSONResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSJSONResponse);
		if (size)
			*size = sizeof(_ns1__SetSMSJSONResponse);
		((_ns1__SetSMSJSONResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSJSONResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetSMSJSONResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetSMSJSONResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetSMSJSONResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSMSJSONResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSMSJSONResponse %p -> %p\n", q, p));
	*(_ns1__SetSMSJSONResponse*)p = *(_ns1__SetSMSJSONResponse*)q;
}

void _ns1__SetSMSJSON::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetSMSJSON::infoJson = NULL;
	/* transient soap skipped */
}

void _ns1__SetSMSJSON::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSJSON::infoJson);
	/* transient soap skipped */
}

int _ns1__SetSMSJSON::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSMSJSON(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSMSJSON(struct soap *soap, const char *tag, int id, const _ns1__SetSMSJSON *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSMSJSON), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:infoJson", -1, &(a->_ns1__SetSMSJSON::infoJson), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSMSJSON::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSMSJSON(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSMSJSON * SOAP_FMAC4 soap_in__ns1__SetSMSJSON(struct soap *soap, const char *tag, _ns1__SetSMSJSON *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSMSJSON *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSMSJSON, sizeof(_ns1__SetSMSJSON), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSMSJSON)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSMSJSON *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoJson1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoJson1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:infoJson", &(a->_ns1__SetSMSJSON::infoJson), "xsd:string"))
				{	soap_flag_infoJson1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSMSJSON *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSMSJSON, 0, sizeof(_ns1__SetSMSJSON), 0, soap_copy__ns1__SetSMSJSON);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSMSJSON::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetSMSJSON);
	if (this->soap_out(soap, tag?tag:"ns1:SetSMSJSON", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSMSJSON::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSMSJSON(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSMSJSON * SOAP_FMAC4 soap_get__ns1__SetSMSJSON(struct soap *soap, _ns1__SetSMSJSON *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSMSJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSMSJSON * SOAP_FMAC2 soap_instantiate__ns1__SetSMSJSON(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSMSJSON(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSMSJSON, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSJSON);
		if (size)
			*size = sizeof(_ns1__SetSMSJSON);
		((_ns1__SetSMSJSON*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSJSON[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetSMSJSON);
		for (int i = 0; i < n; i++)
			((_ns1__SetSMSJSON*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetSMSJSON*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSMSJSON(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSMSJSON %p -> %p\n", q, p));
	*(_ns1__SetSMSJSON*)p = *(_ns1__SetSMSJSON*)q;
}

void _ns1__SetRTXJSONResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXJSONResponse::SetRTXJSONResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXJSONResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXJSONResponse::SetRTXJSONResult);
	/* transient soap skipped */
}

int _ns1__SetRTXJSONResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXJSONResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXJSONResponse(struct soap *soap, const char *tag, int id, const _ns1__SetRTXJSONResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXJSONResponse), type))
		return soap->error;
	if (a->SetRTXJSONResult)
		soap_element_result(soap, "ns1:SetRTXJSONResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetRTXJSONResult", -1, &(a->_ns1__SetRTXJSONResponse::SetRTXJSONResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXJSONResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXJSONResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXJSONResponse * SOAP_FMAC4 soap_in__ns1__SetRTXJSONResponse(struct soap *soap, const char *tag, _ns1__SetRTXJSONResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXJSONResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXJSONResponse, sizeof(_ns1__SetRTXJSONResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXJSONResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXJSONResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetRTXJSONResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetRTXJSONResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetRTXJSONResult", &(a->_ns1__SetRTXJSONResponse::SetRTXJSONResult), "xsd:string"))
				{	soap_flag_SetRTXJSONResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetRTXJSONResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXJSONResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXJSONResponse, 0, sizeof(_ns1__SetRTXJSONResponse), 0, soap_copy__ns1__SetRTXJSONResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXJSONResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXJSONResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXJSONResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXJSONResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXJSONResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXJSONResponse * SOAP_FMAC4 soap_get__ns1__SetRTXJSONResponse(struct soap *soap, _ns1__SetRTXJSONResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXJSONResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXJSONResponse * SOAP_FMAC2 soap_instantiate__ns1__SetRTXJSONResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXJSONResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXJSONResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXJSONResponse);
		if (size)
			*size = sizeof(_ns1__SetRTXJSONResponse);
		((_ns1__SetRTXJSONResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXJSONResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXJSONResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXJSONResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXJSONResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXJSONResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXJSONResponse %p -> %p\n", q, p));
	*(_ns1__SetRTXJSONResponse*)p = *(_ns1__SetRTXJSONResponse*)q;
}

void _ns1__SetRTXJSON::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXJSON::infoJson = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXJSON::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXJSON::infoJson);
	/* transient soap skipped */
}

int _ns1__SetRTXJSON::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXJSON(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXJSON(struct soap *soap, const char *tag, int id, const _ns1__SetRTXJSON *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXJSON), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:infoJson", -1, &(a->_ns1__SetRTXJSON::infoJson), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXJSON::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXJSON(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXJSON * SOAP_FMAC4 soap_in__ns1__SetRTXJSON(struct soap *soap, const char *tag, _ns1__SetRTXJSON *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXJSON *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXJSON, sizeof(_ns1__SetRTXJSON), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXJSON)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXJSON *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_infoJson1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_infoJson1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:infoJson", &(a->_ns1__SetRTXJSON::infoJson), "xsd:string"))
				{	soap_flag_infoJson1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXJSON *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXJSON, 0, sizeof(_ns1__SetRTXJSON), 0, soap_copy__ns1__SetRTXJSON);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXJSON::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXJSON);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXJSON", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXJSON::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXJSON(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXJSON * SOAP_FMAC4 soap_get__ns1__SetRTXJSON(struct soap *soap, _ns1__SetRTXJSON *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXJSON * SOAP_FMAC2 soap_instantiate__ns1__SetRTXJSON(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXJSON(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXJSON, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXJSON);
		if (size)
			*size = sizeof(_ns1__SetRTXJSON);
		((_ns1__SetRTXJSON*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXJSON[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXJSON);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXJSON*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXJSON*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXJSON(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXJSON %p -> %p\n", q, p));
	*(_ns1__SetRTXJSON*)p = *(_ns1__SetRTXJSON*)q;
}

void _ns1__SetRTXNotifyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXNotifyResponse::SetRTXNotifyResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXNotifyResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXNotifyResponse::SetRTXNotifyResult);
	/* transient soap skipped */
}

int _ns1__SetRTXNotifyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXNotifyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXNotifyResponse(struct soap *soap, const char *tag, int id, const _ns1__SetRTXNotifyResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXNotifyResponse), type))
		return soap->error;
	if (a->SetRTXNotifyResult)
		soap_element_result(soap, "ns1:SetRTXNotifyResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetRTXNotifyResult", -1, &(a->_ns1__SetRTXNotifyResponse::SetRTXNotifyResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXNotifyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXNotifyResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyResponse * SOAP_FMAC4 soap_in__ns1__SetRTXNotifyResponse(struct soap *soap, const char *tag, _ns1__SetRTXNotifyResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXNotifyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXNotifyResponse, sizeof(_ns1__SetRTXNotifyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXNotifyResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXNotifyResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetRTXNotifyResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetRTXNotifyResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetRTXNotifyResult", &(a->_ns1__SetRTXNotifyResponse::SetRTXNotifyResult), "xsd:string"))
				{	soap_flag_SetRTXNotifyResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetRTXNotifyResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXNotifyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXNotifyResponse, 0, sizeof(_ns1__SetRTXNotifyResponse), 0, soap_copy__ns1__SetRTXNotifyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXNotifyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXNotifyResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXNotifyResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXNotifyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXNotifyResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyResponse * SOAP_FMAC4 soap_get__ns1__SetRTXNotifyResponse(struct soap *soap, _ns1__SetRTXNotifyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXNotifyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXNotifyResponse * SOAP_FMAC2 soap_instantiate__ns1__SetRTXNotifyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXNotifyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXNotifyResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXNotifyResponse);
		if (size)
			*size = sizeof(_ns1__SetRTXNotifyResponse);
		((_ns1__SetRTXNotifyResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXNotifyResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXNotifyResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXNotifyResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXNotifyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXNotifyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXNotifyResponse %p -> %p\n", q, p));
	*(_ns1__SetRTXNotifyResponse*)p = *(_ns1__SetRTXNotifyResponse*)q;
}

void _ns1__SetRTXNotify::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXNotify::query = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXNotify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__QueryWandaMsg(soap, &this->_ns1__SetRTXNotify::query);
	/* transient soap skipped */
}

int _ns1__SetRTXNotify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXNotify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXNotify(struct soap *soap, const char *tag, int id, const _ns1__SetRTXNotify *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXNotify), type))
		return soap->error;
	if (soap_out_PointerTons4__QueryWandaMsg(soap, "ns1:query", -1, &(a->_ns1__SetRTXNotify::query), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXNotify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXNotify(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXNotify * SOAP_FMAC4 soap_in__ns1__SetRTXNotify(struct soap *soap, const char *tag, _ns1__SetRTXNotify *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXNotify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXNotify, sizeof(_ns1__SetRTXNotify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXNotify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXNotify *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_query1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_query1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__QueryWandaMsg(soap, "ns1:query", &(a->_ns1__SetRTXNotify::query), "ns4:QueryWandaMsg"))
				{	soap_flag_query1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXNotify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXNotify, 0, sizeof(_ns1__SetRTXNotify), 0, soap_copy__ns1__SetRTXNotify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXNotify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXNotify);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXNotify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXNotify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXNotify(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXNotify * SOAP_FMAC4 soap_get__ns1__SetRTXNotify(struct soap *soap, _ns1__SetRTXNotify *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXNotify * SOAP_FMAC2 soap_instantiate__ns1__SetRTXNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXNotify);
		if (size)
			*size = sizeof(_ns1__SetRTXNotify);
		((_ns1__SetRTXNotify*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXNotify[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXNotify);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXNotify*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXNotify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXNotify %p -> %p\n", q, p));
	*(_ns1__SetRTXNotify*)p = *(_ns1__SetRTXNotify*)q;
}

void _ns1__SetMMSInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetMMSInfoResponse::SetMMSInfoResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetMMSInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetMMSInfoResponse::SetMMSInfoResult);
	/* transient soap skipped */
}

int _ns1__SetMMSInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetMMSInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMMSInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__SetMMSInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetMMSInfoResponse), type))
		return soap->error;
	if (a->SetMMSInfoResult)
		soap_element_result(soap, "ns1:SetMMSInfoResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetMMSInfoResult", -1, &(a->_ns1__SetMMSInfoResponse::SetMMSInfoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetMMSInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetMMSInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoResponse * SOAP_FMAC4 soap_in__ns1__SetMMSInfoResponse(struct soap *soap, const char *tag, _ns1__SetMMSInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetMMSInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetMMSInfoResponse, sizeof(_ns1__SetMMSInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetMMSInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetMMSInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetMMSInfoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetMMSInfoResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetMMSInfoResult", &(a->_ns1__SetMMSInfoResponse::SetMMSInfoResult), "xsd:string"))
				{	soap_flag_SetMMSInfoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetMMSInfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetMMSInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetMMSInfoResponse, 0, sizeof(_ns1__SetMMSInfoResponse), 0, soap_copy__ns1__SetMMSInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetMMSInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetMMSInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetMMSInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetMMSInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetMMSInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoResponse * SOAP_FMAC4 soap_get__ns1__SetMMSInfoResponse(struct soap *soap, _ns1__SetMMSInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetMMSInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetMMSInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__SetMMSInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetMMSInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetMMSInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetMMSInfoResponse);
		if (size)
			*size = sizeof(_ns1__SetMMSInfoResponse);
		((_ns1__SetMMSInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetMMSInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetMMSInfoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetMMSInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetMMSInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetMMSInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetMMSInfoResponse %p -> %p\n", q, p));
	*(_ns1__SetMMSInfoResponse*)p = *(_ns1__SetMMSInfoResponse*)q;
}

void _ns1__SetMMSInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetMMSInfo::query = NULL;
	/* transient soap skipped */
}

void _ns1__SetMMSInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__QueryWandaMsg(soap, &this->_ns1__SetMMSInfo::query);
	/* transient soap skipped */
}

int _ns1__SetMMSInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetMMSInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMMSInfo(struct soap *soap, const char *tag, int id, const _ns1__SetMMSInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetMMSInfo), type))
		return soap->error;
	if (soap_out_PointerTons4__QueryWandaMsg(soap, "ns1:query", -1, &(a->_ns1__SetMMSInfo::query), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetMMSInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetMMSInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetMMSInfo * SOAP_FMAC4 soap_in__ns1__SetMMSInfo(struct soap *soap, const char *tag, _ns1__SetMMSInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetMMSInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetMMSInfo, sizeof(_ns1__SetMMSInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetMMSInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetMMSInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_query1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_query1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__QueryWandaMsg(soap, "ns1:query", &(a->_ns1__SetMMSInfo::query), "ns4:QueryWandaMsg"))
				{	soap_flag_query1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetMMSInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetMMSInfo, 0, sizeof(_ns1__SetMMSInfo), 0, soap_copy__ns1__SetMMSInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetMMSInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetMMSInfo);
	if (this->soap_out(soap, tag?tag:"ns1:SetMMSInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetMMSInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetMMSInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetMMSInfo * SOAP_FMAC4 soap_get__ns1__SetMMSInfo(struct soap *soap, _ns1__SetMMSInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetMMSInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetMMSInfo * SOAP_FMAC2 soap_instantiate__ns1__SetMMSInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetMMSInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetMMSInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetMMSInfo);
		if (size)
			*size = sizeof(_ns1__SetMMSInfo);
		((_ns1__SetMMSInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetMMSInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetMMSInfo);
		for (int i = 0; i < n; i++)
			((_ns1__SetMMSInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetMMSInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetMMSInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetMMSInfo %p -> %p\n", q, p));
	*(_ns1__SetMMSInfo*)p = *(_ns1__SetMMSInfo*)q;
}

void _ns1__SetEmailInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetEmailInfoResponse::SetEmailInfoResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetEmailInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetEmailInfoResponse::SetEmailInfoResult);
	/* transient soap skipped */
}

int _ns1__SetEmailInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetEmailInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEmailInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__SetEmailInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetEmailInfoResponse), type))
		return soap->error;
	if (a->SetEmailInfoResult)
		soap_element_result(soap, "ns1:SetEmailInfoResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetEmailInfoResult", -1, &(a->_ns1__SetEmailInfoResponse::SetEmailInfoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetEmailInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetEmailInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoResponse * SOAP_FMAC4 soap_in__ns1__SetEmailInfoResponse(struct soap *soap, const char *tag, _ns1__SetEmailInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetEmailInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetEmailInfoResponse, sizeof(_ns1__SetEmailInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetEmailInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetEmailInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetEmailInfoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetEmailInfoResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetEmailInfoResult", &(a->_ns1__SetEmailInfoResponse::SetEmailInfoResult), "xsd:string"))
				{	soap_flag_SetEmailInfoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetEmailInfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetEmailInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetEmailInfoResponse, 0, sizeof(_ns1__SetEmailInfoResponse), 0, soap_copy__ns1__SetEmailInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetEmailInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetEmailInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetEmailInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetEmailInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetEmailInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoResponse * SOAP_FMAC4 soap_get__ns1__SetEmailInfoResponse(struct soap *soap, _ns1__SetEmailInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetEmailInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetEmailInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__SetEmailInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetEmailInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetEmailInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailInfoResponse);
		if (size)
			*size = sizeof(_ns1__SetEmailInfoResponse);
		((_ns1__SetEmailInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetEmailInfoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetEmailInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetEmailInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetEmailInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetEmailInfoResponse %p -> %p\n", q, p));
	*(_ns1__SetEmailInfoResponse*)p = *(_ns1__SetEmailInfoResponse*)q;
}

void _ns1__SetEmailInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetEmailInfo::query = NULL;
	/* transient soap skipped */
}

void _ns1__SetEmailInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__QueryWandaMsg(soap, &this->_ns1__SetEmailInfo::query);
	/* transient soap skipped */
}

int _ns1__SetEmailInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetEmailInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetEmailInfo(struct soap *soap, const char *tag, int id, const _ns1__SetEmailInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetEmailInfo), type))
		return soap->error;
	if (soap_out_PointerTons4__QueryWandaMsg(soap, "ns1:query", -1, &(a->_ns1__SetEmailInfo::query), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetEmailInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetEmailInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetEmailInfo * SOAP_FMAC4 soap_in__ns1__SetEmailInfo(struct soap *soap, const char *tag, _ns1__SetEmailInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetEmailInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetEmailInfo, sizeof(_ns1__SetEmailInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetEmailInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetEmailInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_query1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_query1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__QueryWandaMsg(soap, "ns1:query", &(a->_ns1__SetEmailInfo::query), "ns4:QueryWandaMsg"))
				{	soap_flag_query1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetEmailInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetEmailInfo, 0, sizeof(_ns1__SetEmailInfo), 0, soap_copy__ns1__SetEmailInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetEmailInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetEmailInfo);
	if (this->soap_out(soap, tag?tag:"ns1:SetEmailInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetEmailInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetEmailInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetEmailInfo * SOAP_FMAC4 soap_get__ns1__SetEmailInfo(struct soap *soap, _ns1__SetEmailInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetEmailInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetEmailInfo * SOAP_FMAC2 soap_instantiate__ns1__SetEmailInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetEmailInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetEmailInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailInfo);
		if (size)
			*size = sizeof(_ns1__SetEmailInfo);
		((_ns1__SetEmailInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetEmailInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetEmailInfo);
		for (int i = 0; i < n; i++)
			((_ns1__SetEmailInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetEmailInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetEmailInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetEmailInfo %p -> %p\n", q, p));
	*(_ns1__SetEmailInfo*)p = *(_ns1__SetEmailInfo*)q;
}

void _ns1__SetSMSInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetSMSInfoResponse::SetSMSInfoResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetSMSInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetSMSInfoResponse::SetSMSInfoResult);
	/* transient soap skipped */
}

int _ns1__SetSMSInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSMSInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSMSInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__SetSMSInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSMSInfoResponse), type))
		return soap->error;
	if (a->SetSMSInfoResult)
		soap_element_result(soap, "ns1:SetSMSInfoResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetSMSInfoResult", -1, &(a->_ns1__SetSMSInfoResponse::SetSMSInfoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSMSInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSMSInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoResponse * SOAP_FMAC4 soap_in__ns1__SetSMSInfoResponse(struct soap *soap, const char *tag, _ns1__SetSMSInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSMSInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSMSInfoResponse, sizeof(_ns1__SetSMSInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSMSInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSMSInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetSMSInfoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetSMSInfoResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetSMSInfoResult", &(a->_ns1__SetSMSInfoResponse::SetSMSInfoResult), "xsd:string"))
				{	soap_flag_SetSMSInfoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetSMSInfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSMSInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSMSInfoResponse, 0, sizeof(_ns1__SetSMSInfoResponse), 0, soap_copy__ns1__SetSMSInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSMSInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetSMSInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetSMSInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSMSInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSMSInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoResponse * SOAP_FMAC4 soap_get__ns1__SetSMSInfoResponse(struct soap *soap, _ns1__SetSMSInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSMSInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSMSInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__SetSMSInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSMSInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSMSInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSInfoResponse);
		if (size)
			*size = sizeof(_ns1__SetSMSInfoResponse);
		((_ns1__SetSMSInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetSMSInfoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetSMSInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetSMSInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSMSInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSMSInfoResponse %p -> %p\n", q, p));
	*(_ns1__SetSMSInfoResponse*)p = *(_ns1__SetSMSInfoResponse*)q;
}

void _ns1__SetSMSInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetSMSInfo::query = NULL;
	/* transient soap skipped */
}

void _ns1__SetSMSInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__QueryWandaMsg(soap, &this->_ns1__SetSMSInfo::query);
	/* transient soap skipped */
}

int _ns1__SetSMSInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetSMSInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetSMSInfo(struct soap *soap, const char *tag, int id, const _ns1__SetSMSInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetSMSInfo), type))
		return soap->error;
	if (soap_out_PointerTons4__QueryWandaMsg(soap, "ns1:query", -1, &(a->_ns1__SetSMSInfo::query), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetSMSInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetSMSInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetSMSInfo * SOAP_FMAC4 soap_in__ns1__SetSMSInfo(struct soap *soap, const char *tag, _ns1__SetSMSInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetSMSInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetSMSInfo, sizeof(_ns1__SetSMSInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetSMSInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetSMSInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_query1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_query1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__QueryWandaMsg(soap, "ns1:query", &(a->_ns1__SetSMSInfo::query), "ns4:QueryWandaMsg"))
				{	soap_flag_query1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetSMSInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetSMSInfo, 0, sizeof(_ns1__SetSMSInfo), 0, soap_copy__ns1__SetSMSInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetSMSInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetSMSInfo);
	if (this->soap_out(soap, tag?tag:"ns1:SetSMSInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetSMSInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetSMSInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetSMSInfo * SOAP_FMAC4 soap_get__ns1__SetSMSInfo(struct soap *soap, _ns1__SetSMSInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetSMSInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetSMSInfo * SOAP_FMAC2 soap_instantiate__ns1__SetSMSInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetSMSInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetSMSInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSInfo);
		if (size)
			*size = sizeof(_ns1__SetSMSInfo);
		((_ns1__SetSMSInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetSMSInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetSMSInfo);
		for (int i = 0; i < n; i++)
			((_ns1__SetSMSInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetSMSInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetSMSInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetSMSInfo %p -> %p\n", q, p));
	*(_ns1__SetSMSInfo*)p = *(_ns1__SetSMSInfo*)q;
}

void _ns1__SetRTXInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXInfoResponse::SetRTXInfoResult = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__SetRTXInfoResponse::SetRTXInfoResult);
	/* transient soap skipped */
}

int _ns1__SetRTXInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__SetRTXInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXInfoResponse), type))
		return soap->error;
	if (a->SetRTXInfoResult)
		soap_element_result(soap, "ns1:SetRTXInfoResult");
	if (soap_out_PointerTostd__string(soap, "ns1:SetRTXInfoResult", -1, &(a->_ns1__SetRTXInfoResponse::SetRTXInfoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoResponse * SOAP_FMAC4 soap_in__ns1__SetRTXInfoResponse(struct soap *soap, const char *tag, _ns1__SetRTXInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXInfoResponse, sizeof(_ns1__SetRTXInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetRTXInfoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetRTXInfoResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:SetRTXInfoResult", &(a->_ns1__SetRTXInfoResponse::SetRTXInfoResult), "xsd:string"))
				{	soap_flag_SetRTXInfoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SetRTXInfoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXInfoResponse, 0, sizeof(_ns1__SetRTXInfoResponse), 0, soap_copy__ns1__SetRTXInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoResponse * SOAP_FMAC4 soap_get__ns1__SetRTXInfoResponse(struct soap *soap, _ns1__SetRTXInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__SetRTXInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXInfoResponse);
		if (size)
			*size = sizeof(_ns1__SetRTXInfoResponse);
		((_ns1__SetRTXInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXInfoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXInfoResponse %p -> %p\n", q, p));
	*(_ns1__SetRTXInfoResponse*)p = *(_ns1__SetRTXInfoResponse*)q;
}

void _ns1__SetRTXInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SetRTXInfo::query = NULL;
	/* transient soap skipped */
}

void _ns1__SetRTXInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__QueryWandaMsg(soap, &this->_ns1__SetRTXInfo::query);
	/* transient soap skipped */
}

int _ns1__SetRTXInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SetRTXInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetRTXInfo(struct soap *soap, const char *tag, int id, const _ns1__SetRTXInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SetRTXInfo), type))
		return soap->error;
	if (soap_out_PointerTons4__QueryWandaMsg(soap, "ns1:query", -1, &(a->_ns1__SetRTXInfo::query), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SetRTXInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SetRTXInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SetRTXInfo * SOAP_FMAC4 soap_in__ns1__SetRTXInfo(struct soap *soap, const char *tag, _ns1__SetRTXInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SetRTXInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SetRTXInfo, sizeof(_ns1__SetRTXInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SetRTXInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SetRTXInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_query1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_query1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__QueryWandaMsg(soap, "ns1:query", &(a->_ns1__SetRTXInfo::query), "ns4:QueryWandaMsg"))
				{	soap_flag_query1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SetRTXInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SetRTXInfo, 0, sizeof(_ns1__SetRTXInfo), 0, soap_copy__ns1__SetRTXInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__SetRTXInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SetRTXInfo);
	if (this->soap_out(soap, tag?tag:"ns1:SetRTXInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SetRTXInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SetRTXInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SetRTXInfo * SOAP_FMAC4 soap_get__ns1__SetRTXInfo(struct soap *soap, _ns1__SetRTXInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SetRTXInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SetRTXInfo * SOAP_FMAC2 soap_instantiate__ns1__SetRTXInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SetRTXInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SetRTXInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXInfo);
		if (size)
			*size = sizeof(_ns1__SetRTXInfo);
		((_ns1__SetRTXInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SetRTXInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SetRTXInfo);
		for (int i = 0; i < n; i++)
			((_ns1__SetRTXInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SetRTXInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetRTXInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SetRTXInfo %p -> %p\n", q, p));
	*(_ns1__SetRTXInfo*)p = *(_ns1__SetRTXInfo*)q;
}

void xsd__unsignedShort::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedShort(soap, &this->xsd__unsignedShort::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedShort::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedShort::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap *soap, const char *tag, int id, const xsd__unsignedShort *a, const char *type)
{
	return soap_out_unsignedShort(soap, tag, id, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort");
}

void *xsd__unsignedShort::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedShort(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap *soap, const char *tag, xsd__unsignedShort *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedShort, sizeof(xsd__unsignedShort), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedShort)
			return (xsd__unsignedShort *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedShort(soap, tag, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort"))
		return NULL;
	return a;
}

int xsd__unsignedShort::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedShort);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedShort", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedShort::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedShort, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort);
		if (size)
			*size = sizeof(xsd__unsignedShort);
		((xsd__unsignedShort*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedShort);
		for (int i = 0; i < n; i++)
			((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedShort*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedShort %p -> %p\n", q, p));
	*(xsd__unsignedShort*)p = *(xsd__unsignedShort*)q;
}

void xsd__unsignedLong::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedLONG64(soap, &this->xsd__unsignedLong::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedLong::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedLong::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedLong(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap *soap, const char *tag, int id, const xsd__unsignedLong *a, const char *type)
{
	return soap_out_unsignedLONG64(soap, tag, id, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong");
}

void *xsd__unsignedLong::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedLong(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap *soap, const char *tag, xsd__unsignedLong *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedLong *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedLong, sizeof(xsd__unsignedLong), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedLong)
			return (xsd__unsignedLong *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedLONG64(soap, tag, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong"))
		return NULL;
	return a;
}

int xsd__unsignedLong::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedLong);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedLong", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedLong::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedLong(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedLong(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedLong, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong);
		if (size)
			*size = sizeof(xsd__unsignedLong);
		((xsd__unsignedLong*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedLong);
		for (int i = 0; i < n; i++)
			((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedLong*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedLong %p -> %p\n", q, p));
	*(xsd__unsignedLong*)p = *(xsd__unsignedLong*)q;
}

void xsd__unsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->xsd__unsignedInt::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap *soap, const char *tag, int id, const xsd__unsignedInt *a, const char *type)
{
	return soap_out_unsignedInt(soap, tag, id, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt");
}

void *xsd__unsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap *soap, const char *tag, xsd__unsignedInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedInt, sizeof(xsd__unsignedInt), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedInt)
			return (xsd__unsignedInt *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedInt(soap, tag, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt"))
		return NULL;
	return a;
}

int xsd__unsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedInt);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt);
		if (size)
			*size = sizeof(xsd__unsignedInt);
		((xsd__unsignedInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedInt);
		for (int i = 0; i < n; i++)
			((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedInt %p -> %p\n", q, p));
	*(xsd__unsignedInt*)p = *(xsd__unsignedInt*)q;
}

void xsd__unsignedByte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__unsignedByte(soap, &this->xsd__unsignedByte_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedByte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedByte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedByte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap *soap, const char *tag, int id, const xsd__unsignedByte_ *a, const char *type)
{
	return soap_out_xsd__unsignedByte(soap, tag, id, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte");
}

void *xsd__unsignedByte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedByte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap *soap, const char *tag, xsd__unsignedByte_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedByte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedByte_, sizeof(xsd__unsignedByte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedByte_)
			return (xsd__unsignedByte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__unsignedByte(soap, tag, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte"))
		return NULL;
	return a;
}

int xsd__unsignedByte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte_);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedByte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedByte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedByte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedByte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedByte_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_);
		if (size)
			*size = sizeof(xsd__unsignedByte_);
		((xsd__unsignedByte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedByte_);
		for (int i = 0; i < n; i++)
			((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedByte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedByte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedByte_ %p -> %p\n", q, p));
	*(xsd__unsignedByte_*)p = *(xsd__unsignedByte_*)q;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->xsd__string::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__string::__item, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->xsd__string::__item);
	/* transient soap skipped */
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	return soap_out_std__string(soap, tag, id, &(a->xsd__string::__item), "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_std__string(soap, tag, &(a->xsd__string::__item), "xsd:string"))
		return NULL;
	return a;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (this->soap_out(soap, tag?tag:"xsd:string", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__string);
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__string);
		for (int i = 0; i < n; i++)
			((xsd__string*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__short::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_short(soap, &this->xsd__short::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__short::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__short::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__short(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap *soap, const char *tag, int id, const xsd__short *a, const char *type)
{
	return soap_out_short(soap, tag, id, &(a->xsd__short::__item), "xsd:short");
}

void *xsd__short::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__short(soap, tag, this, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap *soap, const char *tag, xsd__short *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__short *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__short, sizeof(xsd__short), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__short)
			return (xsd__short *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_short(soap, tag, &(a->xsd__short::__item), "xsd:short"))
		return NULL;
	return a;
}

int xsd__short::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__short);
	if (this->soap_out(soap, tag?tag:"xsd:short", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__short::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__short(soap, this, tag, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap *soap, xsd__short *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__short(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__short, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__short);
		if (size)
			*size = sizeof(xsd__short);
		((xsd__short*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__short[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__short);
		for (int i = 0; i < n; i++)
			((xsd__short*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__short*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__short(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__short %p -> %p\n", q, p));
	*(xsd__short*)p = *(xsd__short*)q;
}

void xsd__long::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->xsd__long::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__long::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__long::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const xsd__long *a, const char *type)
{
	return soap_out_LONG64(soap, tag, id, &(a->xsd__long::__item), "xsd:long");
}

void *xsd__long::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, xsd__long *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__long)
			return (xsd__long *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_LONG64(soap, tag, &(a->xsd__long::__item), "xsd:long"))
		return NULL;
	return a;
}

int xsd__long::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__long);
	if (this->soap_out(soap, tag?tag:"xsd:long", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, xsd__long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__long, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__long);
		if (size)
			*size = sizeof(xsd__long);
		((xsd__long*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__long[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__long);
		for (int i = 0; i < n; i++)
			((xsd__long*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__long*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__long %p -> %p\n", q, p));
	*(xsd__long*)p = *(xsd__long*)q;
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->xsd__int::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	return soap_out_int(soap, tag, id, &(a->xsd__int::__item), "xsd:int");
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__int)
			return (xsd__int *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_int(soap, tag, &(a->xsd__int::__item), "xsd:int"))
		return NULL;
	return a;
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (this->soap_out(soap, tag?tag:"xsd:int", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__int, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__int);
		if (size)
			*size = sizeof(xsd__int);
		((xsd__int*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__int[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__int);
		for (int i = 0; i < n; i++)
			((xsd__int*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__int*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__int %p -> %p\n", q, p));
	*(xsd__int*)p = *(xsd__int*)q;
}

void xsd__float::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_float(soap, &this->xsd__float::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__float::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__float::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__float(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const xsd__float *a, const char *type)
{
	return soap_out_float(soap, tag, id, &(a->xsd__float::__item), "xsd:float");
}

void *xsd__float::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__float(soap, tag, this, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, xsd__float *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__float *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__float, sizeof(xsd__float), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__float)
			return (xsd__float *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_float(soap, tag, &(a->xsd__float::__item), "xsd:float"))
		return NULL;
	return a;
}

int xsd__float::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__float);
	if (this->soap_out(soap, tag?tag:"xsd:float", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__float::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__float(soap, this, tag, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, xsd__float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__float, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__float);
		if (size)
			*size = sizeof(xsd__float);
		((xsd__float*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__float[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__float);
		for (int i = 0; i < n; i++)
			((xsd__float*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__float*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__float %p -> %p\n", q, p));
	*(xsd__float*)p = *(xsd__float*)q;
}

void xsd__duration_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__duration(soap, &this->xsd__duration_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__duration_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__duration(soap, &this->xsd__duration_::__item);
	/* transient soap skipped */
}

int xsd__duration_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap *soap, const char *tag, int id, const xsd__duration_ *a, const char *type)
{
	return soap_out_xsd__duration(soap, tag, id, &(a->xsd__duration_::__item), "xsd:duration");
}

void *xsd__duration_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__duration_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap *soap, const char *tag, xsd__duration_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__duration_, sizeof(xsd__duration_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__duration_)
			return (xsd__duration_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__duration(soap, tag, &(a->xsd__duration_::__item), "xsd:duration"))
		return NULL;
	return a;
}

int xsd__duration_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__duration_);
	if (this->soap_out(soap, tag?tag:"xsd:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap *soap, xsd__duration_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__duration_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__duration_);
		if (size)
			*size = sizeof(xsd__duration_);
		((xsd__duration_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__duration_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__duration_);
		for (int i = 0; i < n; i++)
			((xsd__duration_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__duration_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__duration_ %p -> %p\n", q, p));
	*(xsd__duration_*)p = *(xsd__duration_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__duration(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__duration, 0, sizeof(std::string), 0, soap_copy_xsd__duration);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__duration);
	if (soap_out_xsd__duration(soap, tag?tag:"xsd:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__double::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_double(soap, &this->xsd__double::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__double::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__double::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__double(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const xsd__double *a, const char *type)
{
	return soap_out_double(soap, tag, id, &(a->xsd__double::__item), "xsd:double");
}

void *xsd__double::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__double(soap, tag, this, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, xsd__double *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__double *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__double, sizeof(xsd__double), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__double)
			return (xsd__double *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_double(soap, tag, &(a->xsd__double::__item), "xsd:double"))
		return NULL;
	return a;
}

int xsd__double::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (this->soap_out(soap, tag?tag:"xsd:double", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__double::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__double(soap, this, tag, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, xsd__double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__double(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__double, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__double);
		if (size)
			*size = sizeof(xsd__double);
		((xsd__double*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__double[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__double);
		for (int i = 0; i < n; i++)
			((xsd__double*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__double*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__double %p -> %p\n", q, p));
	*(xsd__double*)p = *(xsd__double*)q;
}

void xsd__decimal_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->xsd__decimal_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__decimal_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->xsd__decimal_::__item);
	/* transient soap skipped */
}

int xsd__decimal_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap *soap, const char *tag, int id, const xsd__decimal_ *a, const char *type)
{
	return soap_out_xsd__decimal(soap, tag, id, &(a->xsd__decimal_::__item), "xsd:decimal");
}

void *xsd__decimal_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__decimal_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap *soap, const char *tag, xsd__decimal_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__decimal_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__decimal_, sizeof(xsd__decimal_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__decimal_)
			return (xsd__decimal_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__decimal(soap, tag, &(a->xsd__decimal_::__item), "xsd:decimal"))
		return NULL;
	return a;
}

int xsd__decimal_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__decimal_);
	if (this->soap_out(soap, tag?tag:"xsd:decimal", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__decimal_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap *soap, xsd__decimal_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__decimal_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_);
		if (size)
			*size = sizeof(xsd__decimal_);
		((xsd__decimal_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__decimal_);
		for (int i = 0; i < n; i++)
			((xsd__decimal_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__decimal_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__decimal_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__decimal_ %p -> %p\n", q, p));
	*(xsd__decimal_*)p = *(xsd__decimal_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__decimal, 0, sizeof(std::string), 0, soap_copy_xsd__decimal);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag?tag:"xsd:decimal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__dateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->xsd__dateTime::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__dateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__dateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const xsd__dateTime *a, const char *type)
{
	return soap_out_time(soap, tag, id, &(a->xsd__dateTime::__item), "xsd:dateTime");
}

void *xsd__dateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__dateTime(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, xsd__dateTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__dateTime, sizeof(xsd__dateTime), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__dateTime)
			return (xsd__dateTime *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_time(soap, tag, &(a->xsd__dateTime::__item), "xsd:dateTime"))
		return NULL;
	return a;
}

int xsd__dateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__dateTime);
	if (this->soap_out(soap, tag?tag:"xsd:dateTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, xsd__dateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__dateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime);
		if (size)
			*size = sizeof(xsd__dateTime);
		((xsd__dateTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__dateTime);
		for (int i = 0; i < n; i++)
			((xsd__dateTime*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__dateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__dateTime %p -> %p\n", q, p));
	*(xsd__dateTime*)p = *(xsd__dateTime*)q;
}

void xsd__byte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__byte(soap, &this->xsd__byte_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__byte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__byte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__byte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap *soap, const char *tag, int id, const xsd__byte_ *a, const char *type)
{
	return soap_out_xsd__byte(soap, tag, id, &(a->xsd__byte_::__item), "xsd:byte");
}

void *xsd__byte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__byte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap *soap, const char *tag, xsd__byte_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__byte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__byte_, sizeof(xsd__byte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__byte_)
			return (xsd__byte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__byte(soap, tag, &(a->xsd__byte_::__item), "xsd:byte"))
		return NULL;
	return a;
}

int xsd__byte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__byte_);
	if (this->soap_out(soap, tag?tag:"xsd:byte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__byte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__byte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap *soap, xsd__byte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__byte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__byte_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__byte_);
		if (size)
			*size = sizeof(xsd__byte_);
		((xsd__byte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__byte_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__byte_);
		for (int i = 0; i < n; i++)
			((xsd__byte_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__byte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__byte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__byte_ %p -> %p\n", q, p));
	*(xsd__byte_*)p = *(xsd__byte_*)q;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->xsd__boolean::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	return soap_out_bool(soap, tag, id, &(a->xsd__boolean::__item), "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__boolean)
			return (xsd__boolean *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_bool(soap, tag, &(a->xsd__boolean::__item), "xsd:boolean"))
		return NULL;
	return a;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__boolean);
	if (this->soap_out(soap, tag?tag:"xsd:boolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__boolean, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__boolean);
		if (size)
			*size = sizeof(xsd__boolean);
		((xsd__boolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__boolean[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__boolean);
		for (int i = 0; i < n; i++)
			((xsd__boolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__boolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__boolean %p -> %p\n", q, p));
	*(xsd__boolean*)p = *(xsd__boolean*)q;
}

void xsd__base64Binary_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__base64Binary_::__item.xsd__base64Binary::soap_default(soap);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__base64Binary_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->xsd__base64Binary_::__item.soap_serialize(soap);
	/* transient soap skipped */
}

int xsd__base64Binary_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap *soap, const char *tag, int id, const xsd__base64Binary_ *a, const char *type)
{
	return (a->xsd__base64Binary_::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap *soap, const char *tag, xsd__base64Binary_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary_, sizeof(xsd__base64Binary_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__base64Binary_)
			return (xsd__base64Binary_ *)a->soap_in(soap, tag, type);
	}
	if (!(a->xsd__base64Binary_::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

int xsd__base64Binary_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__base64Binary_);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_);
		if (size)
			*size = sizeof(xsd__base64Binary_);
		((xsd__base64Binary_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary_);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary_ %p -> %p\n", q, p));
	*(xsd__base64Binary_*)p = *(xsd__base64Binary_*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

void xsd__anyURI_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyURI_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	/* transient soap skipped */
}

int xsd__anyURI_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap *soap, const char *tag, int id, const xsd__anyURI_ *a, const char *type)
{
	return soap_out_xsd__anyURI(soap, tag, id, &(a->xsd__anyURI_::__item), "xsd:anyURI");
}

void *xsd__anyURI_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap *soap, const char *tag, xsd__anyURI_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI_, sizeof(xsd__anyURI_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyURI_)
			return (xsd__anyURI_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__anyURI(soap, tag, &(a->xsd__anyURI_::__item), "xsd:anyURI"))
		return NULL;
	return a;
}

int xsd__anyURI_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyURI_);
	if (this->soap_out(soap, tag?tag:"xsd:anyURI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyURI_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_);
		if (size)
			*size = sizeof(xsd__anyURI_);
		((xsd__anyURI_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyURI_);
		for (int i = 0; i < n; i++)
			((xsd__anyURI_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyURI_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyURI_ %p -> %p\n", q, p));
	*(xsd__anyURI_*)p = *(xsd__anyURI_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__anyURI, 0, sizeof(std::string), 0, soap_copy_xsd__anyURI);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag?tag:"xsd:anyURI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__QName_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__QName(soap, &this->xsd__QName_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__QName_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__QName(soap, &this->xsd__QName_::__item);
	/* transient soap skipped */
}

int xsd__QName_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName_(struct soap *soap, const char *tag, int id, const xsd__QName_ *a, const char *type)
{
	std::string soap_tmp___item(soap_QName2s(soap, a->__item.c_str()));
	return soap_out_xsd__QName(soap, tag, id, &soap_tmp___item, "xsd:QName");
}

void *xsd__QName_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__QName_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_in_xsd__QName_(struct soap *soap, const char *tag, xsd__QName_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__QName_, sizeof(xsd__QName_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__QName_)
			return (xsd__QName_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__QName(soap, tag, &(a->xsd__QName_::__item), "xsd:QName"))
		return NULL;
	return a;
}

int xsd__QName_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__QName_);
	if (this->soap_out(soap, tag?tag:"xsd:QName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName_ * SOAP_FMAC4 soap_get_xsd__QName_(struct soap *soap, xsd__QName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__QName_ * SOAP_FMAC2 soap_instantiate_xsd__QName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__QName_);
		if (size)
			*size = sizeof(xsd__QName_);
		((xsd__QName_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__QName_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__QName_);
		for (int i = 0; i < n; i++)
			((xsd__QName_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__QName_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__QName_ %p -> %p\n", q, p));
	*(xsd__QName_*)p = *(xsd__QName_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__QName), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_xsd__QName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 2, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__QName, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__QName, 0, sizeof(std::string), 0, soap_copy_xsd__QName);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__QName);
	if (soap_out_xsd__QName(soap, tag?tag:"xsd:QName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__IDREF_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__IDREF_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	/* transient soap skipped */
}

int xsd__IDREF_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__IDREF_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap *soap, const char *tag, int id, const xsd__IDREF_ *a, const char *type)
{
	return soap_out_xsd__IDREF(soap, tag, id, &(a->xsd__IDREF_::__item), "xsd:IDREF");
}

void *xsd__IDREF_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__IDREF_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap *soap, const char *tag, xsd__IDREF_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__IDREF_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__IDREF_, sizeof(xsd__IDREF_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__IDREF_)
			return (xsd__IDREF_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__IDREF(soap, tag, &(a->xsd__IDREF_::__item), "xsd:IDREF"))
		return NULL;
	return a;
}

int xsd__IDREF_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__IDREF_);
	if (this->soap_out(soap, tag?tag:"xsd:IDREF", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__IDREF_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__IDREF_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__IDREF_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__IDREF_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_);
		if (size)
			*size = sizeof(xsd__IDREF_);
		((xsd__IDREF_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__IDREF_);
		for (int i = 0; i < n; i++)
			((xsd__IDREF_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__IDREF_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__IDREF_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__IDREF_ %p -> %p\n", q, p));
	*(xsd__IDREF_*)p = *(xsd__IDREF_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__IDREF(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__IDREF), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__IDREF, 0, sizeof(std::string), 0, soap_copy_xsd__IDREF);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__IDREF);
	if (soap_out_xsd__IDREF(soap, tag?tag:"xsd:IDREF", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__ID_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__ID(soap, &this->xsd__ID_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__ID_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__ID(soap, &this->xsd__ID_::__item);
	/* transient soap skipped */
}

int xsd__ID_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap *soap, const char *tag, int id, const xsd__ID_ *a, const char *type)
{
	return soap_out_xsd__ID(soap, tag, id, &(a->xsd__ID_::__item), "xsd:ID");
}

void *xsd__ID_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__ID_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap *soap, const char *tag, xsd__ID_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__ID_, sizeof(xsd__ID_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__ID_)
			return (xsd__ID_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__ID(soap, tag, &(a->xsd__ID_::__item), "xsd:ID"))
		return NULL;
	return a;
}

int xsd__ID_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__ID_);
	if (this->soap_out(soap, tag?tag:"xsd:ID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__ID_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap *soap, xsd__ID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__ID_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__ID_);
		if (size)
			*size = sizeof(xsd__ID_);
		((xsd__ID_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__ID_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__ID_);
		for (int i = 0; i < n; i++)
			((xsd__ID_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__ID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__ID_ %p -> %p\n", q, p));
	*(xsd__ID_*)p = *(xsd__ID_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__ID(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__ID), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__ID, 0, sizeof(std::string), 0, soap_copy_xsd__ID);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__ID);
	if (soap_out_xsd__ID(soap, tag?tag:"xsd:ID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag?tag:"xsd:anyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:ID"))
	{	cp->type = SOAP_TYPE_xsd__ID_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__ID_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__ID_);
			((xsd__ID_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__ID_[n]);
			if (size)
				*size = n * sizeof(xsd__ID_);
			for (int i = 0; i < n; i++)
				((xsd__ID_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__ID_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:IDREF"))
	{	cp->type = SOAP_TYPE_xsd__IDREF_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__IDREF_);
			((xsd__IDREF_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_[n]);
			if (size)
				*size = n * sizeof(xsd__IDREF_);
			for (int i = 0; i < n; i++)
				((xsd__IDREF_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__IDREF_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:QName"))
	{	cp->type = SOAP_TYPE_xsd__QName_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__QName_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__QName_);
			((xsd__QName_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__QName_[n]);
			if (size)
				*size = n * sizeof(xsd__QName_);
			for (int i = 0; i < n; i++)
				((xsd__QName_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__QName_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:anyURI"))
	{	cp->type = SOAP_TYPE_xsd__anyURI_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__anyURI_);
			((xsd__anyURI_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_[n]);
			if (size)
				*size = n * sizeof(xsd__anyURI_);
			for (int i = 0; i < n; i++)
				((xsd__anyURI_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__anyURI_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:base64Binary"))
	{	cp->type = SOAP_TYPE_xsd__base64Binary_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__base64Binary_);
			((xsd__base64Binary_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_[n]);
			if (size)
				*size = n * sizeof(xsd__base64Binary_);
			for (int i = 0; i < n; i++)
				((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__base64Binary_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:boolean"))
	{	cp->type = SOAP_TYPE_xsd__boolean;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__boolean);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__boolean);
			((xsd__boolean*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__boolean[n]);
			if (size)
				*size = n * sizeof(xsd__boolean);
			for (int i = 0; i < n; i++)
				((xsd__boolean*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__boolean*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:byte"))
	{	cp->type = SOAP_TYPE_xsd__byte_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__byte_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__byte_);
			((xsd__byte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__byte_[n]);
			if (size)
				*size = n * sizeof(xsd__byte_);
			for (int i = 0; i < n; i++)
				((xsd__byte_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__byte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:dateTime"))
	{	cp->type = SOAP_TYPE_xsd__dateTime;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__dateTime);
			((xsd__dateTime*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime[n]);
			if (size)
				*size = n * sizeof(xsd__dateTime);
			for (int i = 0; i < n; i++)
				((xsd__dateTime*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__dateTime*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:decimal"))
	{	cp->type = SOAP_TYPE_xsd__decimal_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__decimal_);
			((xsd__decimal_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_[n]);
			if (size)
				*size = n * sizeof(xsd__decimal_);
			for (int i = 0; i < n; i++)
				((xsd__decimal_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__decimal_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:double"))
	{	cp->type = SOAP_TYPE_xsd__double;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__double);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__double);
			((xsd__double*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__double[n]);
			if (size)
				*size = n * sizeof(xsd__double);
			for (int i = 0; i < n; i++)
				((xsd__double*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__double*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:duration"))
	{	cp->type = SOAP_TYPE_xsd__duration_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__duration_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__duration_);
			((xsd__duration_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__duration_[n]);
			if (size)
				*size = n * sizeof(xsd__duration_);
			for (int i = 0; i < n; i++)
				((xsd__duration_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__duration_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:float"))
	{	cp->type = SOAP_TYPE_xsd__float;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__float);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__float);
			((xsd__float*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__float[n]);
			if (size)
				*size = n * sizeof(xsd__float);
			for (int i = 0; i < n; i++)
				((xsd__float*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__float*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:int"))
	{	cp->type = SOAP_TYPE_xsd__int;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__int);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__int);
			((xsd__int*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__int[n]);
			if (size)
				*size = n * sizeof(xsd__int);
			for (int i = 0; i < n; i++)
				((xsd__int*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__int*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__long);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__long);
			((xsd__long*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__long[n]);
			if (size)
				*size = n * sizeof(xsd__long);
			for (int i = 0; i < n; i++)
				((xsd__long*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:short"))
	{	cp->type = SOAP_TYPE_xsd__short;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__short);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__short);
			((xsd__short*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__short[n]);
			if (size)
				*size = n * sizeof(xsd__short);
			for (int i = 0; i < n; i++)
				((xsd__short*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__short*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_xsd__string;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__string);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__string[n]);
			if (size)
				*size = n * sizeof(xsd__string);
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedByte"))
	{	cp->type = SOAP_TYPE_xsd__unsignedByte_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedByte_);
			((xsd__unsignedByte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedByte_);
			for (int i = 0; i < n; i++)
				((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedByte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
	{	cp->type = SOAP_TYPE_xsd__unsignedInt;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedInt);
			((xsd__unsignedInt*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedInt);
			for (int i = 0; i < n; i++)
				((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedInt*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedLong"))
	{	cp->type = SOAP_TYPE_xsd__unsignedLong;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedLong);
			((xsd__unsignedLong*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedLong);
			for (int i = 0; i < n; i++)
				((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedLong*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
	{	cp->type = SOAP_TYPE_xsd__unsignedShort;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedShort);
			((xsd__unsignedShort*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedShort);
			for (int i = 0; i < n; i++)
				((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedShort*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:char"))
	{	cp->type = SOAP_TYPE_ns3__char__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__char__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__char__);
			((ns3__char__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns3__char__[n]);
			if (size)
				*size = n * sizeof(ns3__char__);
			for (int i = 0; i < n; i++)
				((ns3__char__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__char__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:duration"))
	{	cp->type = SOAP_TYPE_ns3__duration__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__duration__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__duration__);
			((ns3__duration__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns3__duration__[n]);
			if (size)
				*size = n * sizeof(ns3__duration__);
			for (int i = 0; i < n; i++)
				((ns3__duration__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__duration__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:guid"))
	{	cp->type = SOAP_TYPE_ns3__guid__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__guid__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__guid__);
			((ns3__guid__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns3__guid__[n]);
			if (size)
				*size = n * sizeof(ns3__guid__);
			for (int i = 0; i < n; i++)
				((ns3__guid__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__guid__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:QueryWandaMsg"))
	{	cp->type = SOAP_TYPE_ns4__QueryWandaMsg;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns4__QueryWandaMsg);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns4__QueryWandaMsg);
			((ns4__QueryWandaMsg*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns4__QueryWandaMsg[n]);
			if (size)
				*size = n * sizeof(ns4__QueryWandaMsg);
			for (int i = 0; i < n; i++)
				((ns4__QueryWandaMsg*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns4__QueryWandaMsg*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType);
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyType);
		for (int i = 0; i < n; i++)
			((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetRTXNotifyC(struct soap *soap, struct __ns1__SetRTXNotifyC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetRTXNotifyC = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetRTXNotifyC(struct soap *soap, const struct __ns1__SetRTXNotifyC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetRTXNotifyC(soap, &a->ns1__SetRTXNotifyC);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetRTXNotifyC(struct soap *soap, const char *tag, int id, const struct __ns1__SetRTXNotifyC *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetRTXNotifyC(soap, "ns1:SetRTXNotifyC", -1, &a->ns1__SetRTXNotifyC, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXNotifyC * SOAP_FMAC4 soap_in___ns1__SetRTXNotifyC(struct soap *soap, const char *tag, struct __ns1__SetRTXNotifyC *a, const char *type)
{
	size_t soap_flag_ns1__SetRTXNotifyC = 1;
	short soap_flag;
	a = (struct __ns1__SetRTXNotifyC *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetRTXNotifyC, sizeof(struct __ns1__SetRTXNotifyC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetRTXNotifyC(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetRTXNotifyC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetRTXNotifyC(soap, "ns1:SetRTXNotifyC", &a->ns1__SetRTXNotifyC, ""))
				{	soap_flag_ns1__SetRTXNotifyC--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetRTXNotifyC(struct soap *soap, const struct __ns1__SetRTXNotifyC *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetRTXNotifyC(soap, tag?tag:"-ns1:SetRTXNotifyC", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXNotifyC * SOAP_FMAC4 soap_get___ns1__SetRTXNotifyC(struct soap *soap, struct __ns1__SetRTXNotifyC *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetRTXNotifyC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetRTXNotifyC * SOAP_FMAC2 soap_instantiate___ns1__SetRTXNotifyC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetRTXNotifyC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetRTXNotifyC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXNotifyC);
		if (size)
			*size = sizeof(struct __ns1__SetRTXNotifyC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXNotifyC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetRTXNotifyC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetRTXNotifyC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetRTXNotifyC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetRTXNotifyC %p -> %p\n", q, p));
	*(struct __ns1__SetRTXNotifyC*)p = *(struct __ns1__SetRTXNotifyC*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMMSInfoC(struct soap *soap, struct __ns1__SetMMSInfoC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetMMSInfoC = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMMSInfoC(struct soap *soap, const struct __ns1__SetMMSInfoC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetMMSInfoC(soap, &a->ns1__SetMMSInfoC);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMMSInfoC(struct soap *soap, const char *tag, int id, const struct __ns1__SetMMSInfoC *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetMMSInfoC(soap, "ns1:SetMMSInfoC", -1, &a->ns1__SetMMSInfoC, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetMMSInfoC * SOAP_FMAC4 soap_in___ns1__SetMMSInfoC(struct soap *soap, const char *tag, struct __ns1__SetMMSInfoC *a, const char *type)
{
	size_t soap_flag_ns1__SetMMSInfoC = 1;
	short soap_flag;
	a = (struct __ns1__SetMMSInfoC *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetMMSInfoC, sizeof(struct __ns1__SetMMSInfoC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetMMSInfoC(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetMMSInfoC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetMMSInfoC(soap, "ns1:SetMMSInfoC", &a->ns1__SetMMSInfoC, ""))
				{	soap_flag_ns1__SetMMSInfoC--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMMSInfoC(struct soap *soap, const struct __ns1__SetMMSInfoC *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetMMSInfoC(soap, tag?tag:"-ns1:SetMMSInfoC", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetMMSInfoC * SOAP_FMAC4 soap_get___ns1__SetMMSInfoC(struct soap *soap, struct __ns1__SetMMSInfoC *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetMMSInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetMMSInfoC * SOAP_FMAC2 soap_instantiate___ns1__SetMMSInfoC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetMMSInfoC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetMMSInfoC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetMMSInfoC);
		if (size)
			*size = sizeof(struct __ns1__SetMMSInfoC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetMMSInfoC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetMMSInfoC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetMMSInfoC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetMMSInfoC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetMMSInfoC %p -> %p\n", q, p));
	*(struct __ns1__SetMMSInfoC*)p = *(struct __ns1__SetMMSInfoC*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetEmailInfoC(struct soap *soap, struct __ns1__SetEmailInfoC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetEmailInfoC = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetEmailInfoC(struct soap *soap, const struct __ns1__SetEmailInfoC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetEmailInfoC(soap, &a->ns1__SetEmailInfoC);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetEmailInfoC(struct soap *soap, const char *tag, int id, const struct __ns1__SetEmailInfoC *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetEmailInfoC(soap, "ns1:SetEmailInfoC", -1, &a->ns1__SetEmailInfoC, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetEmailInfoC * SOAP_FMAC4 soap_in___ns1__SetEmailInfoC(struct soap *soap, const char *tag, struct __ns1__SetEmailInfoC *a, const char *type)
{
	size_t soap_flag_ns1__SetEmailInfoC = 1;
	short soap_flag;
	a = (struct __ns1__SetEmailInfoC *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetEmailInfoC, sizeof(struct __ns1__SetEmailInfoC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetEmailInfoC(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetEmailInfoC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetEmailInfoC(soap, "ns1:SetEmailInfoC", &a->ns1__SetEmailInfoC, ""))
				{	soap_flag_ns1__SetEmailInfoC--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetEmailInfoC(struct soap *soap, const struct __ns1__SetEmailInfoC *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetEmailInfoC(soap, tag?tag:"-ns1:SetEmailInfoC", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetEmailInfoC * SOAP_FMAC4 soap_get___ns1__SetEmailInfoC(struct soap *soap, struct __ns1__SetEmailInfoC *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetEmailInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetEmailInfoC * SOAP_FMAC2 soap_instantiate___ns1__SetEmailInfoC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetEmailInfoC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetEmailInfoC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetEmailInfoC);
		if (size)
			*size = sizeof(struct __ns1__SetEmailInfoC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetEmailInfoC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetEmailInfoC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetEmailInfoC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetEmailInfoC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetEmailInfoC %p -> %p\n", q, p));
	*(struct __ns1__SetEmailInfoC*)p = *(struct __ns1__SetEmailInfoC*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetRTXInfoC(struct soap *soap, struct __ns1__SetRTXInfoC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetRTXInfoC = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetRTXInfoC(struct soap *soap, const struct __ns1__SetRTXInfoC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetRTXInfoC(soap, &a->ns1__SetRTXInfoC);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetRTXInfoC(struct soap *soap, const char *tag, int id, const struct __ns1__SetRTXInfoC *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetRTXInfoC(soap, "ns1:SetRTXInfoC", -1, &a->ns1__SetRTXInfoC, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXInfoC * SOAP_FMAC4 soap_in___ns1__SetRTXInfoC(struct soap *soap, const char *tag, struct __ns1__SetRTXInfoC *a, const char *type)
{
	size_t soap_flag_ns1__SetRTXInfoC = 1;
	short soap_flag;
	a = (struct __ns1__SetRTXInfoC *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetRTXInfoC, sizeof(struct __ns1__SetRTXInfoC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetRTXInfoC(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetRTXInfoC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetRTXInfoC(soap, "ns1:SetRTXInfoC", &a->ns1__SetRTXInfoC, ""))
				{	soap_flag_ns1__SetRTXInfoC--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetRTXInfoC(struct soap *soap, const struct __ns1__SetRTXInfoC *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetRTXInfoC(soap, tag?tag:"-ns1:SetRTXInfoC", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXInfoC * SOAP_FMAC4 soap_get___ns1__SetRTXInfoC(struct soap *soap, struct __ns1__SetRTXInfoC *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetRTXInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetRTXInfoC * SOAP_FMAC2 soap_instantiate___ns1__SetRTXInfoC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetRTXInfoC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetRTXInfoC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXInfoC);
		if (size)
			*size = sizeof(struct __ns1__SetRTXInfoC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXInfoC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetRTXInfoC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetRTXInfoC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetRTXInfoC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetRTXInfoC %p -> %p\n", q, p));
	*(struct __ns1__SetRTXInfoC*)p = *(struct __ns1__SetRTXInfoC*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetSMSInfoC(struct soap *soap, struct __ns1__SetSMSInfoC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetSMSInfoC = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetSMSInfoC(struct soap *soap, const struct __ns1__SetSMSInfoC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetSMSInfoC(soap, &a->ns1__SetSMSInfoC);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetSMSInfoC(struct soap *soap, const char *tag, int id, const struct __ns1__SetSMSInfoC *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetSMSInfoC(soap, "ns1:SetSMSInfoC", -1, &a->ns1__SetSMSInfoC, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSMSInfoC * SOAP_FMAC4 soap_in___ns1__SetSMSInfoC(struct soap *soap, const char *tag, struct __ns1__SetSMSInfoC *a, const char *type)
{
	size_t soap_flag_ns1__SetSMSInfoC = 1;
	short soap_flag;
	a = (struct __ns1__SetSMSInfoC *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetSMSInfoC, sizeof(struct __ns1__SetSMSInfoC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetSMSInfoC(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetSMSInfoC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetSMSInfoC(soap, "ns1:SetSMSInfoC", &a->ns1__SetSMSInfoC, ""))
				{	soap_flag_ns1__SetSMSInfoC--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetSMSInfoC(struct soap *soap, const struct __ns1__SetSMSInfoC *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetSMSInfoC(soap, tag?tag:"-ns1:SetSMSInfoC", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSMSInfoC * SOAP_FMAC4 soap_get___ns1__SetSMSInfoC(struct soap *soap, struct __ns1__SetSMSInfoC *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetSMSInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetSMSInfoC * SOAP_FMAC2 soap_instantiate___ns1__SetSMSInfoC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetSMSInfoC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetSMSInfoC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetSMSInfoC);
		if (size)
			*size = sizeof(struct __ns1__SetSMSInfoC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetSMSInfoC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetSMSInfoC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetSMSInfoC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetSMSInfoC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetSMSInfoC %p -> %p\n", q, p));
	*(struct __ns1__SetSMSInfoC*)p = *(struct __ns1__SetSMSInfoC*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetEmailJSON(struct soap *soap, struct __ns1__SetEmailJSON *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetEmailJSON = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetEmailJSON(struct soap *soap, const struct __ns1__SetEmailJSON *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetEmailJSON(soap, &a->ns1__SetEmailJSON);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetEmailJSON(struct soap *soap, const char *tag, int id, const struct __ns1__SetEmailJSON *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetEmailJSON(soap, "ns1:SetEmailJSON", -1, &a->ns1__SetEmailJSON, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetEmailJSON * SOAP_FMAC4 soap_in___ns1__SetEmailJSON(struct soap *soap, const char *tag, struct __ns1__SetEmailJSON *a, const char *type)
{
	size_t soap_flag_ns1__SetEmailJSON = 1;
	short soap_flag;
	a = (struct __ns1__SetEmailJSON *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetEmailJSON, sizeof(struct __ns1__SetEmailJSON), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetEmailJSON(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetEmailJSON && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetEmailJSON(soap, "ns1:SetEmailJSON", &a->ns1__SetEmailJSON, ""))
				{	soap_flag_ns1__SetEmailJSON--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetEmailJSON(struct soap *soap, const struct __ns1__SetEmailJSON *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetEmailJSON(soap, tag?tag:"-ns1:SetEmailJSON", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetEmailJSON * SOAP_FMAC4 soap_get___ns1__SetEmailJSON(struct soap *soap, struct __ns1__SetEmailJSON *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetEmailJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetEmailJSON * SOAP_FMAC2 soap_instantiate___ns1__SetEmailJSON(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetEmailJSON(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetEmailJSON, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetEmailJSON);
		if (size)
			*size = sizeof(struct __ns1__SetEmailJSON);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetEmailJSON[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetEmailJSON);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetEmailJSON*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetEmailJSON(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetEmailJSON %p -> %p\n", q, p));
	*(struct __ns1__SetEmailJSON*)p = *(struct __ns1__SetEmailJSON*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetSMSJSON(struct soap *soap, struct __ns1__SetSMSJSON *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetSMSJSON = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetSMSJSON(struct soap *soap, const struct __ns1__SetSMSJSON *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetSMSJSON(soap, &a->ns1__SetSMSJSON);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetSMSJSON(struct soap *soap, const char *tag, int id, const struct __ns1__SetSMSJSON *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetSMSJSON(soap, "ns1:SetSMSJSON", -1, &a->ns1__SetSMSJSON, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSMSJSON * SOAP_FMAC4 soap_in___ns1__SetSMSJSON(struct soap *soap, const char *tag, struct __ns1__SetSMSJSON *a, const char *type)
{
	size_t soap_flag_ns1__SetSMSJSON = 1;
	short soap_flag;
	a = (struct __ns1__SetSMSJSON *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetSMSJSON, sizeof(struct __ns1__SetSMSJSON), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetSMSJSON(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetSMSJSON && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetSMSJSON(soap, "ns1:SetSMSJSON", &a->ns1__SetSMSJSON, ""))
				{	soap_flag_ns1__SetSMSJSON--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetSMSJSON(struct soap *soap, const struct __ns1__SetSMSJSON *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetSMSJSON(soap, tag?tag:"-ns1:SetSMSJSON", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSMSJSON * SOAP_FMAC4 soap_get___ns1__SetSMSJSON(struct soap *soap, struct __ns1__SetSMSJSON *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetSMSJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetSMSJSON * SOAP_FMAC2 soap_instantiate___ns1__SetSMSJSON(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetSMSJSON(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetSMSJSON, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetSMSJSON);
		if (size)
			*size = sizeof(struct __ns1__SetSMSJSON);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetSMSJSON[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetSMSJSON);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetSMSJSON*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetSMSJSON(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetSMSJSON %p -> %p\n", q, p));
	*(struct __ns1__SetSMSJSON*)p = *(struct __ns1__SetSMSJSON*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetRTXJSON(struct soap *soap, struct __ns1__SetRTXJSON *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetRTXJSON = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetRTXJSON(struct soap *soap, const struct __ns1__SetRTXJSON *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetRTXJSON(soap, &a->ns1__SetRTXJSON);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetRTXJSON(struct soap *soap, const char *tag, int id, const struct __ns1__SetRTXJSON *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetRTXJSON(soap, "ns1:SetRTXJSON", -1, &a->ns1__SetRTXJSON, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXJSON * SOAP_FMAC4 soap_in___ns1__SetRTXJSON(struct soap *soap, const char *tag, struct __ns1__SetRTXJSON *a, const char *type)
{
	size_t soap_flag_ns1__SetRTXJSON = 1;
	short soap_flag;
	a = (struct __ns1__SetRTXJSON *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetRTXJSON, sizeof(struct __ns1__SetRTXJSON), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetRTXJSON(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetRTXJSON && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetRTXJSON(soap, "ns1:SetRTXJSON", &a->ns1__SetRTXJSON, ""))
				{	soap_flag_ns1__SetRTXJSON--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetRTXJSON(struct soap *soap, const struct __ns1__SetRTXJSON *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetRTXJSON(soap, tag?tag:"-ns1:SetRTXJSON", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXJSON * SOAP_FMAC4 soap_get___ns1__SetRTXJSON(struct soap *soap, struct __ns1__SetRTXJSON *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetRTXJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetRTXJSON * SOAP_FMAC2 soap_instantiate___ns1__SetRTXJSON(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetRTXJSON(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetRTXJSON, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXJSON);
		if (size)
			*size = sizeof(struct __ns1__SetRTXJSON);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXJSON[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetRTXJSON);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetRTXJSON*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetRTXJSON(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetRTXJSON %p -> %p\n", q, p));
	*(struct __ns1__SetRTXJSON*)p = *(struct __ns1__SetRTXJSON*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetRTXNotify(struct soap *soap, struct __ns1__SetRTXNotify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetRTXNotify = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetRTXNotify(struct soap *soap, const struct __ns1__SetRTXNotify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetRTXNotify(soap, &a->ns1__SetRTXNotify);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetRTXNotify(struct soap *soap, const char *tag, int id, const struct __ns1__SetRTXNotify *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetRTXNotify(soap, "ns1:SetRTXNotify", -1, &a->ns1__SetRTXNotify, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXNotify * SOAP_FMAC4 soap_in___ns1__SetRTXNotify(struct soap *soap, const char *tag, struct __ns1__SetRTXNotify *a, const char *type)
{
	size_t soap_flag_ns1__SetRTXNotify = 1;
	short soap_flag;
	a = (struct __ns1__SetRTXNotify *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetRTXNotify, sizeof(struct __ns1__SetRTXNotify), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetRTXNotify(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetRTXNotify && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetRTXNotify(soap, "ns1:SetRTXNotify", &a->ns1__SetRTXNotify, ""))
				{	soap_flag_ns1__SetRTXNotify--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetRTXNotify(struct soap *soap, const struct __ns1__SetRTXNotify *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetRTXNotify(soap, tag?tag:"-ns1:SetRTXNotify", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXNotify * SOAP_FMAC4 soap_get___ns1__SetRTXNotify(struct soap *soap, struct __ns1__SetRTXNotify *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetRTXNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetRTXNotify * SOAP_FMAC2 soap_instantiate___ns1__SetRTXNotify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetRTXNotify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetRTXNotify, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXNotify);
		if (size)
			*size = sizeof(struct __ns1__SetRTXNotify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXNotify[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetRTXNotify);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetRTXNotify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetRTXNotify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetRTXNotify %p -> %p\n", q, p));
	*(struct __ns1__SetRTXNotify*)p = *(struct __ns1__SetRTXNotify*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMMSInfo(struct soap *soap, struct __ns1__SetMMSInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetMMSInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMMSInfo(struct soap *soap, const struct __ns1__SetMMSInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetMMSInfo(soap, &a->ns1__SetMMSInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMMSInfo(struct soap *soap, const char *tag, int id, const struct __ns1__SetMMSInfo *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetMMSInfo(soap, "ns1:SetMMSInfo", -1, &a->ns1__SetMMSInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetMMSInfo * SOAP_FMAC4 soap_in___ns1__SetMMSInfo(struct soap *soap, const char *tag, struct __ns1__SetMMSInfo *a, const char *type)
{
	size_t soap_flag_ns1__SetMMSInfo = 1;
	short soap_flag;
	a = (struct __ns1__SetMMSInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetMMSInfo, sizeof(struct __ns1__SetMMSInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetMMSInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetMMSInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetMMSInfo(soap, "ns1:SetMMSInfo", &a->ns1__SetMMSInfo, ""))
				{	soap_flag_ns1__SetMMSInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMMSInfo(struct soap *soap, const struct __ns1__SetMMSInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetMMSInfo(soap, tag?tag:"-ns1:SetMMSInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetMMSInfo * SOAP_FMAC4 soap_get___ns1__SetMMSInfo(struct soap *soap, struct __ns1__SetMMSInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetMMSInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetMMSInfo * SOAP_FMAC2 soap_instantiate___ns1__SetMMSInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetMMSInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetMMSInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetMMSInfo);
		if (size)
			*size = sizeof(struct __ns1__SetMMSInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetMMSInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetMMSInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetMMSInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetMMSInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetMMSInfo %p -> %p\n", q, p));
	*(struct __ns1__SetMMSInfo*)p = *(struct __ns1__SetMMSInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetEmailInfo(struct soap *soap, struct __ns1__SetEmailInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetEmailInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetEmailInfo(struct soap *soap, const struct __ns1__SetEmailInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetEmailInfo(soap, &a->ns1__SetEmailInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetEmailInfo(struct soap *soap, const char *tag, int id, const struct __ns1__SetEmailInfo *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetEmailInfo(soap, "ns1:SetEmailInfo", -1, &a->ns1__SetEmailInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetEmailInfo * SOAP_FMAC4 soap_in___ns1__SetEmailInfo(struct soap *soap, const char *tag, struct __ns1__SetEmailInfo *a, const char *type)
{
	size_t soap_flag_ns1__SetEmailInfo = 1;
	short soap_flag;
	a = (struct __ns1__SetEmailInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetEmailInfo, sizeof(struct __ns1__SetEmailInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetEmailInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetEmailInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetEmailInfo(soap, "ns1:SetEmailInfo", &a->ns1__SetEmailInfo, ""))
				{	soap_flag_ns1__SetEmailInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetEmailInfo(struct soap *soap, const struct __ns1__SetEmailInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetEmailInfo(soap, tag?tag:"-ns1:SetEmailInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetEmailInfo * SOAP_FMAC4 soap_get___ns1__SetEmailInfo(struct soap *soap, struct __ns1__SetEmailInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetEmailInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetEmailInfo * SOAP_FMAC2 soap_instantiate___ns1__SetEmailInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetEmailInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetEmailInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetEmailInfo);
		if (size)
			*size = sizeof(struct __ns1__SetEmailInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetEmailInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetEmailInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetEmailInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetEmailInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetEmailInfo %p -> %p\n", q, p));
	*(struct __ns1__SetEmailInfo*)p = *(struct __ns1__SetEmailInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetSMSInfo(struct soap *soap, struct __ns1__SetSMSInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetSMSInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetSMSInfo(struct soap *soap, const struct __ns1__SetSMSInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetSMSInfo(soap, &a->ns1__SetSMSInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetSMSInfo(struct soap *soap, const char *tag, int id, const struct __ns1__SetSMSInfo *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetSMSInfo(soap, "ns1:SetSMSInfo", -1, &a->ns1__SetSMSInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSMSInfo * SOAP_FMAC4 soap_in___ns1__SetSMSInfo(struct soap *soap, const char *tag, struct __ns1__SetSMSInfo *a, const char *type)
{
	size_t soap_flag_ns1__SetSMSInfo = 1;
	short soap_flag;
	a = (struct __ns1__SetSMSInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetSMSInfo, sizeof(struct __ns1__SetSMSInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetSMSInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetSMSInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetSMSInfo(soap, "ns1:SetSMSInfo", &a->ns1__SetSMSInfo, ""))
				{	soap_flag_ns1__SetSMSInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetSMSInfo(struct soap *soap, const struct __ns1__SetSMSInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetSMSInfo(soap, tag?tag:"-ns1:SetSMSInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetSMSInfo * SOAP_FMAC4 soap_get___ns1__SetSMSInfo(struct soap *soap, struct __ns1__SetSMSInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetSMSInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetSMSInfo * SOAP_FMAC2 soap_instantiate___ns1__SetSMSInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetSMSInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetSMSInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetSMSInfo);
		if (size)
			*size = sizeof(struct __ns1__SetSMSInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetSMSInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetSMSInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetSMSInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetSMSInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetSMSInfo %p -> %p\n", q, p));
	*(struct __ns1__SetSMSInfo*)p = *(struct __ns1__SetSMSInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetRTXInfo(struct soap *soap, struct __ns1__SetRTXInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SetRTXInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetRTXInfo(struct soap *soap, const struct __ns1__SetRTXInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SetRTXInfo(soap, &a->ns1__SetRTXInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetRTXInfo(struct soap *soap, const char *tag, int id, const struct __ns1__SetRTXInfo *a, const char *type)
{	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__SetRTXInfo(soap, "ns1:SetRTXInfo", -1, &a->ns1__SetRTXInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXInfo * SOAP_FMAC4 soap_in___ns1__SetRTXInfo(struct soap *soap, const char *tag, struct __ns1__SetRTXInfo *a, const char *type)
{
	size_t soap_flag_ns1__SetRTXInfo = 1;
	short soap_flag;
	a = (struct __ns1__SetRTXInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__SetRTXInfo, sizeof(struct __ns1__SetRTXInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__SetRTXInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SetRTXInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SetRTXInfo(soap, "ns1:SetRTXInfo", &a->ns1__SetRTXInfo, ""))
				{	soap_flag_ns1__SetRTXInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetRTXInfo(struct soap *soap, const struct __ns1__SetRTXInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__SetRTXInfo(soap, tag?tag:"-ns1:SetRTXInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__SetRTXInfo * SOAP_FMAC4 soap_get___ns1__SetRTXInfo(struct soap *soap, struct __ns1__SetRTXInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__SetRTXInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__SetRTXInfo * SOAP_FMAC2 soap_instantiate___ns1__SetRTXInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__SetRTXInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__SetRTXInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXInfo);
		if (size)
			*size = sizeof(struct __ns1__SetRTXInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__SetRTXInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__SetRTXInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__SetRTXInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetRTXInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__SetRTXInfo %p -> %p\n", q, p));
	*(struct __ns1__SetRTXInfo*)p = *(struct __ns1__SetRTXInfo*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXNotifyCResponse(struct soap *soap, _ns1__SetRTXNotifyCResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXNotifyCResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXNotifyCResponse(struct soap *soap, const char *tag, int id, _ns1__SetRTXNotifyCResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXNotifyCResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyCResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXNotifyCResponse(struct soap *soap, const char *tag, _ns1__SetRTXNotifyCResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXNotifyCResponse **)soap_malloc(soap, sizeof(_ns1__SetRTXNotifyCResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXNotifyCResponse *)soap_instantiate__ns1__SetRTXNotifyCResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXNotifyCResponse ** p = (_ns1__SetRTXNotifyCResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXNotifyCResponse, sizeof(_ns1__SetRTXNotifyCResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXNotifyCResponse(struct soap *soap, _ns1__SetRTXNotifyCResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXNotifyCResponse);
	if (soap_out_PointerTo_ns1__SetRTXNotifyCResponse(soap, tag?tag:"ns1:SetRTXNotifyCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXNotifyCResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXNotifyCResponse(struct soap *soap, _ns1__SetRTXNotifyCResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXNotifyCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXNotifyC(struct soap *soap, _ns1__SetRTXNotifyC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXNotifyC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXNotifyC(struct soap *soap, const char *tag, int id, _ns1__SetRTXNotifyC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXNotifyC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyC ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXNotifyC(struct soap *soap, const char *tag, _ns1__SetRTXNotifyC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXNotifyC **)soap_malloc(soap, sizeof(_ns1__SetRTXNotifyC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXNotifyC *)soap_instantiate__ns1__SetRTXNotifyC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXNotifyC ** p = (_ns1__SetRTXNotifyC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXNotifyC, sizeof(_ns1__SetRTXNotifyC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXNotifyC(struct soap *soap, _ns1__SetRTXNotifyC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXNotifyC);
	if (soap_out_PointerTo_ns1__SetRTXNotifyC(soap, tag?tag:"ns1:SetRTXNotifyC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXNotifyC ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXNotifyC(struct soap *soap, _ns1__SetRTXNotifyC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXNotifyC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMMSInfoCResponse(struct soap *soap, _ns1__SetMMSInfoCResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetMMSInfoCResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMMSInfoCResponse(struct soap *soap, const char *tag, int id, _ns1__SetMMSInfoCResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetMMSInfoCResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoCResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMMSInfoCResponse(struct soap *soap, const char *tag, _ns1__SetMMSInfoCResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetMMSInfoCResponse **)soap_malloc(soap, sizeof(_ns1__SetMMSInfoCResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetMMSInfoCResponse *)soap_instantiate__ns1__SetMMSInfoCResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetMMSInfoCResponse ** p = (_ns1__SetMMSInfoCResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetMMSInfoCResponse, sizeof(_ns1__SetMMSInfoCResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMMSInfoCResponse(struct soap *soap, _ns1__SetMMSInfoCResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetMMSInfoCResponse);
	if (soap_out_PointerTo_ns1__SetMMSInfoCResponse(soap, tag?tag:"ns1:SetMMSInfoCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetMMSInfoCResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMMSInfoCResponse(struct soap *soap, _ns1__SetMMSInfoCResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetMMSInfoCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMMSInfoC(struct soap *soap, _ns1__SetMMSInfoC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetMMSInfoC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMMSInfoC(struct soap *soap, const char *tag, int id, _ns1__SetMMSInfoC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetMMSInfoC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoC ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMMSInfoC(struct soap *soap, const char *tag, _ns1__SetMMSInfoC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetMMSInfoC **)soap_malloc(soap, sizeof(_ns1__SetMMSInfoC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetMMSInfoC *)soap_instantiate__ns1__SetMMSInfoC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetMMSInfoC ** p = (_ns1__SetMMSInfoC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetMMSInfoC, sizeof(_ns1__SetMMSInfoC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMMSInfoC(struct soap *soap, _ns1__SetMMSInfoC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetMMSInfoC);
	if (soap_out_PointerTo_ns1__SetMMSInfoC(soap, tag?tag:"ns1:SetMMSInfoC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetMMSInfoC ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMMSInfoC(struct soap *soap, _ns1__SetMMSInfoC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetMMSInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetEmailInfoCResponse(struct soap *soap, _ns1__SetEmailInfoCResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetEmailInfoCResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetEmailInfoCResponse(struct soap *soap, const char *tag, int id, _ns1__SetEmailInfoCResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetEmailInfoCResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoCResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetEmailInfoCResponse(struct soap *soap, const char *tag, _ns1__SetEmailInfoCResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetEmailInfoCResponse **)soap_malloc(soap, sizeof(_ns1__SetEmailInfoCResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetEmailInfoCResponse *)soap_instantiate__ns1__SetEmailInfoCResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetEmailInfoCResponse ** p = (_ns1__SetEmailInfoCResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetEmailInfoCResponse, sizeof(_ns1__SetEmailInfoCResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetEmailInfoCResponse(struct soap *soap, _ns1__SetEmailInfoCResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetEmailInfoCResponse);
	if (soap_out_PointerTo_ns1__SetEmailInfoCResponse(soap, tag?tag:"ns1:SetEmailInfoCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetEmailInfoCResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetEmailInfoCResponse(struct soap *soap, _ns1__SetEmailInfoCResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetEmailInfoCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetEmailInfoC(struct soap *soap, _ns1__SetEmailInfoC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetEmailInfoC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetEmailInfoC(struct soap *soap, const char *tag, int id, _ns1__SetEmailInfoC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetEmailInfoC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoC ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetEmailInfoC(struct soap *soap, const char *tag, _ns1__SetEmailInfoC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetEmailInfoC **)soap_malloc(soap, sizeof(_ns1__SetEmailInfoC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetEmailInfoC *)soap_instantiate__ns1__SetEmailInfoC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetEmailInfoC ** p = (_ns1__SetEmailInfoC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetEmailInfoC, sizeof(_ns1__SetEmailInfoC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetEmailInfoC(struct soap *soap, _ns1__SetEmailInfoC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetEmailInfoC);
	if (soap_out_PointerTo_ns1__SetEmailInfoC(soap, tag?tag:"ns1:SetEmailInfoC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetEmailInfoC ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetEmailInfoC(struct soap *soap, _ns1__SetEmailInfoC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetEmailInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXInfoCResponse(struct soap *soap, _ns1__SetRTXInfoCResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXInfoCResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXInfoCResponse(struct soap *soap, const char *tag, int id, _ns1__SetRTXInfoCResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXInfoCResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoCResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXInfoCResponse(struct soap *soap, const char *tag, _ns1__SetRTXInfoCResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXInfoCResponse **)soap_malloc(soap, sizeof(_ns1__SetRTXInfoCResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXInfoCResponse *)soap_instantiate__ns1__SetRTXInfoCResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXInfoCResponse ** p = (_ns1__SetRTXInfoCResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXInfoCResponse, sizeof(_ns1__SetRTXInfoCResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXInfoCResponse(struct soap *soap, _ns1__SetRTXInfoCResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXInfoCResponse);
	if (soap_out_PointerTo_ns1__SetRTXInfoCResponse(soap, tag?tag:"ns1:SetRTXInfoCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXInfoCResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXInfoCResponse(struct soap *soap, _ns1__SetRTXInfoCResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXInfoCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXInfoC(struct soap *soap, _ns1__SetRTXInfoC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXInfoC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXInfoC(struct soap *soap, const char *tag, int id, _ns1__SetRTXInfoC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXInfoC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoC ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXInfoC(struct soap *soap, const char *tag, _ns1__SetRTXInfoC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXInfoC **)soap_malloc(soap, sizeof(_ns1__SetRTXInfoC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXInfoC *)soap_instantiate__ns1__SetRTXInfoC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXInfoC ** p = (_ns1__SetRTXInfoC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXInfoC, sizeof(_ns1__SetRTXInfoC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXInfoC(struct soap *soap, _ns1__SetRTXInfoC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXInfoC);
	if (soap_out_PointerTo_ns1__SetRTXInfoC(soap, tag?tag:"ns1:SetRTXInfoC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXInfoC ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXInfoC(struct soap *soap, _ns1__SetRTXInfoC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSMSInfoCResponse(struct soap *soap, _ns1__SetSMSInfoCResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetSMSInfoCResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSMSInfoCResponse(struct soap *soap, const char *tag, int id, _ns1__SetSMSInfoCResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetSMSInfoCResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoCResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSMSInfoCResponse(struct soap *soap, const char *tag, _ns1__SetSMSInfoCResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetSMSInfoCResponse **)soap_malloc(soap, sizeof(_ns1__SetSMSInfoCResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetSMSInfoCResponse *)soap_instantiate__ns1__SetSMSInfoCResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetSMSInfoCResponse ** p = (_ns1__SetSMSInfoCResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetSMSInfoCResponse, sizeof(_ns1__SetSMSInfoCResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSMSInfoCResponse(struct soap *soap, _ns1__SetSMSInfoCResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetSMSInfoCResponse);
	if (soap_out_PointerTo_ns1__SetSMSInfoCResponse(soap, tag?tag:"ns1:SetSMSInfoCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetSMSInfoCResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSMSInfoCResponse(struct soap *soap, _ns1__SetSMSInfoCResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetSMSInfoCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSMSInfoC(struct soap *soap, _ns1__SetSMSInfoC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetSMSInfoC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSMSInfoC(struct soap *soap, const char *tag, int id, _ns1__SetSMSInfoC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetSMSInfoC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoC ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSMSInfoC(struct soap *soap, const char *tag, _ns1__SetSMSInfoC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetSMSInfoC **)soap_malloc(soap, sizeof(_ns1__SetSMSInfoC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetSMSInfoC *)soap_instantiate__ns1__SetSMSInfoC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetSMSInfoC ** p = (_ns1__SetSMSInfoC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetSMSInfoC, sizeof(_ns1__SetSMSInfoC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSMSInfoC(struct soap *soap, _ns1__SetSMSInfoC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetSMSInfoC);
	if (soap_out_PointerTo_ns1__SetSMSInfoC(soap, tag?tag:"ns1:SetSMSInfoC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetSMSInfoC ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSMSInfoC(struct soap *soap, _ns1__SetSMSInfoC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetSMSInfoC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetEmailJSONResponse(struct soap *soap, _ns1__SetEmailJSONResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetEmailJSONResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetEmailJSONResponse(struct soap *soap, const char *tag, int id, _ns1__SetEmailJSONResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetEmailJSONResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetEmailJSONResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetEmailJSONResponse(struct soap *soap, const char *tag, _ns1__SetEmailJSONResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetEmailJSONResponse **)soap_malloc(soap, sizeof(_ns1__SetEmailJSONResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetEmailJSONResponse *)soap_instantiate__ns1__SetEmailJSONResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetEmailJSONResponse ** p = (_ns1__SetEmailJSONResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetEmailJSONResponse, sizeof(_ns1__SetEmailJSONResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetEmailJSONResponse(struct soap *soap, _ns1__SetEmailJSONResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetEmailJSONResponse);
	if (soap_out_PointerTo_ns1__SetEmailJSONResponse(soap, tag?tag:"ns1:SetEmailJSONResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetEmailJSONResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetEmailJSONResponse(struct soap *soap, _ns1__SetEmailJSONResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetEmailJSONResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetEmailJSON(struct soap *soap, _ns1__SetEmailJSON *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetEmailJSON))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetEmailJSON(struct soap *soap, const char *tag, int id, _ns1__SetEmailJSON *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetEmailJSON);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetEmailJSON ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetEmailJSON(struct soap *soap, const char *tag, _ns1__SetEmailJSON **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetEmailJSON **)soap_malloc(soap, sizeof(_ns1__SetEmailJSON *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetEmailJSON *)soap_instantiate__ns1__SetEmailJSON(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetEmailJSON ** p = (_ns1__SetEmailJSON **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetEmailJSON, sizeof(_ns1__SetEmailJSON), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetEmailJSON(struct soap *soap, _ns1__SetEmailJSON *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetEmailJSON);
	if (soap_out_PointerTo_ns1__SetEmailJSON(soap, tag?tag:"ns1:SetEmailJSON", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetEmailJSON ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetEmailJSON(struct soap *soap, _ns1__SetEmailJSON **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetEmailJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSMSJSONResponse(struct soap *soap, _ns1__SetSMSJSONResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetSMSJSONResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSMSJSONResponse(struct soap *soap, const char *tag, int id, _ns1__SetSMSJSONResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetSMSJSONResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetSMSJSONResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSMSJSONResponse(struct soap *soap, const char *tag, _ns1__SetSMSJSONResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetSMSJSONResponse **)soap_malloc(soap, sizeof(_ns1__SetSMSJSONResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetSMSJSONResponse *)soap_instantiate__ns1__SetSMSJSONResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetSMSJSONResponse ** p = (_ns1__SetSMSJSONResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetSMSJSONResponse, sizeof(_ns1__SetSMSJSONResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSMSJSONResponse(struct soap *soap, _ns1__SetSMSJSONResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetSMSJSONResponse);
	if (soap_out_PointerTo_ns1__SetSMSJSONResponse(soap, tag?tag:"ns1:SetSMSJSONResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetSMSJSONResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSMSJSONResponse(struct soap *soap, _ns1__SetSMSJSONResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetSMSJSONResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSMSJSON(struct soap *soap, _ns1__SetSMSJSON *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetSMSJSON))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSMSJSON(struct soap *soap, const char *tag, int id, _ns1__SetSMSJSON *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetSMSJSON);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetSMSJSON ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSMSJSON(struct soap *soap, const char *tag, _ns1__SetSMSJSON **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetSMSJSON **)soap_malloc(soap, sizeof(_ns1__SetSMSJSON *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetSMSJSON *)soap_instantiate__ns1__SetSMSJSON(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetSMSJSON ** p = (_ns1__SetSMSJSON **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetSMSJSON, sizeof(_ns1__SetSMSJSON), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSMSJSON(struct soap *soap, _ns1__SetSMSJSON *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetSMSJSON);
	if (soap_out_PointerTo_ns1__SetSMSJSON(soap, tag?tag:"ns1:SetSMSJSON", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetSMSJSON ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSMSJSON(struct soap *soap, _ns1__SetSMSJSON **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetSMSJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXJSONResponse(struct soap *soap, _ns1__SetRTXJSONResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXJSONResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXJSONResponse(struct soap *soap, const char *tag, int id, _ns1__SetRTXJSONResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXJSONResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXJSONResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXJSONResponse(struct soap *soap, const char *tag, _ns1__SetRTXJSONResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXJSONResponse **)soap_malloc(soap, sizeof(_ns1__SetRTXJSONResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXJSONResponse *)soap_instantiate__ns1__SetRTXJSONResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXJSONResponse ** p = (_ns1__SetRTXJSONResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXJSONResponse, sizeof(_ns1__SetRTXJSONResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXJSONResponse(struct soap *soap, _ns1__SetRTXJSONResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXJSONResponse);
	if (soap_out_PointerTo_ns1__SetRTXJSONResponse(soap, tag?tag:"ns1:SetRTXJSONResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXJSONResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXJSONResponse(struct soap *soap, _ns1__SetRTXJSONResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXJSONResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXJSON(struct soap *soap, _ns1__SetRTXJSON *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXJSON))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXJSON(struct soap *soap, const char *tag, int id, _ns1__SetRTXJSON *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXJSON);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXJSON ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXJSON(struct soap *soap, const char *tag, _ns1__SetRTXJSON **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXJSON **)soap_malloc(soap, sizeof(_ns1__SetRTXJSON *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXJSON *)soap_instantiate__ns1__SetRTXJSON(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXJSON ** p = (_ns1__SetRTXJSON **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXJSON, sizeof(_ns1__SetRTXJSON), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXJSON(struct soap *soap, _ns1__SetRTXJSON *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXJSON);
	if (soap_out_PointerTo_ns1__SetRTXJSON(soap, tag?tag:"ns1:SetRTXJSON", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXJSON ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXJSON(struct soap *soap, _ns1__SetRTXJSON **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXNotifyResponse(struct soap *soap, _ns1__SetRTXNotifyResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXNotifyResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXNotifyResponse(struct soap *soap, const char *tag, int id, _ns1__SetRTXNotifyResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXNotifyResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXNotifyResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXNotifyResponse(struct soap *soap, const char *tag, _ns1__SetRTXNotifyResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXNotifyResponse **)soap_malloc(soap, sizeof(_ns1__SetRTXNotifyResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXNotifyResponse *)soap_instantiate__ns1__SetRTXNotifyResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXNotifyResponse ** p = (_ns1__SetRTXNotifyResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXNotifyResponse, sizeof(_ns1__SetRTXNotifyResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXNotifyResponse(struct soap *soap, _ns1__SetRTXNotifyResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXNotifyResponse);
	if (soap_out_PointerTo_ns1__SetRTXNotifyResponse(soap, tag?tag:"ns1:SetRTXNotifyResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXNotifyResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXNotifyResponse(struct soap *soap, _ns1__SetRTXNotifyResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXNotifyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXNotify(struct soap *soap, _ns1__SetRTXNotify *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXNotify))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXNotify(struct soap *soap, const char *tag, int id, _ns1__SetRTXNotify *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXNotify);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXNotify ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXNotify(struct soap *soap, const char *tag, _ns1__SetRTXNotify **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXNotify **)soap_malloc(soap, sizeof(_ns1__SetRTXNotify *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXNotify *)soap_instantiate__ns1__SetRTXNotify(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXNotify ** p = (_ns1__SetRTXNotify **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXNotify, sizeof(_ns1__SetRTXNotify), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXNotify(struct soap *soap, _ns1__SetRTXNotify *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXNotify);
	if (soap_out_PointerTo_ns1__SetRTXNotify(soap, tag?tag:"ns1:SetRTXNotify", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXNotify ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXNotify(struct soap *soap, _ns1__SetRTXNotify **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXNotify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMMSInfoResponse(struct soap *soap, _ns1__SetMMSInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetMMSInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMMSInfoResponse(struct soap *soap, const char *tag, int id, _ns1__SetMMSInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetMMSInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetMMSInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMMSInfoResponse(struct soap *soap, const char *tag, _ns1__SetMMSInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetMMSInfoResponse **)soap_malloc(soap, sizeof(_ns1__SetMMSInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetMMSInfoResponse *)soap_instantiate__ns1__SetMMSInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetMMSInfoResponse ** p = (_ns1__SetMMSInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetMMSInfoResponse, sizeof(_ns1__SetMMSInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMMSInfoResponse(struct soap *soap, _ns1__SetMMSInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetMMSInfoResponse);
	if (soap_out_PointerTo_ns1__SetMMSInfoResponse(soap, tag?tag:"ns1:SetMMSInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetMMSInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMMSInfoResponse(struct soap *soap, _ns1__SetMMSInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetMMSInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMMSInfo(struct soap *soap, _ns1__SetMMSInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetMMSInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMMSInfo(struct soap *soap, const char *tag, int id, _ns1__SetMMSInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetMMSInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetMMSInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMMSInfo(struct soap *soap, const char *tag, _ns1__SetMMSInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetMMSInfo **)soap_malloc(soap, sizeof(_ns1__SetMMSInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetMMSInfo *)soap_instantiate__ns1__SetMMSInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetMMSInfo ** p = (_ns1__SetMMSInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetMMSInfo, sizeof(_ns1__SetMMSInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMMSInfo(struct soap *soap, _ns1__SetMMSInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetMMSInfo);
	if (soap_out_PointerTo_ns1__SetMMSInfo(soap, tag?tag:"ns1:SetMMSInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetMMSInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMMSInfo(struct soap *soap, _ns1__SetMMSInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetMMSInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetEmailInfoResponse(struct soap *soap, _ns1__SetEmailInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetEmailInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetEmailInfoResponse(struct soap *soap, const char *tag, int id, _ns1__SetEmailInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetEmailInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetEmailInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetEmailInfoResponse(struct soap *soap, const char *tag, _ns1__SetEmailInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetEmailInfoResponse **)soap_malloc(soap, sizeof(_ns1__SetEmailInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetEmailInfoResponse *)soap_instantiate__ns1__SetEmailInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetEmailInfoResponse ** p = (_ns1__SetEmailInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetEmailInfoResponse, sizeof(_ns1__SetEmailInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetEmailInfoResponse(struct soap *soap, _ns1__SetEmailInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetEmailInfoResponse);
	if (soap_out_PointerTo_ns1__SetEmailInfoResponse(soap, tag?tag:"ns1:SetEmailInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetEmailInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetEmailInfoResponse(struct soap *soap, _ns1__SetEmailInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetEmailInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetEmailInfo(struct soap *soap, _ns1__SetEmailInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetEmailInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetEmailInfo(struct soap *soap, const char *tag, int id, _ns1__SetEmailInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetEmailInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetEmailInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetEmailInfo(struct soap *soap, const char *tag, _ns1__SetEmailInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetEmailInfo **)soap_malloc(soap, sizeof(_ns1__SetEmailInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetEmailInfo *)soap_instantiate__ns1__SetEmailInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetEmailInfo ** p = (_ns1__SetEmailInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetEmailInfo, sizeof(_ns1__SetEmailInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetEmailInfo(struct soap *soap, _ns1__SetEmailInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetEmailInfo);
	if (soap_out_PointerTo_ns1__SetEmailInfo(soap, tag?tag:"ns1:SetEmailInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetEmailInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetEmailInfo(struct soap *soap, _ns1__SetEmailInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetEmailInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSMSInfoResponse(struct soap *soap, _ns1__SetSMSInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetSMSInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSMSInfoResponse(struct soap *soap, const char *tag, int id, _ns1__SetSMSInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetSMSInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetSMSInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSMSInfoResponse(struct soap *soap, const char *tag, _ns1__SetSMSInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetSMSInfoResponse **)soap_malloc(soap, sizeof(_ns1__SetSMSInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetSMSInfoResponse *)soap_instantiate__ns1__SetSMSInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetSMSInfoResponse ** p = (_ns1__SetSMSInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetSMSInfoResponse, sizeof(_ns1__SetSMSInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSMSInfoResponse(struct soap *soap, _ns1__SetSMSInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetSMSInfoResponse);
	if (soap_out_PointerTo_ns1__SetSMSInfoResponse(soap, tag?tag:"ns1:SetSMSInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetSMSInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSMSInfoResponse(struct soap *soap, _ns1__SetSMSInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetSMSInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetSMSInfo(struct soap *soap, _ns1__SetSMSInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetSMSInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetSMSInfo(struct soap *soap, const char *tag, int id, _ns1__SetSMSInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetSMSInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetSMSInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetSMSInfo(struct soap *soap, const char *tag, _ns1__SetSMSInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetSMSInfo **)soap_malloc(soap, sizeof(_ns1__SetSMSInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetSMSInfo *)soap_instantiate__ns1__SetSMSInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetSMSInfo ** p = (_ns1__SetSMSInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetSMSInfo, sizeof(_ns1__SetSMSInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetSMSInfo(struct soap *soap, _ns1__SetSMSInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetSMSInfo);
	if (soap_out_PointerTo_ns1__SetSMSInfo(soap, tag?tag:"ns1:SetSMSInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetSMSInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetSMSInfo(struct soap *soap, _ns1__SetSMSInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetSMSInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXInfoResponse(struct soap *soap, _ns1__SetRTXInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXInfoResponse(struct soap *soap, const char *tag, int id, _ns1__SetRTXInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXInfoResponse(struct soap *soap, const char *tag, _ns1__SetRTXInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXInfoResponse **)soap_malloc(soap, sizeof(_ns1__SetRTXInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXInfoResponse *)soap_instantiate__ns1__SetRTXInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXInfoResponse ** p = (_ns1__SetRTXInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXInfoResponse, sizeof(_ns1__SetRTXInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXInfoResponse(struct soap *soap, _ns1__SetRTXInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXInfoResponse);
	if (soap_out_PointerTo_ns1__SetRTXInfoResponse(soap, tag?tag:"ns1:SetRTXInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXInfoResponse(struct soap *soap, _ns1__SetRTXInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetRTXInfo(struct soap *soap, _ns1__SetRTXInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SetRTXInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetRTXInfo(struct soap *soap, const char *tag, int id, _ns1__SetRTXInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SetRTXInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SetRTXInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetRTXInfo(struct soap *soap, const char *tag, _ns1__SetRTXInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SetRTXInfo **)soap_malloc(soap, sizeof(_ns1__SetRTXInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SetRTXInfo *)soap_instantiate__ns1__SetRTXInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SetRTXInfo ** p = (_ns1__SetRTXInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SetRTXInfo, sizeof(_ns1__SetRTXInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetRTXInfo(struct soap *soap, _ns1__SetRTXInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SetRTXInfo);
	if (soap_out_PointerTo_ns1__SetRTXInfo(soap, tag?tag:"ns1:SetRTXInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__SetRTXInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetRTXInfo(struct soap *soap, _ns1__SetRTXInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SetRTXInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__QueryWandaMsg(struct soap *soap, ns4__QueryWandaMsg *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__QueryWandaMsg))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__QueryWandaMsg(struct soap *soap, const char *tag, int id, ns4__QueryWandaMsg *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__QueryWandaMsg);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__QueryWandaMsg ** SOAP_FMAC4 soap_in_PointerTons4__QueryWandaMsg(struct soap *soap, const char *tag, ns4__QueryWandaMsg **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__QueryWandaMsg **)soap_malloc(soap, sizeof(ns4__QueryWandaMsg *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__QueryWandaMsg *)soap_instantiate_ns4__QueryWandaMsg(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__QueryWandaMsg ** p = (ns4__QueryWandaMsg **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__QueryWandaMsg, sizeof(ns4__QueryWandaMsg), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__QueryWandaMsg(struct soap *soap, ns4__QueryWandaMsg *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons4__QueryWandaMsg);
	if (soap_out_PointerTons4__QueryWandaMsg(soap, tag?tag:"ns4:QueryWandaMsg", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__QueryWandaMsg ** SOAP_FMAC4 soap_get_PointerTons4__QueryWandaMsg(struct soap *soap, ns4__QueryWandaMsg **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__QueryWandaMsg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
